// ogre-viewport.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-09-24 13:29:03.

#include "handwritten/okra.h"


// Prototypes

extern "C"
{
    void ogre_viewport_update_void (Viewport*);
    RenderTarget* ogre_viewport_get_target (Viewport*);
    Camera* ogre_viewport_get_camera_void (Viewport*);
    void ogre_viewport_set_camera (Viewport*, Camera*);
    int ogre_viewport_get_zorder (Viewport*);
    Real ogre_viewport_get_left (Viewport*);
    Real ogre_viewport_get_top (Viewport*);
    Real ogre_viewport_get_width (Viewport*);
    Real ogre_viewport_get_height (Viewport*);
    int ogre_viewport_get_actual_left (Viewport*);
    int ogre_viewport_get_actual_top (Viewport*);
    int ogre_viewport_get_actual_width (Viewport*);
    int ogre_viewport_get_actual_height (Viewport*);
    void ogre_viewport_set_dimensions_real_real_real_real (Viewport*, Real, Real, Real, Real);
    void ogre_viewport_set_background_colour (Viewport*, const okraArray4);
    void ogre_viewport_get_background_colour (Viewport*, okraArray4);
    void ogre_viewport_set_clear_every_frame (Viewport*, bool, unsigned int);
    bool ogre_viewport_get_clear_every_frame (Viewport*);
    unsigned int ogre_viewport_get_clear_buffers (Viewport*);
    void ogre_viewport_set_material_scheme (Viewport*, const char*);
    const char* ogre_viewport_get_material_scheme (Viewport*);
    void ogre_viewport_get_actual_dimensions (Viewport*, int&, int&, int&, int&);
    void ogre_viewport_set_overlays_enabled (Viewport*, bool);
    bool ogre_viewport_get_overlays_enabled (Viewport*);
    void ogre_viewport_set_skies_enabled (Viewport*, bool);
    bool ogre_viewport_get_skies_enabled (Viewport*);
    void ogre_viewport_set_shadows_enabled (Viewport*, bool);
    bool ogre_viewport_get_shadows_enabled (Viewport*);
    void ogre_viewport_set_visibility_mask (Viewport*, unsigned int);
    unsigned int ogre_viewport_get_visibility_mask (Viewport*);
    void ogre_viewport_set_render_queue_invocation_sequence_name (Viewport*, const char*);
    const char* ogre_viewport_get_render_queue_invocation_sequence_name (Viewport*);
}


// Functions

// name: "update"
// type: "void"
// args: "void"
//
void ogre_viewport_update_void (Viewport* ogre_viewport)
{
    ogre_viewport->update();
}

// name: "getTarget"
// type: "RenderTarget*"
// args: "void"
//
RenderTarget* ogre_viewport_get_target (Viewport* ogre_viewport)
{
    return ogre_viewport->getTarget();
}

// name: "getCamera"
// type: "Camera*"
// args: "void"
//
Camera* ogre_viewport_get_camera_void (Viewport* ogre_viewport)
{
    return ogre_viewport->getCamera();
}

// name: "setCamera"
// type: "void"
// args: (("Camera*" . "cam"))
//
void ogre_viewport_set_camera (Viewport* ogre_viewport, Camera* cam)
{
    ogre_viewport->setCamera(cam);
}

// name: "getZOrder"
// type: "int"
// args: "void"
//
int ogre_viewport_get_zorder (Viewport* ogre_viewport)
{
    return ogre_viewport->getZOrder();
}

// name: "getLeft"
// type: "Real"
// args: "void"
//
Real ogre_viewport_get_left (Viewport* ogre_viewport)
{
    return ogre_viewport->getLeft();
}

// name: "getTop"
// type: "Real"
// args: "void"
//
Real ogre_viewport_get_top (Viewport* ogre_viewport)
{
    return ogre_viewport->getTop();
}

// name: "getWidth"
// type: "Real"
// args: "void"
//
Real ogre_viewport_get_width (Viewport* ogre_viewport)
{
    return ogre_viewport->getWidth();
}

// name: "getHeight"
// type: "Real"
// args: "void"
//
Real ogre_viewport_get_height (Viewport* ogre_viewport)
{
    return ogre_viewport->getHeight();
}

// name: "getActualLeft"
// type: "int"
// args: "void"
//
int ogre_viewport_get_actual_left (Viewport* ogre_viewport)
{
    return ogre_viewport->getActualLeft();
}

// name: "getActualTop"
// type: "int"
// args: "void"
//
int ogre_viewport_get_actual_top (Viewport* ogre_viewport)
{
    return ogre_viewport->getActualTop();
}

// name: "getActualWidth"
// type: "int"
// args: "void"
//
int ogre_viewport_get_actual_width (Viewport* ogre_viewport)
{
    return ogre_viewport->getActualWidth();
}

// name: "getActualHeight"
// type: "int"
// args: "void"
//
int ogre_viewport_get_actual_height (Viewport* ogre_viewport)
{
    return ogre_viewport->getActualHeight();
}

// name: "setDimensions"
// type: "void"
// args: (("Real" . "left") ("Real" . "top") ("Real" . "width") ("Real" . "height"))
//
void ogre_viewport_set_dimensions_real_real_real_real (Viewport* ogre_viewport, Real left, Real top, Real width, Real height)
{
    ogre_viewport->setDimensions(left, top, width, height);
}

// name: "setBackgroundColour"
// type: "void"
// args: (("const ColourValue&" . "colour"))
//
void ogre_viewport_set_background_colour (Viewport* ogre_viewport, const okraArray4 colour)
{
    ColourValue ogre_colour = ColourValue(colour[0], colour[1], colour[2], colour[3]);
    ogre_viewport->setBackgroundColour(ogre_colour);
}

// name: "getBackgroundColour"
// type: "const ColourValue&"
// args: "void"
//
void ogre_viewport_get_background_colour (Viewport* ogre_viewport, okraArray4 cv)
{
    ColourValue ogre_cv = ogre_viewport->getBackgroundColour();
    cv[0] = ogre_cv.r;
    cv[1] = ogre_cv.g;
    cv[2] = ogre_cv.b;
    cv[3] = ogre_cv.a;
}

// name: "setClearEveryFrame"
// type: "void"
// args: (("bool" . "clear") ("unsigned int" . "buffers"))
//
void ogre_viewport_set_clear_every_frame (Viewport* ogre_viewport, bool clear, unsigned int buffers)
{
    ogre_viewport->setClearEveryFrame(clear, buffers);
}

// name: "getClearEveryFrame"
// type: "bool"
// args: "void"
//
bool ogre_viewport_get_clear_every_frame (Viewport* ogre_viewport)
{
    return ogre_viewport->getClearEveryFrame();
}

// name: "getClearBuffers"
// type: "unsigned int"
// args: "void"
//
unsigned int ogre_viewport_get_clear_buffers (Viewport* ogre_viewport)
{
    return ogre_viewport->getClearBuffers();
}

// name: "setMaterialScheme"
// type: "void"
// args: (("const String&" . "schemeName"))
//
void ogre_viewport_set_material_scheme (Viewport* ogre_viewport, const char* schemeName)
{
    ogre_viewport->setMaterialScheme(schemeName);
}

// name: "getMaterialScheme"
// type: "const String&"
// args: "void"
//
const char* ogre_viewport_get_material_scheme (Viewport* ogre_viewport)
{
    return ogre_viewport->getMaterialScheme().c_str();
}

// name: "getActualDimensions"
// type: "void"
// args: (("int&" . "left") ("int&" . "top") ("int&" . "width") ("int&" . "height"))
//
void ogre_viewport_get_actual_dimensions (Viewport* ogre_viewport, int& left, int& top, int& width, int& height)
{
    ogre_viewport->getActualDimensions(left, top, width, height);
}

// name: "setOverlaysEnabled"
// type: "void"
// args: (("bool" . "enabled"))
//
void ogre_viewport_set_overlays_enabled (Viewport* ogre_viewport, bool enabled)
{
    ogre_viewport->setOverlaysEnabled(enabled);
}

// name: "getOverlaysEnabled"
// type: "bool"
// args: "void"
//
bool ogre_viewport_get_overlays_enabled (Viewport* ogre_viewport)
{
    return ogre_viewport->getOverlaysEnabled();
}

// name: "setSkiesEnabled"
// type: "void"
// args: (("bool" . "enabled"))
//
void ogre_viewport_set_skies_enabled (Viewport* ogre_viewport, bool enabled)
{
    ogre_viewport->setSkiesEnabled(enabled);
}

// name: "getSkiesEnabled"
// type: "bool"
// args: "void"
//
bool ogre_viewport_get_skies_enabled (Viewport* ogre_viewport)
{
    return ogre_viewport->getSkiesEnabled();
}

// name: "setShadowsEnabled"
// type: "void"
// args: (("bool" . "enabled"))
//
void ogre_viewport_set_shadows_enabled (Viewport* ogre_viewport, bool enabled)
{
    ogre_viewport->setShadowsEnabled(enabled);
}

// name: "getShadowsEnabled"
// type: "bool"
// args: "void"
//
bool ogre_viewport_get_shadows_enabled (Viewport* ogre_viewport)
{
    return ogre_viewport->getShadowsEnabled();
}

// name: "setVisibilityMask"
// type: "void"
// args: (("uint32" . "mask"))
//
void ogre_viewport_set_visibility_mask (Viewport* ogre_viewport, unsigned int mask)
{
    ogre_viewport->setVisibilityMask(mask);
}

// name: "getVisibilityMask"
// type: "uint"
// args: "void"
//
unsigned int ogre_viewport_get_visibility_mask (Viewport* ogre_viewport)
{
    return ogre_viewport->getVisibilityMask();
}

// name: "setRenderQueueInvocationSequenceName"
// type: "void"
// args: (("const String&" . "sequenceName"))
//
void ogre_viewport_set_render_queue_invocation_sequence_name (Viewport* ogre_viewport, const char* sequenceName)
{
    ogre_viewport->setRenderQueueInvocationSequenceName(sequenceName);
}

// name: "getRenderQueueInvocationSequenceName"
// type: "const String&"
// args: "void"
//
const char* ogre_viewport_get_render_queue_invocation_sequence_name (Viewport* ogre_viewport)
{
    return ogre_viewport->getRenderQueueInvocationSequenceName().c_str();
}


