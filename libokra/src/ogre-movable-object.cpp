// ogre-movable-object.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-10-29 09:55:21.

#include "handwritten/okra.h"


// Prototypes

extern "C"
{
    const char* ogre_movable_object_get_name (MovableObject*);
    const char* ogre_movable_object_get_movable_type (MovableObject*);
    Node* ogre_movable_object_get_parent_node (MovableObject*);
    SceneNode* ogre_movable_object_get_parent_scene_node (MovableObject*);
    bool ogre_movable_object_is_attached (MovableObject*);
    void ogre_movable_object_detatch_from_parent (MovableObject*);
    bool ogre_movable_object_is_in_scene (MovableObject*);
    const AxisAlignedBox& ogre_movable_object_get_bounding_box (MovableObject*);
    Real ogre_movable_object_get_bounding_radius (MovableObject*);
    const AxisAlignedBox& ogre_movable_object_get_world_bounding_box (MovableObject*, bool);
    const Sphere& ogre_movable_object_get_world_bounding_sphere (MovableObject*, bool);
    void ogre_movable_object_set_visible_bool (MovableObject*, bool);
    bool ogre_movable_object_get_visible (MovableObject*);
    bool ogre_movable_object_is_visible_void (MovableObject*);
    void ogre_movable_object_set_rendering_distance (MovableObject*, Real);
    Real ogre_movable_object_get_rendering_distance (MovableObject*);
    void ogre_movable_object_set_user_object (MovableObject*, UserDefinedObject*);
    UserDefinedObject* ogre_movable_object_get_user_object (MovableObject*);
    void ogre_movable_object_set_user_any (MovableObject*, const Any&);
    const Any& ogre_movable_object_get_user_any (MovableObject*);
    void ogre_movable_object_set_render_queue_group (MovableObject*, unsigned char);
    unsigned char ogre_movable_object_get_render_queue_group (MovableObject*);
    void ogre_movable_object_set_query_flags (MovableObject*, unsigned int);
    void ogre_movable_object_add_query_flags (MovableObject*, unsigned int);
    void ogre_movable_object_remove_query_flags (MovableObject*, unsigned long);
    unsigned int ogre_movable_object_get_query_flags (MovableObject*);
    void ogre_movable_object_set_visibility_flags (MovableObject*, unsigned int);
    void ogre_movable_object_add_visibility_flags (MovableObject*, unsigned int);
    void ogre_movable_object_remove_visibility_flags (MovableObject*, unsigned int);
    unsigned int ogre_movable_object_get_visibility_flags (MovableObject*);
    const LightList& ogre_movable_object_query_lights (MovableObject*);
    EdgeData* ogre_movable_object_get_edge_list_void (MovableObject*);
    bool ogre_movable_object_has_edge_list (MovableObject*);
    Entity::ShadowRenderableListIterator ogre_movable_object_get_shadow_volume_renderable_iterator (MovableObject*, ShadowTechnique, const Light*, HardwareIndexBufferSharedPtr*, bool, Real, unsigned long);
    const AxisAlignedBox& ogre_movable_object_get_light_cap_bounds (MovableObject*);
    const AxisAlignedBox& ogre_movable_object_get_dark_cap_bounds (MovableObject*, const Light&, Real);
    void ogre_movable_object_set_cast_shadows (MovableObject*, bool);
    bool ogre_movable_object_get_cast_shadows (MovableObject*);
    Real ogre_movable_object_get_point_extrusion_distance (MovableObject*, const Light*);
    unsigned int ogre_movable_object_get_type_flags (MovableObject*);
    void ogre_movable_object_visit_renderables (MovableObject*, Renderable::Visitor*, bool);
    void ogre_movable_object_set_debug_display_enabled_bool (MovableObject*, bool);
    bool ogre_movable_object_is_debug_display_enabled (MovableObject*);
}


// Functions

// name: "getName"
// type: "const String&"
// args: "void"
//
const char* ogre_movable_object_get_name (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getName().c_str();
}

// name: "getMovableType"
// type: "const String&"
// args: "void"
//
const char* ogre_movable_object_get_movable_type (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getMovableType().c_str();
}

// name: "getParentNode"
// type: "Node*"
// args: "void"
//
Node* ogre_movable_object_get_parent_node (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getParentNode();
}

// name: "getParentSceneNode"
// type: "SceneNode*"
// args: "void"
//
SceneNode* ogre_movable_object_get_parent_scene_node (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getParentSceneNode();
}

// name: "isAttached"
// type: "bool"
// args: "void"
//
bool ogre_movable_object_is_attached (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->isAttached();
}

// name: "detatchFromParent"
// type: "void"
// args: "void"
//
void ogre_movable_object_detatch_from_parent (MovableObject* ogre_movable_object)
{
    ogre_movable_object->detatchFromParent();
}

// name: "isInScene"
// type: "bool"
// args: "void"
//
bool ogre_movable_object_is_in_scene (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->isInScene();
}

// name: "getBoundingBox"
// type: "const AxisAlignedBox&"
// args: "void"
//
const AxisAlignedBox& ogre_movable_object_get_bounding_box (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getBoundingBox();
}

// name: "getBoundingRadius"
// type: "Real"
// args: "void"
//
Real ogre_movable_object_get_bounding_radius (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getBoundingRadius();
}

// name: "getWorldBoundingBox"
// type: "const AxisAlignedBox&"
// args: (("bool" . "derive"))
//
const AxisAlignedBox& ogre_movable_object_get_world_bounding_box (MovableObject* ogre_movable_object, bool derive)
{
    return ogre_movable_object->getWorldBoundingBox(derive);
}

// name: "getWorldBoundingSphere"
// type: "const Sphere&"
// args: (("bool" . "derive"))
//
const Sphere& ogre_movable_object_get_world_bounding_sphere (MovableObject* ogre_movable_object, bool derive)
{
    return ogre_movable_object->getWorldBoundingSphere(derive);
}

// name: "setVisible"
// type: "void"
// args: (("bool" . "visible"))
//
void ogre_movable_object_set_visible_bool (MovableObject* ogre_movable_object, bool visible)
{
    ogre_movable_object->setVisible(visible);
}

// name: "getVisible"
// type: "bool"
// args: "void"
//
bool ogre_movable_object_get_visible (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getVisible();
}

// name: "isVisible"
// type: "bool"
// args: "void"
//
bool ogre_movable_object_is_visible_void (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->isVisible();
}

// name: "setRenderingDistance"
// type: "void"
// args: (("Real" . "dist"))
//
void ogre_movable_object_set_rendering_distance (MovableObject* ogre_movable_object, Real dist)
{
    ogre_movable_object->setRenderingDistance(dist);
}

// name: "getRenderingDistance"
// type: "Real"
// args: "void"
//
Real ogre_movable_object_get_rendering_distance (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getRenderingDistance();
}

// name: "setUserObject"
// type: "void"
// args: (("UserDefinedObject*" . "obj"))
//
void ogre_movable_object_set_user_object (MovableObject* ogre_movable_object, UserDefinedObject* obj)
{
    ogre_movable_object->setUserObject(obj);
}

// name: "getUserObject"
// type: "UserDefinedObject*"
// args: "void"
//
UserDefinedObject* ogre_movable_object_get_user_object (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getUserObject();
}

// name: "setUserAny"
// type: "void"
// args: (("const Any&" . "anything"))
//
void ogre_movable_object_set_user_any (MovableObject* ogre_movable_object, const Any& anything)
{
    ogre_movable_object->setUserAny(anything);
}

// name: "getUserAny"
// type: "const Any&"
// args: "void"
//
const Any& ogre_movable_object_get_user_any (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getUserAny();
}

// name: "setRenderQueueGroup"
// type: "void"
// args: (("uint8" . "queueID"))
//
void ogre_movable_object_set_render_queue_group (MovableObject* ogre_movable_object, unsigned char queueID)
{
    ogre_movable_object->setRenderQueueGroup(queueID);
}

// name: "getRenderQueueGroup"
// type: "uint8"
// args: "void"
//
unsigned char ogre_movable_object_get_render_queue_group (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getRenderQueueGroup();
}

// name: "setQueryFlags"
// type: "void"
// args: (("uint32" . "flags"))
//
void ogre_movable_object_set_query_flags (MovableObject* ogre_movable_object, unsigned int flags)
{
    ogre_movable_object->setQueryFlags(flags);
}

// name: "addQueryFlags"
// type: "void"
// args: (("uint32" . "flags"))
//
void ogre_movable_object_add_query_flags (MovableObject* ogre_movable_object, unsigned int flags)
{
    ogre_movable_object->addQueryFlags(flags);
}

// name: "removeQueryFlags"
// type: "void"
// args: (("unsigned long" . "flags"))
//
void ogre_movable_object_remove_query_flags (MovableObject* ogre_movable_object, unsigned long flags)
{
    ogre_movable_object->removeQueryFlags(flags);
}

// name: "getQueryFlags"
// type: "uint32"
// args: "void"
//
unsigned int ogre_movable_object_get_query_flags (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getQueryFlags();
}

// name: "setVisibilityFlags"
// type: "void"
// args: (("uint32" . "flags"))
//
void ogre_movable_object_set_visibility_flags (MovableObject* ogre_movable_object, unsigned int flags)
{
    ogre_movable_object->setVisibilityFlags(flags);
}

// name: "addVisibilityFlags"
// type: "void"
// args: (("uint32" . "flags"))
//
void ogre_movable_object_add_visibility_flags (MovableObject* ogre_movable_object, unsigned int flags)
{
    ogre_movable_object->addVisibilityFlags(flags);
}

// name: "removeVisibilityFlags"
// type: "void"
// args: (("uint32" . "flags"))
//
void ogre_movable_object_remove_visibility_flags (MovableObject* ogre_movable_object, unsigned int flags)
{
    ogre_movable_object->removeVisibilityFlags(flags);
}

// name: "getVisibilityFlags"
// type: "uint32"
// args: "void"
//
unsigned int ogre_movable_object_get_visibility_flags (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getVisibilityFlags();
}

// name: "queryLights"
// type: "const LightList&"
// args: "void"
//
const LightList& ogre_movable_object_query_lights (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->queryLights();
}

// name: "getEdgeList"
// type: "EdgeData*"
// args: "void"
//
EdgeData* ogre_movable_object_get_edge_list_void (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getEdgeList();
}

// name: "hasEdgeList"
// type: "bool"
// args: "void"
//
bool ogre_movable_object_has_edge_list (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->hasEdgeList();
}

// name: "getShadowVolumeRenderableIterator"
// type: "ShadowRenderableListIterator"
// args: (("ShadowTechnique" . "shadowTechnique") ("const Light*" . "light") ("HardwareIndexBufferSharedPtr*" . "indexBuffer") ("bool" . "extrudeVertices") ("Real" . "extrusionDist") ("unsigned long" . "flags"))
//
Entity::ShadowRenderableListIterator ogre_movable_object_get_shadow_volume_renderable_iterator (MovableObject* ogre_movable_object, ShadowTechnique shadowTechnique, const Light* light, HardwareIndexBufferSharedPtr* indexBuffer, bool extrudeVertices, Real extrusionDist, unsigned long flags)
{
    return ogre_movable_object->getShadowVolumeRenderableIterator(shadowTechnique, light, indexBuffer, extrudeVertices, extrusionDist, flags);
}

// name: "getLightCapBounds"
// type: "const AxisAlignedBox&"
// args: "void"
//
const AxisAlignedBox& ogre_movable_object_get_light_cap_bounds (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getLightCapBounds();
}

// name: "getDarkCapBounds"
// type: "const AxisAlignedBox&"
// args: (("const Light&" . "light") ("Real" . "dirLightExtrusionDist"))
//
const AxisAlignedBox& ogre_movable_object_get_dark_cap_bounds (MovableObject* ogre_movable_object, const Light& light, Real dirLightExtrusionDist)
{
    return ogre_movable_object->getDarkCapBounds(light, dirLightExtrusionDist);
}

// name: "setCastShadows"
// type: "void"
// args: (("bool" . "enabled"))
//
void ogre_movable_object_set_cast_shadows (MovableObject* ogre_movable_object, bool enabled)
{
    ogre_movable_object->setCastShadows(enabled);
}

// name: "getCastShadows"
// type: "bool"
// args: "void"
//
bool ogre_movable_object_get_cast_shadows (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getCastShadows();
}

// name: "getPointExtrusionDistance"
// type: "Real"
// args: (("const Light*" . "l"))
//
Real ogre_movable_object_get_point_extrusion_distance (MovableObject* ogre_movable_object, const Light* l)
{
    return ogre_movable_object->getPointExtrusionDistance(l);
}

// name: "getTypeFlags"
// type: "uint32"
// args: "void"
//
unsigned int ogre_movable_object_get_type_flags (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->getTypeFlags();
}

// name: "visitRenderables"
// type: "void"
// args: (("Renderable::Visitor*" . "visitor") ("bool" . "debugRenderables"))
//
void ogre_movable_object_visit_renderables (MovableObject* ogre_movable_object, Renderable::Visitor* visitor, bool debugRenderables)
{
    ogre_movable_object->visitRenderables(visitor, debugRenderables);
}

// name: "setDebugDisplayEnabled"
// type: "void"
// args: (("bool" . "enabled"))
//
void ogre_movable_object_set_debug_display_enabled_bool (MovableObject* ogre_movable_object, bool enabled)
{
    ogre_movable_object->setDebugDisplayEnabled(enabled);
}

// name: "isDebugDisplayEnabled"
// type: "bool"
// args: "void"
//
bool ogre_movable_object_is_debug_display_enabled (MovableObject* ogre_movable_object)
{
    return ogre_movable_object->isDebugDisplayEnabled();
}


