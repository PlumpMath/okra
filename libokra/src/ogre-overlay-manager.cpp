// ogre-overlay-manager.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-06-19 15:01:31.

#include "Ogre.h"
#include "okra.h"

using namespace Ogre;


// Prototypes

extern "C"
{
    const StringVector& ogre_overlay_manager_get_script_patterns (OverlayManager*);
    void ogre_overlay_manager_parse_script (OverlayManager*, DataStreamPtr&, const char*);
    Real ogre_overlay_manager_get_loading_order (OverlayManager*);
    Overlay* ogre_overlay_manager_get_by_name (OverlayManager*, const char*);
    void ogre_overlay_manager_destroy_all (OverlayManager*);
    OverlayManager::OverlayMapIterator ogre_overlay_manager_get_overlay_iterator (OverlayManager*);
    bool ogre_overlay_manager_has_viewport_changed (OverlayManager*);
    int ogre_overlay_manager_get_viewport_height (OverlayManager*);
    int ogre_overlay_manager_get_viewport_width (OverlayManager*);
    Real ogre_overlay_manager_get_viewport_aspect_ratio (OverlayManager*);
    OverlayElement* ogre_overlay_manager_create_overlay_element (OverlayManager*, const char*, const char*, bool);
    OverlayElement* ogre_overlay_manager_get_overlay_element (OverlayManager*, const char*, bool);
    void ogre_overlay_manager_destroy_overlay_element (OverlayManager*, OverlayElement*, bool);
    void ogre_overlay_manager_destroy_all_overlay_elements (OverlayManager*, bool);
    void ogre_overlay_manager_add_overlay_element_factory (OverlayManager*, OverlayElementFactory*);
    OverlayElement* ogre_overlay_manager_create_overlay_element_from_template (OverlayManager*, const char*, const char*, const char*, bool);
    OverlayElement* ogre_overlay_manager_clone_overlay_element_from_template (OverlayManager*, const char*, const char*);
    OverlayElement* ogre_overlay_manager_create_overlay_element_from_factory (OverlayManager*, const char*, const char*);
    OverlayManager::TemplateIterator ogre_overlay_manager_get_template_iterator (OverlayManager*);
    bool ogre_overlay_manager_is_template (OverlayManager*, const char*);
}


// Functions

// name: "getScriptPatterns"
// type: "const StringVector&"
// args: "void"
//
const StringVector& ogre_overlay_manager_get_script_patterns (OverlayManager* ogre_overlay_manager)
{
    return ogre_overlay_manager->getScriptPatterns();
}

// name: "parseScript"
// type: "void"
// args: (("DataStreamPtr&" . "stream") ("const String&" . "groupName"))
//
void ogre_overlay_manager_parse_script (OverlayManager* ogre_overlay_manager, DataStreamPtr& stream, const char* groupName)
{
    ogre_overlay_manager->parseScript(stream, groupName);
}

// name: "getLoadingOrder"
// type: "Real"
// args: "void"
//
Real ogre_overlay_manager_get_loading_order (OverlayManager* ogre_overlay_manager)
{
    return ogre_overlay_manager->getLoadingOrder();
}

// name: "getByName"
// type: "Overlay*"
// args: (("const String&" . "name"))
//
Overlay* ogre_overlay_manager_get_by_name (OverlayManager* ogre_overlay_manager, const char* name)
{
    return ogre_overlay_manager->getByName(name);
}

// name: "destroyAll"
// type: "void"
// args: "void"
//
void ogre_overlay_manager_destroy_all (OverlayManager* ogre_overlay_manager)
{
    ogre_overlay_manager->destroyAll();
}

// name: "getOverlayIterator"
// type: "OverlayMapIterator"
// args: "void"
//
OverlayManager::OverlayMapIterator ogre_overlay_manager_get_overlay_iterator (OverlayManager* ogre_overlay_manager)
{
    return ogre_overlay_manager->getOverlayIterator();
}

// name: "hasViewportChanged"
// type: "bool"
// args: "void"
//
bool ogre_overlay_manager_has_viewport_changed (OverlayManager* ogre_overlay_manager)
{
    return ogre_overlay_manager->hasViewportChanged();
}

// name: "getViewportHeight"
// type: "int"
// args: "void"
//
int ogre_overlay_manager_get_viewport_height (OverlayManager* ogre_overlay_manager)
{
    return ogre_overlay_manager->getViewportHeight();
}

// name: "getViewportWidth"
// type: "int"
// args: "void"
//
int ogre_overlay_manager_get_viewport_width (OverlayManager* ogre_overlay_manager)
{
    return ogre_overlay_manager->getViewportWidth();
}

// name: "getViewportAspectRatio"
// type: "Real"
// args: "void"
//
Real ogre_overlay_manager_get_viewport_aspect_ratio (OverlayManager* ogre_overlay_manager)
{
    return ogre_overlay_manager->getViewportAspectRatio();
}

// name: "createOverlayElement"
// type: "OverlayElement*"
// args: (("const String&" . "typeName") ("const String&" . "instanceName") ("bool" . "isTemplate"))
//
OverlayElement* ogre_overlay_manager_create_overlay_element (OverlayManager* ogre_overlay_manager, const char* typeName, const char* instanceName, bool isTemplate)
{
    return ogre_overlay_manager->createOverlayElement(typeName, instanceName, isTemplate);
}

// name: "getOverlayElement"
// type: "OverlayElement*"
// args: (("const String&" . "name") ("bool" . "isTemplate"))
//
OverlayElement* ogre_overlay_manager_get_overlay_element (OverlayManager* ogre_overlay_manager, const char* name, bool isTemplate)
{
    return ogre_overlay_manager->getOverlayElement(name, isTemplate);
}

// name: "destroyOverlayElement"
// type: "void"
// args: (("OverlayElement*" . "pInstance") ("bool" . "isTemplate"))
//
void ogre_overlay_manager_destroy_overlay_element (OverlayManager* ogre_overlay_manager, OverlayElement* pInstance, bool isTemplate)
{
    ogre_overlay_manager->destroyOverlayElement(pInstance, isTemplate);
}

// name: "destroyAllOverlayElements"
// type: "void"
// args: (("bool" . "isTemplate"))
//
void ogre_overlay_manager_destroy_all_overlay_elements (OverlayManager* ogre_overlay_manager, bool isTemplate)
{
    ogre_overlay_manager->destroyAllOverlayElements(isTemplate);
}

// name: "addOverlayElementFactory"
// type: "void"
// args: (("OverlayElementFactory*" . "elemFactory"))
//
void ogre_overlay_manager_add_overlay_element_factory (OverlayManager* ogre_overlay_manager, OverlayElementFactory* elemFactory)
{
    ogre_overlay_manager->addOverlayElementFactory(elemFactory);
}

// name: "createOverlayElementFromTemplate"
// type: "OverlayElement*"
// args: (("const String&" . "templateName") ("const String&" . "typeName") ("const String&" . "instanceName") ("bool" . "isTemplate"))
//
OverlayElement* ogre_overlay_manager_create_overlay_element_from_template (OverlayManager* ogre_overlay_manager, const char* templateName, const char* typeName, const char* instanceName, bool isTemplate)
{
    return ogre_overlay_manager->createOverlayElementFromTemplate(templateName, typeName, instanceName, isTemplate);
}

// name: "cloneOverlayElementFromTemplate"
// type: "OverlayElement*"
// args: (("const String&" . "templateName") ("const String&" . "instanceName"))
//
OverlayElement* ogre_overlay_manager_clone_overlay_element_from_template (OverlayManager* ogre_overlay_manager, const char* templateName, const char* instanceName)
{
    return ogre_overlay_manager->cloneOverlayElementFromTemplate(templateName, instanceName);
}

// name: "createOverlayElementFromFactory"
// type: "OverlayElement*"
// args: (("const String&" . "typeName") ("const String&" . "instanceName"))
//
OverlayElement* ogre_overlay_manager_create_overlay_element_from_factory (OverlayManager* ogre_overlay_manager, const char* typeName, const char* instanceName)
{
    return ogre_overlay_manager->createOverlayElementFromFactory(typeName, instanceName);
}

// name: "getTemplateIterator"
// type: "TemplateIterator"
// args: NIL
//
OverlayManager::TemplateIterator ogre_overlay_manager_get_template_iterator (OverlayManager* ogre_overlay_manager)
{
    return ogre_overlay_manager->getTemplateIterator();
}

// name: "isTemplate"
// type: "bool"
// args: (("String" . "strName"))
//
bool ogre_overlay_manager_is_template (OverlayManager* ogre_overlay_manager, const char* strName)
{
    return ogre_overlay_manager->isTemplate(strName);
}


