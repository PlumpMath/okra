// ogre-animation-state.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-09-24 13:29:03.

#include "handwritten/okra.h"


// Prototypes

extern "C"
{
    const char* ogre_animation_state_get_animation_name (AnimationState*);
    Real ogre_animation_state_get_time_position (AnimationState*);
    void ogre_animation_state_set_time_position (AnimationState*, Real);
    Real ogre_animation_state_get_length (AnimationState*);
    void ogre_animation_state_set_length (AnimationState*, Real);
    Real ogre_animation_state_get_weight (AnimationState*);
    void ogre_animation_state_set_weight (AnimationState*, Real);
    void ogre_animation_state_add_time (AnimationState*, Real);
    bool ogre_animation_state_has_ended (AnimationState*);
    bool ogre_animation_state_get_enabled (AnimationState*);
    void ogre_animation_state_set_enabled (AnimationState*, bool);
    void ogre_animation_state_set_loop (AnimationState*, bool);
    bool ogre_animation_state_get_loop (AnimationState*);
    void ogre_animation_state_copy_state_from (AnimationState*, const AnimationState&);
    AnimationStateSet* ogre_animation_state_get_parent (AnimationState*);
    void ogre_animation_state_create_blend_mask (AnimationState*, size_t, float);
    void ogre_animation_state_destroy_blend_mask (AnimationState*);
    const AnimationState::BoneBlendMask* ogre_animation_state_get_blend_mask (AnimationState*);
    bool ogre_animation_state_has_blend_mask (AnimationState*);
    void ogre_animation_state_set_blend_mask_entry (AnimationState*, size_t, float);
    float ogre_animation_state_get_blend_mask_entry (AnimationState*, size_t);
}


// Functions

// name: "getAnimationName"
// type: "const String&"
// args: "void"
//
const char* ogre_animation_state_get_animation_name (AnimationState* ogre_animation_state)
{
    return ogre_animation_state->getAnimationName().c_str();
}

// name: "getTimePosition"
// type: "Real"
// args: "void"
//
Real ogre_animation_state_get_time_position (AnimationState* ogre_animation_state)
{
    return ogre_animation_state->getTimePosition();
}

// name: "setTimePosition"
// type: "void"
// args: (("Real" . "timePos"))
//
void ogre_animation_state_set_time_position (AnimationState* ogre_animation_state, Real timePos)
{
    ogre_animation_state->setTimePosition(timePos);
}

// name: "getLength"
// type: "Real"
// args: "void"
//
Real ogre_animation_state_get_length (AnimationState* ogre_animation_state)
{
    return ogre_animation_state->getLength();
}

// name: "setLength"
// type: "void"
// args: (("Real" . "len"))
//
void ogre_animation_state_set_length (AnimationState* ogre_animation_state, Real len)
{
    ogre_animation_state->setLength(len);
}

// name: "getWeight"
// type: "Real"
// args: "void"
//
Real ogre_animation_state_get_weight (AnimationState* ogre_animation_state)
{
    return ogre_animation_state->getWeight();
}

// name: "setWeight"
// type: "void"
// args: (("Real" . "weight"))
//
void ogre_animation_state_set_weight (AnimationState* ogre_animation_state, Real weight)
{
    ogre_animation_state->setWeight(weight);
}

// name: "addTime"
// type: "void"
// args: (("Real" . "offset"))
//
void ogre_animation_state_add_time (AnimationState* ogre_animation_state, Real offset)
{
    ogre_animation_state->addTime(offset);
}

// name: "hasEnded"
// type: "bool"
// args: "void"
//
bool ogre_animation_state_has_ended (AnimationState* ogre_animation_state)
{
    return ogre_animation_state->hasEnded();
}

// name: "getEnabled"
// type: "bool"
// args: "void"
//
bool ogre_animation_state_get_enabled (AnimationState* ogre_animation_state)
{
    return ogre_animation_state->getEnabled();
}

// name: "setEnabled"
// type: "void"
// args: (("bool" . "enabled"))
//
void ogre_animation_state_set_enabled (AnimationState* ogre_animation_state, bool enabled)
{
    ogre_animation_state->setEnabled(enabled);
}

// name: "setLoop"
// type: "void"
// args: (("bool" . "loop"))
//
void ogre_animation_state_set_loop (AnimationState* ogre_animation_state, bool loop)
{
    ogre_animation_state->setLoop(loop);
}

// name: "getLoop"
// type: "bool"
// args: "void"
//
bool ogre_animation_state_get_loop (AnimationState* ogre_animation_state)
{
    return ogre_animation_state->getLoop();
}

// name: "copyStateFrom"
// type: "void"
// args: (("const AnimationState&" . "animState"))
//
void ogre_animation_state_copy_state_from (AnimationState* ogre_animation_state, const AnimationState& animState)
{
    ogre_animation_state->copyStateFrom(animState);
}

// name: "getParent"
// type: "AnimationStateSet*"
// args: "void"
//
AnimationStateSet* ogre_animation_state_get_parent (AnimationState* ogre_animation_state)
{
    return ogre_animation_state->getParent();
}

// name: "createBlendMask"
// type: "void"
// args: (("size_t" . "blendMaskSizeHint") ("float" . "initialWeight"))
//
void ogre_animation_state_create_blend_mask (AnimationState* ogre_animation_state, size_t blendMaskSizeHint, float initialWeight)
{
    ogre_animation_state->createBlendMask(blendMaskSizeHint, initialWeight);
}

// name: "destroyBlendMask"
// type: "void"
// args: "void"
//
void ogre_animation_state_destroy_blend_mask (AnimationState* ogre_animation_state)
{
    ogre_animation_state->destroyBlendMask();
}

// name: "getBlendMask"
// type: "const BoneBlendMask*"
// args: "void"
//
const AnimationState::BoneBlendMask* ogre_animation_state_get_blend_mask (AnimationState* ogre_animation_state)
{
    return ogre_animation_state->getBlendMask();
}

// name: "hasBlendMask"
// type: "bool"
// args: "void"
//
bool ogre_animation_state_has_blend_mask (AnimationState* ogre_animation_state)
{
    return ogre_animation_state->hasBlendMask();
}

// name: "setBlendMaskEntry"
// type: "void"
// args: (("size_t" . "boneHandle") ("float" . "weight"))
//
void ogre_animation_state_set_blend_mask_entry (AnimationState* ogre_animation_state, size_t boneHandle, float weight)
{
    ogre_animation_state->setBlendMaskEntry(boneHandle, weight);
}

// name: "getBlendMaskEntry"
// type: "float"
// args: (("size_t" . "boneHandle"))
//
float ogre_animation_state_get_blend_mask_entry (AnimationState* ogre_animation_state, size_t boneHandle)
{
    return ogre_animation_state->getBlendMaskEntry(boneHandle);
}


