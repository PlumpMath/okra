// ogre-overlay-element.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-10-28 16:11:12.

#include "handwritten/okra.h"


// Prototypes

extern "C"
{
    void ogre_overlay_element_initialise_void (OverlayElement*);
    const char* ogre_overlay_element_get_name (OverlayElement*);
    void ogre_overlay_element_show (OverlayElement*);
    void ogre_overlay_element_hide (OverlayElement*);
    bool ogre_overlay_element_is_visible_void (OverlayElement*);
    bool ogre_overlay_element_is_enabled (OverlayElement*);
    void ogre_overlay_element_set_enabled (OverlayElement*, bool);
    void ogre_overlay_element_set_dimensions_real_real (OverlayElement*, Real, Real);
    void ogre_overlay_element_set_position_real_real (OverlayElement*, Real, Real);
    void ogre_overlay_element_set_width (OverlayElement*, Real);
    Real ogre_overlay_element_get_width (OverlayElement*);
    void ogre_overlay_element_set_height (OverlayElement*, Real);
    Real ogre_overlay_element_get_height (OverlayElement*);
    void ogre_overlay_element_set_left (OverlayElement*, Real);
    Real ogre_overlay_element_get_left (OverlayElement*);
    void ogre_overlay_element_set_top (OverlayElement*, Real);
    Real ogre_overlay_element_get_top (OverlayElement*);
    const char* ogre_overlay_element_get_material_name (OverlayElement*);
    void ogre_overlay_element_set_material_name_string (OverlayElement*, const char*);
    const MaterialPtr& ogre_overlay_element_get_material (OverlayElement*);
    void ogre_overlay_element_get_world_transforms (OverlayElement*, Matrix4*);
    void ogre_overlay_element_visit_renderables (OverlayElement*, Renderable::Visitor*, bool);
    const char* ogre_overlay_element_get_type_name (OverlayElement*);
    void ogre_overlay_element_set_caption (OverlayElement*, const char*);
    void ogre_overlay_element_set_colour (OverlayElement*, const okraArray4);
    void ogre_overlay_element_get_colour (OverlayElement*, okraArray4);
    void ogre_overlay_element_set_metrics_mode (OverlayElement*, GuiMetricsMode);
    GuiMetricsMode ogre_overlay_element_get_metrics_mode (OverlayElement*);
    void ogre_overlay_element_set_horizontal_alignment (OverlayElement*, GuiHorizontalAlignment);
    GuiHorizontalAlignment ogre_overlay_element_get_horizontal_alignment (OverlayElement*);
    void ogre_overlay_element_set_vertical_alignment (OverlayElement*, GuiVerticalAlignment);
    GuiVerticalAlignment ogre_overlay_element_get_vertical_alignment (OverlayElement*);
    bool ogre_overlay_element_contains (OverlayElement*, Real, Real);
    OverlayElement* ogre_overlay_element_find_element_at (OverlayElement*, Real, Real);
    bool ogre_overlay_element_is_container (OverlayElement*);
    bool ogre_overlay_element_is_key_enabled (OverlayElement*);
    bool ogre_overlay_element_is_cloneable (OverlayElement*);
    void ogre_overlay_element_set_cloneable (OverlayElement*, bool);
    OverlayContainer* ogre_overlay_element_get_parent (OverlayElement*);
    unsigned short ogre_overlay_element_get_zorder (OverlayElement*);
    Real ogre_overlay_element_get_squared_view_depth (OverlayElement*, const Camera*);
    const LightList& ogre_overlay_element_get_lights (OverlayElement*);
    void ogre_overlay_element_copy_from_template (OverlayElement*, OverlayElement*);
    OverlayElement* ogre_overlay_element_clone_string (OverlayElement*, const char*);
    const OverlayElement* ogre_overlay_element_get_source_template (OverlayElement*);
}


// Functions

// name: "initialise"
// type: "void"
// args: "void"
//
void ogre_overlay_element_initialise_void (OverlayElement* ogre_overlay_element)
{
    ogre_overlay_element->initialise();
}

// name: "getName"
// type: "const String&"
// args: "void"
//
const char* ogre_overlay_element_get_name (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getName().c_str();
}

// name: "show"
// type: "void"
// args: "void"
//
void ogre_overlay_element_show (OverlayElement* ogre_overlay_element)
{
    ogre_overlay_element->show();
}

// name: "hide"
// type: "void"
// args: "void"
//
void ogre_overlay_element_hide (OverlayElement* ogre_overlay_element)
{
    ogre_overlay_element->hide();
}

// name: "isVisible"
// type: "bool"
// args: "void"
//
bool ogre_overlay_element_is_visible_void (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->isVisible();
}

// name: "isEnabled"
// type: "bool"
// args: "void"
//
bool ogre_overlay_element_is_enabled (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->isEnabled();
}

// name: "setEnabled"
// type: "void"
// args: (("bool" . "b"))
//
void ogre_overlay_element_set_enabled (OverlayElement* ogre_overlay_element, bool b)
{
    ogre_overlay_element->setEnabled(b);
}

// name: "setDimensions"
// type: "void"
// args: (("Real" . "width") ("Real" . "height"))
//
void ogre_overlay_element_set_dimensions_real_real (OverlayElement* ogre_overlay_element, Real width, Real height)
{
    ogre_overlay_element->setDimensions(width, height);
}

// name: "setPosition"
// type: "void"
// args: (("Real" . "left") ("Real" . "top"))
//
void ogre_overlay_element_set_position_real_real (OverlayElement* ogre_overlay_element, Real left, Real top)
{
    ogre_overlay_element->setPosition(left, top);
}

// name: "setWidth"
// type: "void"
// args: (("Real" . "width"))
//
void ogre_overlay_element_set_width (OverlayElement* ogre_overlay_element, Real width)
{
    ogre_overlay_element->setWidth(width);
}

// name: "getWidth"
// type: "Real"
// args: "void"
//
Real ogre_overlay_element_get_width (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getWidth();
}

// name: "setHeight"
// type: "void"
// args: (("Real" . "height"))
//
void ogre_overlay_element_set_height (OverlayElement* ogre_overlay_element, Real height)
{
    ogre_overlay_element->setHeight(height);
}

// name: "getHeight"
// type: "Real"
// args: "void"
//
Real ogre_overlay_element_get_height (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getHeight();
}

// name: "setLeft"
// type: "void"
// args: (("Real" . "left"))
//
void ogre_overlay_element_set_left (OverlayElement* ogre_overlay_element, Real left)
{
    ogre_overlay_element->setLeft(left);
}

// name: "getLeft"
// type: "Real"
// args: "void"
//
Real ogre_overlay_element_get_left (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getLeft();
}

// name: "setTop"
// type: "void"
// args: (("Real" . "Top"))
//
void ogre_overlay_element_set_top (OverlayElement* ogre_overlay_element, Real Top)
{
    ogre_overlay_element->setTop(Top);
}

// name: "getTop"
// type: "Real"
// args: "void"
//
Real ogre_overlay_element_get_top (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getTop();
}

// name: "getMaterialName"
// type: "const String&"
// args: "void"
//
const char* ogre_overlay_element_get_material_name (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getMaterialName().c_str();
}

// name: "setMaterialName"
// type: "void"
// args: (("const String&" . "matName"))
//
void ogre_overlay_element_set_material_name_string (OverlayElement* ogre_overlay_element, const char* matName)
{
    ogre_overlay_element->setMaterialName(matName);
}

// name: "getMaterial"
// type: "const MaterialPtr&"
// args: "void"
//
const MaterialPtr& ogre_overlay_element_get_material (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getMaterial();
}

// name: "getWorldTransforms"
// type: "void"
// args: (("Matrix4*" . "xform"))
//
void ogre_overlay_element_get_world_transforms (OverlayElement* ogre_overlay_element, Matrix4* xform)
{
    ogre_overlay_element->getWorldTransforms(xform);
}

// name: "visitRenderables"
// type: "void"
// args: (("Renderable::Visitor*" . "visitor") ("bool" . "debugRenderables"))
//
void ogre_overlay_element_visit_renderables (OverlayElement* ogre_overlay_element, Renderable::Visitor* visitor, bool debugRenderables)
{
    ogre_overlay_element->visitRenderables(visitor, debugRenderables);
}

// name: "getTypeName"
// type: "const String&"
// args: "void"
//
const char* ogre_overlay_element_get_type_name (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getTypeName().c_str();
}

// name: "setCaption"
// type: "void"
// args: (("const DisplayString&" . "text"))
//
void ogre_overlay_element_set_caption (OverlayElement* ogre_overlay_element, const char* text)
{
    ogre_overlay_element->setCaption(text);
}

// name: "setColour"
// type: "void"
// args: (("const ColourValue&" . "col"))
//
void ogre_overlay_element_set_colour (OverlayElement* ogre_overlay_element, const okraArray4 col)
{
    ColourValue ogre_col = ColourValue(col[0], col[1], col[2], col[3]);
    ogre_overlay_element->setColour(ogre_col);
}

// name: "getColour"
// type: "const ColourValue&"
// args: "void"
//
void ogre_overlay_element_get_colour (OverlayElement* ogre_overlay_element, okraArray4 cv)
{
    ColourValue ogre_cv = ogre_overlay_element->getColour();
    cv[0] = ogre_cv.r;
    cv[1] = ogre_cv.g;
    cv[2] = ogre_cv.b;
    cv[3] = ogre_cv.a;
}

// name: "setMetricsMode"
// type: "void"
// args: (("GuiMetricsMode" . "gmm"))
//
void ogre_overlay_element_set_metrics_mode (OverlayElement* ogre_overlay_element, GuiMetricsMode gmm)
{
    ogre_overlay_element->setMetricsMode(gmm);
}

// name: "getMetricsMode"
// type: "GuiMetricsMode"
// args: "void"
//
GuiMetricsMode ogre_overlay_element_get_metrics_mode (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getMetricsMode();
}

// name: "setHorizontalAlignment"
// type: "void"
// args: (("GuiHorizontalAlignment" . "gha"))
//
void ogre_overlay_element_set_horizontal_alignment (OverlayElement* ogre_overlay_element, GuiHorizontalAlignment gha)
{
    ogre_overlay_element->setHorizontalAlignment(gha);
}

// name: "getHorizontalAlignment"
// type: "GuiHorizontalAlignment"
// args: "void"
//
GuiHorizontalAlignment ogre_overlay_element_get_horizontal_alignment (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getHorizontalAlignment();
}

// name: "setVerticalAlignment"
// type: "void"
// args: (("GuiVerticalAlignment" . "gva"))
//
void ogre_overlay_element_set_vertical_alignment (OverlayElement* ogre_overlay_element, GuiVerticalAlignment gva)
{
    ogre_overlay_element->setVerticalAlignment(gva);
}

// name: "getVerticalAlignment"
// type: "GuiVerticalAlignment"
// args: "void"
//
GuiVerticalAlignment ogre_overlay_element_get_vertical_alignment (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getVerticalAlignment();
}

// name: "contains"
// type: "bool"
// args: (("Real" . "x") ("Real" . "y"))
//
bool ogre_overlay_element_contains (OverlayElement* ogre_overlay_element, Real x, Real y)
{
    return ogre_overlay_element->contains(x, y);
}

// name: "findElementAt"
// type: "OverlayElement*"
// args: (("Real" . "x") ("Real" . "y"))
//
OverlayElement* ogre_overlay_element_find_element_at (OverlayElement* ogre_overlay_element, Real x, Real y)
{
    return ogre_overlay_element->findElementAt(x, y);
}

// name: "isContainer"
// type: "bool"
// args: "void"
//
bool ogre_overlay_element_is_container (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->isContainer();
}

// name: "isKeyEnabled"
// type: "bool"
// args: "void"
//
bool ogre_overlay_element_is_key_enabled (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->isKeyEnabled();
}

// name: "isCloneable"
// type: "bool"
// args: "void"
//
bool ogre_overlay_element_is_cloneable (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->isCloneable();
}

// name: "setCloneable"
// type: "void"
// args: (("bool" . "c"))
//
void ogre_overlay_element_set_cloneable (OverlayElement* ogre_overlay_element, bool c)
{
    ogre_overlay_element->setCloneable(c);
}

// name: "getParent"
// type: "OverlayContainer*"
// args: "void"
//
OverlayContainer* ogre_overlay_element_get_parent (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getParent();
}

// name: "getZOrder"
// type: "ushort"
// args: "void"
//
unsigned short ogre_overlay_element_get_zorder (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getZOrder();
}

// name: "getSquaredViewDepth"
// type: "Real"
// args: (("const Camera*" . "cam"))
//
Real ogre_overlay_element_get_squared_view_depth (OverlayElement* ogre_overlay_element, const Camera* cam)
{
    return ogre_overlay_element->getSquaredViewDepth(cam);
}

// name: "getLights"
// type: "const LightList&"
// args: "void"
//
const LightList& ogre_overlay_element_get_lights (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getLights();
}

// name: "copyFromTemplate"
// type: "void"
// args: (("OverlayElement*" . "templateOverlay"))
//
void ogre_overlay_element_copy_from_template (OverlayElement* ogre_overlay_element, OverlayElement* templateOverlay)
{
    ogre_overlay_element->copyFromTemplate(templateOverlay);
}

// name: "clone"
// type: "OverlayElement*"
// args: (("const String&" . "instanceName"))
//
OverlayElement* ogre_overlay_element_clone_string (OverlayElement* ogre_overlay_element, const char* instanceName)
{
    return ogre_overlay_element->clone(instanceName);
}

// name: "getSourceTemplate"
// type: "const OverlayElement*"
// args: "void"
//
const OverlayElement* ogre_overlay_element_get_source_template (OverlayElement* ogre_overlay_element)
{
    return ogre_overlay_element->getSourceTemplate();
}


