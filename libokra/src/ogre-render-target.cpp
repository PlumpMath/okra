// ogre-render-target.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-09-15 10:46:19.

#include "handwritten/okra.h"


// Prototypes

extern "C"
{
    const char* ogre_render_target_get_name (RenderTarget*);
    void ogre_render_target_get_metrics (RenderTarget*, unsigned int&, unsigned int&, unsigned int&);
    unsigned int ogre_render_target_get_width (RenderTarget*);
    unsigned int ogre_render_target_get_height (RenderTarget*);
    unsigned int ogre_render_target_get_colour_depth (RenderTarget*);
    void ogre_render_target_update_bool (RenderTarget*, bool);
    void ogre_render_target_swap_buffers (RenderTarget*, bool);
    Viewport* ogre_render_target_add_viewport (RenderTarget*, Camera*, int, float, float, float, float);
    unsigned short ogre_render_target_get_num_viewports (RenderTarget*);
    Viewport* ogre_render_target_get_viewport_unsignedshort (RenderTarget*, unsigned short);
    void ogre_render_target_remove_viewport (RenderTarget*, int);
    void ogre_render_target_remove_all_viewports (RenderTarget*);
    void ogre_render_target_get_statistics_float_float_float_float (RenderTarget*, float&, float&, float&, float&);
    const RenderTarget::FrameStats& ogre_render_target_get_statistics_void (RenderTarget*);
    float ogre_render_target_get_last_fps (RenderTarget*);
    float ogre_render_target_get_average_fps (RenderTarget*);
    float ogre_render_target_get_best_fps (RenderTarget*);
    float ogre_render_target_get_worst_fps (RenderTarget*);
    float ogre_render_target_get_best_frame_time (RenderTarget*);
    float ogre_render_target_get_worst_frame_time (RenderTarget*);
    void ogre_render_target_reset_statistics (RenderTarget*);
    void ogre_render_target_get_custom_attribute (RenderTarget*, const char*, void*);
    void ogre_render_target_add_listener (RenderTarget*, RenderTargetListener*);
    void ogre_render_target_remove_listener (RenderTarget*, RenderTargetListener*);
    void ogre_render_target_remove_all_listeners (RenderTarget*);
    void ogre_render_target_set_priority (RenderTarget*, unsigned char);
    unsigned char ogre_render_target_get_priority (RenderTarget*);
    bool ogre_render_target_is_active (RenderTarget*);
    void ogre_render_target_set_active (RenderTarget*, bool);
    void ogre_render_target_set_auto_updated (RenderTarget*, bool);
    bool ogre_render_target_is_auto_updated (RenderTarget*);
    PixelFormat ogre_render_target_suggest_pixel_format (RenderTarget*);
    void ogre_render_target_write_contents_to_file (RenderTarget*, const char*);
    const char* ogre_render_target_write_contents_to_timestamped_file (RenderTarget*, const char*, const char*);
    bool ogre_render_target_requires_texture_flipping (RenderTarget*);
    size_t ogre_render_target_get_triangle_count (RenderTarget*);
    size_t ogre_render_target_get_batch_count (RenderTarget*);
    bool ogre_render_target_is_primary (RenderTarget*);
    bool ogre_render_target_is_hardware_gamma_enabled (RenderTarget*);
    unsigned int ogre_render_target_get_fsaa (RenderTarget*);
}


// Functions

// name: "getName"
// type: "const String&"
// args: "void"
//
const char* ogre_render_target_get_name (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getName().c_str();
}

// name: "getMetrics"
// type: "void"
// args: (("unsigned int&" . "width") ("unsigned int&" . "height") ("unsigned int&" . "colourDepth"))
//
void ogre_render_target_get_metrics (RenderTarget* ogre_render_target, unsigned int& width, unsigned int& height, unsigned int& colourDepth)
{
    ogre_render_target->getMetrics(width, height, colourDepth);
}

// name: "getWidth"
// type: "unsigned int"
// args: "void"
//
unsigned int ogre_render_target_get_width (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getWidth();
}

// name: "getHeight"
// type: "unsigned int"
// args: "void"
//
unsigned int ogre_render_target_get_height (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getHeight();
}

// name: "getColourDepth"
// type: "unsigned int"
// args: "void"
//
unsigned int ogre_render_target_get_colour_depth (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getColourDepth();
}

// name: "update"
// type: "void"
// args: (("bool" . "swapBuffers"))
//
void ogre_render_target_update_bool (RenderTarget* ogre_render_target, bool swapBuffers)
{
    ogre_render_target->update(swapBuffers);
}

// name: "swapBuffers"
// type: "void"
// args: (("bool" . "waitForVSync"))
//
void ogre_render_target_swap_buffers (RenderTarget* ogre_render_target, bool waitForVSync)
{
    ogre_render_target->swapBuffers(waitForVSync);
}

// name: "addViewport"
// type: "Viewport*"
// args: (("Camera*" . "cam") ("int" . "ZOrder") ("float" . "left") ("float" . "top") ("float" . "width") ("float" . "height"))
//
Viewport* ogre_render_target_add_viewport (RenderTarget* ogre_render_target, Camera* cam, int ZOrder, float left, float top, float width, float height)
{
    return ogre_render_target->addViewport(cam, ZOrder, left, top, width, height);
}

// name: "getNumViewports"
// type: "unsigned short"
// args: "void"
//
unsigned short ogre_render_target_get_num_viewports (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getNumViewports();
}

// name: "getViewport"
// type: "Viewport*"
// args: (("unsigned short" . "index"))
//
Viewport* ogre_render_target_get_viewport_unsignedshort (RenderTarget* ogre_render_target, unsigned short index)
{
    return ogre_render_target->getViewport(index);
}

// name: "removeViewport"
// type: "void"
// args: (("int" . "ZOrder"))
//
void ogre_render_target_remove_viewport (RenderTarget* ogre_render_target, int ZOrder)
{
    ogre_render_target->removeViewport(ZOrder);
}

// name: "removeAllViewports"
// type: "void"
// args: "void"
//
void ogre_render_target_remove_all_viewports (RenderTarget* ogre_render_target)
{
    ogre_render_target->removeAllViewports();
}

// name: "getStatistics"
// type: "void"
// args: (("float&" . "lastFPS") ("float&" . "avgFPS") ("float&" . "bestFPS") ("float&" . "worstFPS"))
//
void ogre_render_target_get_statistics_float_float_float_float (RenderTarget* ogre_render_target, float& lastFPS, float& avgFPS, float& bestFPS, float& worstFPS)
{
    ogre_render_target->getStatistics(lastFPS, avgFPS, bestFPS, worstFPS);
}

// name: "getStatistics"
// type: "const FrameStats&"
// args: "void"
//
const RenderTarget::FrameStats& ogre_render_target_get_statistics_void (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getStatistics();
}

// name: "getLastFPS"
// type: "float"
// args: "void"
//
float ogre_render_target_get_last_fps (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getLastFPS();
}

// name: "getAverageFPS"
// type: "float"
// args: "void"
//
float ogre_render_target_get_average_fps (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getAverageFPS();
}

// name: "getBestFPS"
// type: "float"
// args: "void"
//
float ogre_render_target_get_best_fps (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getBestFPS();
}

// name: "getWorstFPS"
// type: "float"
// args: "void"
//
float ogre_render_target_get_worst_fps (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getWorstFPS();
}

// name: "getBestFrameTime"
// type: "float"
// args: "void"
//
float ogre_render_target_get_best_frame_time (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getBestFrameTime();
}

// name: "getWorstFrameTime"
// type: "float"
// args: "void"
//
float ogre_render_target_get_worst_frame_time (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getWorstFrameTime();
}

// name: "resetStatistics"
// type: "void"
// args: "void"
//
void ogre_render_target_reset_statistics (RenderTarget* ogre_render_target)
{
    ogre_render_target->resetStatistics();
}

// name: "getCustomAttribute"
// type: "void"
// args: (("const String&" . "name") ("void*" . "pData"))
//
void ogre_render_target_get_custom_attribute (RenderTarget* ogre_render_target, const char* name, void* pData)
{
    ogre_render_target->getCustomAttribute(name, pData);
}

// name: "addListener"
// type: "void"
// args: (("RenderTargetListener*" . "listener"))
//
void ogre_render_target_add_listener (RenderTarget* ogre_render_target, RenderTargetListener* listener)
{
    ogre_render_target->addListener(listener);
}

// name: "removeListener"
// type: "void"
// args: (("RenderTargetListener*" . "listener"))
//
void ogre_render_target_remove_listener (RenderTarget* ogre_render_target, RenderTargetListener* listener)
{
    ogre_render_target->removeListener(listener);
}

// name: "removeAllListeners"
// type: "void"
// args: "void"
//
void ogre_render_target_remove_all_listeners (RenderTarget* ogre_render_target)
{
    ogre_render_target->removeAllListeners();
}

// name: "setPriority"
// type: "void"
// args: (("uchar" . "priority"))
//
void ogre_render_target_set_priority (RenderTarget* ogre_render_target, unsigned char priority)
{
    ogre_render_target->setPriority(priority);
}

// name: "getPriority"
// type: "uchar"
// args: "void"
//
unsigned char ogre_render_target_get_priority (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getPriority();
}

// name: "isActive"
// type: "bool"
// args: "void"
//
bool ogre_render_target_is_active (RenderTarget* ogre_render_target)
{
    return ogre_render_target->isActive();
}

// name: "setActive"
// type: "void"
// args: (("bool" . "state"))
//
void ogre_render_target_set_active (RenderTarget* ogre_render_target, bool state)
{
    ogre_render_target->setActive(state);
}

// name: "setAutoUpdated"
// type: "void"
// args: (("bool" . "autoupdate"))
//
void ogre_render_target_set_auto_updated (RenderTarget* ogre_render_target, bool autoupdate)
{
    ogre_render_target->setAutoUpdated(autoupdate);
}

// name: "isAutoUpdated"
// type: "bool"
// args: "void"
//
bool ogre_render_target_is_auto_updated (RenderTarget* ogre_render_target)
{
    return ogre_render_target->isAutoUpdated();
}

// name: "suggestPixelFormat"
// type: "PixelFormat"
// args: "void"
//
PixelFormat ogre_render_target_suggest_pixel_format (RenderTarget* ogre_render_target)
{
    return ogre_render_target->suggestPixelFormat();
}

// name: "writeContentsToFile"
// type: "void"
// args: (("const String&" . "filename"))
//
void ogre_render_target_write_contents_to_file (RenderTarget* ogre_render_target, const char* filename)
{
    ogre_render_target->writeContentsToFile(filename);
}

// name: "writeContentsToTimestampedFile"
// type: "String"
// args: (("const String&" . "filenamePrefix") ("const String&" . "filenameSuffix"))
//
const char* ogre_render_target_write_contents_to_timestamped_file (RenderTarget* ogre_render_target, const char* filenamePrefix, const char* filenameSuffix)
{
    return ogre_render_target->writeContentsToTimestampedFile(filenamePrefix, filenameSuffix).c_str();
}

// name: "requiresTextureFlipping"
// type: "bool"
// args: "void"
//
bool ogre_render_target_requires_texture_flipping (RenderTarget* ogre_render_target)
{
    return ogre_render_target->requiresTextureFlipping();
}

// name: "getTriangleCount"
// type: "size_t"
// args: "void"
//
size_t ogre_render_target_get_triangle_count (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getTriangleCount();
}

// name: "getBatchCount"
// type: "size_t"
// args: "void"
//
size_t ogre_render_target_get_batch_count (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getBatchCount();
}

// name: "isPrimary"
// type: "bool"
// args: "void"
//
bool ogre_render_target_is_primary (RenderTarget* ogre_render_target)
{
    return ogre_render_target->isPrimary();
}

// name: "isHardwareGammaEnabled"
// type: "bool"
// args: "void"
//
bool ogre_render_target_is_hardware_gamma_enabled (RenderTarget* ogre_render_target)
{
    return ogre_render_target->isHardwareGammaEnabled();
}

// name: "getFSAA"
// type: "uint"
// args: "void"
//
unsigned int ogre_render_target_get_fsaa (RenderTarget* ogre_render_target)
{
    return ogre_render_target->getFSAA();
}


