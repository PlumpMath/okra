// ogre-resource-group-manager.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-09-15 10:46:19.

#include "handwritten/okra.h"


// Prototypes

extern "C"
{
    void ogre_resource_group_manager_create_resource_group (ResourceGroupManager*, const char*);
    void ogre_resource_group_manager_initialise_resource_group (ResourceGroupManager*, const char*);
    void ogre_resource_group_manager_initialise_all_resource_groups (ResourceGroupManager*);
    void ogre_resource_group_manager_prepare_resource_group (ResourceGroupManager*, const char*, bool, bool);
    void ogre_resource_group_manager_load_resource_group (ResourceGroupManager*, const char*, bool, bool);
    void ogre_resource_group_manager_unload_resource_group (ResourceGroupManager*, const char*, bool);
    void ogre_resource_group_manager_unload_unreferenced_resources_in_group (ResourceGroupManager*, const char*, bool);
    void ogre_resource_group_manager_clear_resource_group (ResourceGroupManager*, const char*);
    void ogre_resource_group_manager_destroy_resource_group (ResourceGroupManager*, const char*);
    bool ogre_resource_group_manager_is_resource_group_initialised (ResourceGroupManager*, const char*);
    bool ogre_resource_group_manager_is_resource_group_loaded (ResourceGroupManager*, const char*);
    void ogre_resource_group_manager_add_resource_location (ResourceGroupManager*, const char*, const char*, const char*, bool);
    void ogre_resource_group_manager_remove_resource_location (ResourceGroupManager*, const char*, const char*);
    void ogre_resource_group_manager_declare_resource_string_string_string_namevaluepairlist (ResourceGroupManager*, const char*, const char*, const char*, const NameValuePairList&);
    void ogre_resource_group_manager_declare_resource_string_string_string_manualresourceloader_namevaluepairlist (ResourceGroupManager*, const char*, const char*, const char*, ManualResourceLoader*, const NameValuePairList&);
    void ogre_resource_group_manager_undeclare_resource (ResourceGroupManager*, const char*, const char*);
    DataStreamPtr ogre_resource_group_manager_open_resource (ResourceGroupManager*, const char*, const char*, bool, Resource*);
    DataStreamListPtr ogre_resource_group_manager_open_resources (ResourceGroupManager*, const char*, const char*);
    StringVectorPtr ogre_resource_group_manager_list_resource_names (ResourceGroupManager*, const char*, bool);
    FileInfoListPtr ogre_resource_group_manager_list_resource_file_info (ResourceGroupManager*, const char*, bool);
    StringVectorPtr ogre_resource_group_manager_find_resource_names (ResourceGroupManager*, const char*, const char*, bool);
    bool ogre_resource_group_manager_resource_exists (ResourceGroupManager*, const char*, const char*);
    const char* ogre_resource_group_manager_find_group_containing_resource (ResourceGroupManager*, const char*);
    FileInfoListPtr ogre_resource_group_manager_find_resource_file_info (ResourceGroupManager*, const char*, const char*, bool);
    time_t ogre_resource_group_manager_resource_modified_time (ResourceGroupManager*, const char*, const char*);
    void ogre_resource_group_manager_add_resource_group_listener (ResourceGroupManager*, ResourceGroupListener*);
    void ogre_resource_group_manager_remove_resource_group_listener (ResourceGroupManager*, ResourceGroupListener*);
    void ogre_resource_group_manager_set_world_resource_group_name (ResourceGroupManager*, const char*);
    const char* ogre_resource_group_manager_get_world_resource_group_name (ResourceGroupManager*);
    void ogre_resource_group_manager_link_world_geometry_to_resource_group (ResourceGroupManager*, const char*, const char*, SceneManager*);
    void ogre_resource_group_manager_unlink_world_geometry_from_resource_group (ResourceGroupManager*, const char*);
    void ogre_resource_group_manager_shutdown_all (ResourceGroupManager*);
    ResourceGroupManager::ResourceManagerIterator ogre_resource_group_manager_get_resource_manager_iterator (ResourceGroupManager*);
    StringVector ogre_resource_group_manager_get_resource_groups (ResourceGroupManager*);
    ResourceGroupManager::ResourceDeclarationList ogre_resource_group_manager_get_resource_declaration_list (ResourceGroupManager*, const char*);
    void ogre_resource_group_manager_set_loading_listener (ResourceGroupManager*, ResourceLoadingListener*);
    ResourceLoadingListener* ogre_resource_group_manager_get_loading_listener (ResourceGroupManager*);
}


// Functions

// name: "createResourceGroup"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_resource_group_manager_create_resource_group (ResourceGroupManager* ogre_resource_group_manager, const char* name)
{
    ogre_resource_group_manager->createResourceGroup(name);
}

// name: "initialiseResourceGroup"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_resource_group_manager_initialise_resource_group (ResourceGroupManager* ogre_resource_group_manager, const char* name)
{
    ogre_resource_group_manager->initialiseResourceGroup(name);
}

// name: "initialiseAllResourceGroups"
// type: "void"
// args: "void"
//
void ogre_resource_group_manager_initialise_all_resource_groups (ResourceGroupManager* ogre_resource_group_manager)
{
    ogre_resource_group_manager->initialiseAllResourceGroups();
}

// name: "prepareResourceGroup"
// type: "void"
// args: (("const String&" . "name") ("bool" . "prepareMainResources") ("bool" . "prepareWorldGeom"))
//
void ogre_resource_group_manager_prepare_resource_group (ResourceGroupManager* ogre_resource_group_manager, const char* name, bool prepareMainResources, bool prepareWorldGeom)
{
    ogre_resource_group_manager->prepareResourceGroup(name, prepareMainResources, prepareWorldGeom);
}

// name: "loadResourceGroup"
// type: "void"
// args: (("const String&" . "name") ("bool" . "loadMainResources") ("bool" . "loadWorldGeom"))
//
void ogre_resource_group_manager_load_resource_group (ResourceGroupManager* ogre_resource_group_manager, const char* name, bool loadMainResources, bool loadWorldGeom)
{
    ogre_resource_group_manager->loadResourceGroup(name, loadMainResources, loadWorldGeom);
}

// name: "unloadResourceGroup"
// type: "void"
// args: (("const String&" . "name") ("bool" . "reloadableOnly"))
//
void ogre_resource_group_manager_unload_resource_group (ResourceGroupManager* ogre_resource_group_manager, const char* name, bool reloadableOnly)
{
    ogre_resource_group_manager->unloadResourceGroup(name, reloadableOnly);
}

// name: "unloadUnreferencedResourcesInGroup"
// type: "void"
// args: (("const String&" . "name") ("bool" . "reloadableOnly"))
//
void ogre_resource_group_manager_unload_unreferenced_resources_in_group (ResourceGroupManager* ogre_resource_group_manager, const char* name, bool reloadableOnly)
{
    ogre_resource_group_manager->unloadUnreferencedResourcesInGroup(name, reloadableOnly);
}

// name: "clearResourceGroup"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_resource_group_manager_clear_resource_group (ResourceGroupManager* ogre_resource_group_manager, const char* name)
{
    ogre_resource_group_manager->clearResourceGroup(name);
}

// name: "destroyResourceGroup"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_resource_group_manager_destroy_resource_group (ResourceGroupManager* ogre_resource_group_manager, const char* name)
{
    ogre_resource_group_manager->destroyResourceGroup(name);
}

// name: "isResourceGroupInitialised"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_resource_group_manager_is_resource_group_initialised (ResourceGroupManager* ogre_resource_group_manager, const char* name)
{
    return ogre_resource_group_manager->isResourceGroupInitialised(name);
}

// name: "isResourceGroupLoaded"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_resource_group_manager_is_resource_group_loaded (ResourceGroupManager* ogre_resource_group_manager, const char* name)
{
    return ogre_resource_group_manager->isResourceGroupLoaded(name);
}

// name: "addResourceLocation"
// type: "void"
// args: (("const String&" . "name") ("const String&" . "locType") ("const String&" . "resGroup") ("bool" . "recursive"))
//
void ogre_resource_group_manager_add_resource_location (ResourceGroupManager* ogre_resource_group_manager, const char* name, const char* locType, const char* resGroup, bool recursive)
{
    ogre_resource_group_manager->addResourceLocation(name, locType, resGroup, recursive);
}

// name: "removeResourceLocation"
// type: "void"
// args: (("const String&" . "name") ("const String&" . "resGroup"))
//
void ogre_resource_group_manager_remove_resource_location (ResourceGroupManager* ogre_resource_group_manager, const char* name, const char* resGroup)
{
    ogre_resource_group_manager->removeResourceLocation(name, resGroup);
}

// name: "declareResource"
// type: "void"
// args: (("const String&" . "name") ("const String&" . "resourceType") ("const String&" . "groupName") ("const NameValuePairList&" . "loadParameters"))
//
void ogre_resource_group_manager_declare_resource_string_string_string_namevaluepairlist (ResourceGroupManager* ogre_resource_group_manager, const char* name, const char* resourceType, const char* groupName, const NameValuePairList& loadParameters)
{
    ogre_resource_group_manager->declareResource(name, resourceType, groupName, loadParameters);
}

// name: "declareResource"
// type: "void"
// args: (("const String&" . "name") ("const String&" . "resourceType") ("const String&" . "groupName") ("ManualResourceLoader*" . "loader") ("const NameValuePairList&" . "loadParameters"))
//
void ogre_resource_group_manager_declare_resource_string_string_string_manualresourceloader_namevaluepairlist (ResourceGroupManager* ogre_resource_group_manager, const char* name, const char* resourceType, const char* groupName, ManualResourceLoader* loader, const NameValuePairList& loadParameters)
{
    ogre_resource_group_manager->declareResource(name, resourceType, groupName, loader, loadParameters);
}

// name: "undeclareResource"
// type: "void"
// args: (("const String&" . "name") ("const String&" . "groupName"))
//
void ogre_resource_group_manager_undeclare_resource (ResourceGroupManager* ogre_resource_group_manager, const char* name, const char* groupName)
{
    ogre_resource_group_manager->undeclareResource(name, groupName);
}

// name: "openResource"
// type: "DataStreamPtr"
// args: (("const String&" . "resourceName") ("const String&" . "groupName") ("bool" . "searchGroupsIfNotFound") ("Resource*" . "resourceBeingLoaded"))
//
DataStreamPtr ogre_resource_group_manager_open_resource (ResourceGroupManager* ogre_resource_group_manager, const char* resourceName, const char* groupName, bool searchGroupsIfNotFound, Resource* resourceBeingLoaded)
{
    return ogre_resource_group_manager->openResource(resourceName, groupName, searchGroupsIfNotFound, resourceBeingLoaded);
}

// name: "openResources"
// type: "DataStreamListPtr"
// args: (("const String&" . "pattern") ("const String&" . "groupName"))
//
DataStreamListPtr ogre_resource_group_manager_open_resources (ResourceGroupManager* ogre_resource_group_manager, const char* pattern, const char* groupName)
{
    return ogre_resource_group_manager->openResources(pattern, groupName);
}

// name: "listResourceNames"
// type: "StringVectorPtr"
// args: (("const String&" . "groupName") ("bool" . "dirs"))
//
StringVectorPtr ogre_resource_group_manager_list_resource_names (ResourceGroupManager* ogre_resource_group_manager, const char* groupName, bool dirs)
{
    return ogre_resource_group_manager->listResourceNames(groupName, dirs);
}

// name: "listResourceFileInfo"
// type: "FileInfoListPtr"
// args: (("const String&" . "groupName") ("bool" . "dirs"))
//
FileInfoListPtr ogre_resource_group_manager_list_resource_file_info (ResourceGroupManager* ogre_resource_group_manager, const char* groupName, bool dirs)
{
    return ogre_resource_group_manager->listResourceFileInfo(groupName, dirs);
}

// name: "findResourceNames"
// type: "StringVectorPtr"
// args: (("const String&" . "groupName") ("const String&" . "pattern") ("bool" . "dirs"))
//
StringVectorPtr ogre_resource_group_manager_find_resource_names (ResourceGroupManager* ogre_resource_group_manager, const char* groupName, const char* pattern, bool dirs)
{
    return ogre_resource_group_manager->findResourceNames(groupName, pattern, dirs);
}

// name: "resourceExists"
// type: "bool"
// args: (("const String&" . "group") ("const String&" . "filename"))
//
bool ogre_resource_group_manager_resource_exists (ResourceGroupManager* ogre_resource_group_manager, const char* group, const char* filename)
{
    return ogre_resource_group_manager->resourceExists(group, filename);
}

// name: "findGroupContainingResource"
// type: "const String&"
// args: (("const String&" . "filename"))
//
const char* ogre_resource_group_manager_find_group_containing_resource (ResourceGroupManager* ogre_resource_group_manager, const char* filename)
{
    return ogre_resource_group_manager->findGroupContainingResource(filename).c_str();
}

// name: "findResourceFileInfo"
// type: "FileInfoListPtr"
// args: (("const String&" . "group") ("const String&" . "pattern") ("bool" . "dirs"))
//
FileInfoListPtr ogre_resource_group_manager_find_resource_file_info (ResourceGroupManager* ogre_resource_group_manager, const char* group, const char* pattern, bool dirs)
{
    return ogre_resource_group_manager->findResourceFileInfo(group, pattern, dirs);
}

// name: "resourceModifiedTime"
// type: "time_t"
// args: (("const String&" . "group") ("const String&" . "filename"))
//
time_t ogre_resource_group_manager_resource_modified_time (ResourceGroupManager* ogre_resource_group_manager, const char* group, const char* filename)
{
    return ogre_resource_group_manager->resourceModifiedTime(group, filename);
}

// name: "addResourceGroupListener"
// type: "void"
// args: (("ResourceGroupListener*" . "l"))
//
void ogre_resource_group_manager_add_resource_group_listener (ResourceGroupManager* ogre_resource_group_manager, ResourceGroupListener* l)
{
    ogre_resource_group_manager->addResourceGroupListener(l);
}

// name: "removeResourceGroupListener"
// type: "void"
// args: (("ResourceGroupListener*" . "l"))
//
void ogre_resource_group_manager_remove_resource_group_listener (ResourceGroupManager* ogre_resource_group_manager, ResourceGroupListener* l)
{
    ogre_resource_group_manager->removeResourceGroupListener(l);
}

// name: "setWorldResourceGroupName"
// type: "void"
// args: (("const String&" . "groupName"))
//
void ogre_resource_group_manager_set_world_resource_group_name (ResourceGroupManager* ogre_resource_group_manager, const char* groupName)
{
    ogre_resource_group_manager->setWorldResourceGroupName(groupName);
}

// name: "getWorldResourceGroupName"
// type: "const String&"
// args: "void"
//
const char* ogre_resource_group_manager_get_world_resource_group_name (ResourceGroupManager* ogre_resource_group_manager)
{
    return ogre_resource_group_manager->getWorldResourceGroupName().c_str();
}

// name: "linkWorldGeometryToResourceGroup"
// type: "void"
// args: (("const String&" . "group") ("const String&" . "worldGeometry") ("SceneManager*" . "sceneManager"))
//
void ogre_resource_group_manager_link_world_geometry_to_resource_group (ResourceGroupManager* ogre_resource_group_manager, const char* group, const char* worldGeometry, SceneManager* sceneManager)
{
    ogre_resource_group_manager->linkWorldGeometryToResourceGroup(group, worldGeometry, sceneManager);
}

// name: "unlinkWorldGeometryFromResourceGroup"
// type: "void"
// args: (("const String&" . "group"))
//
void ogre_resource_group_manager_unlink_world_geometry_from_resource_group (ResourceGroupManager* ogre_resource_group_manager, const char* group)
{
    ogre_resource_group_manager->unlinkWorldGeometryFromResourceGroup(group);
}

// name: "shutdownAll"
// type: "void"
// args: "void"
//
void ogre_resource_group_manager_shutdown_all (ResourceGroupManager* ogre_resource_group_manager)
{
    ogre_resource_group_manager->shutdownAll();
}

// name: "getResourceManagerIterator"
// type: "ResourceManagerIterator"
// args: "void"
//
ResourceGroupManager::ResourceManagerIterator ogre_resource_group_manager_get_resource_manager_iterator (ResourceGroupManager* ogre_resource_group_manager)
{
    return ogre_resource_group_manager->getResourceManagerIterator();
}

// name: "getResourceGroups"
// type: "StringVector"
// args: "void"
//
StringVector ogre_resource_group_manager_get_resource_groups (ResourceGroupManager* ogre_resource_group_manager)
{
    return ogre_resource_group_manager->getResourceGroups();
}

// name: "getResourceDeclarationList"
// type: "ResourceDeclarationList"
// args: (("const String&" . "groupName"))
//
ResourceGroupManager::ResourceDeclarationList ogre_resource_group_manager_get_resource_declaration_list (ResourceGroupManager* ogre_resource_group_manager, const char* groupName)
{
    return ogre_resource_group_manager->getResourceDeclarationList(groupName);
}

// name: "setLoadingListener"
// type: "void"
// args: (("ResourceLoadingListener*" . "listener"))
//
void ogre_resource_group_manager_set_loading_listener (ResourceGroupManager* ogre_resource_group_manager, ResourceLoadingListener* listener)
{
    ogre_resource_group_manager->setLoadingListener(listener);
}

// name: "getLoadingListener"
// type: "ResourceLoadingListener*"
// args: "void"
//
ResourceLoadingListener* ogre_resource_group_manager_get_loading_listener (ResourceGroupManager* ogre_resource_group_manager)
{
    return ogre_resource_group_manager->getLoadingListener();
}


