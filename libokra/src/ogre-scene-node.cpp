// ogre-scene-node.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-06-19 15:01:31.

#include "Ogre.h"
#include "okra.h"

using namespace Ogre;


// Prototypes

extern "C"
{
    void ogre_scene_node_attach_object (SceneNode*, MovableObject*);
    unsigned short ogre_scene_node_num_attached_objects (SceneNode*);
    MovableObject* ogre_scene_node_get_attached_object (SceneNode*, const char*);
    MovableObject* ogre_scene_node_detach_object (SceneNode*, const char*);
    void ogre_scene_node_detach_all_objects (SceneNode*);
    bool ogre_scene_node_is_in_scene_graph (SceneNode*);
    SceneNode::ObjectIterator ogre_scene_node_get_attached_object_iterator (SceneNode*);
    SceneManager* ogre_scene_node_get_creator (SceneNode*);
    void ogre_scene_node_remove_and_destroy_child (SceneNode*, const char*);
    void ogre_scene_node_remove_and_destroy_all_children (SceneNode*);
    void ogre_scene_node_show_bounding_box (SceneNode*, bool);
    bool ogre_scene_node_get_show_bounding_box (SceneNode*);
    SceneNode* ogre_scene_node_create_child_scene_node (SceneNode*, const char*, const okraArray3, const okraArray4);
    void ogre_scene_node_find_lights (SceneNode*, LightList&, Real);
    void ogre_scene_node_set_fixed_yaw_axis (SceneNode*, bool, const okraArray3);
    SceneNode* ogre_scene_node_get_auto_track_target (SceneNode*);
    void ogre_scene_node_get_auto_track_offset (SceneNode*, okraArray3);
    void ogre_scene_node_get_auto_track_local_direction (SceneNode*, okraArray3);
    SceneNode* ogre_scene_node_get_parent_scene_node (SceneNode*);
    void ogre_scene_node_flip_visibility (SceneNode*, bool);
}


// Functions

// name: "attachObject"
// type: "void"
// args: (("MovableObject*" . "obj"))
//
void ogre_scene_node_attach_object (SceneNode* ogre_scene_node, MovableObject* obj)
{
    ogre_scene_node->attachObject(obj);
}

// name: "numAttachedObjects"
// type: "unsigned short"
// args: "void"
//
unsigned short ogre_scene_node_num_attached_objects (SceneNode* ogre_scene_node)
{
    return ogre_scene_node->numAttachedObjects();
}

// name: "getAttachedObject"
// type: "MovableObject*"
// args: (("const String&" . "name"))
//
MovableObject* ogre_scene_node_get_attached_object (SceneNode* ogre_scene_node, const char* name)
{
    return ogre_scene_node->getAttachedObject(name);
}

// name: "detachObject"
// type: "MovableObject*"
// args: (("const String&" . "name"))
//
MovableObject* ogre_scene_node_detach_object (SceneNode* ogre_scene_node, const char* name)
{
    return ogre_scene_node->detachObject(name);
}

// name: "detachAllObjects"
// type: "void"
// args: "void"
//
void ogre_scene_node_detach_all_objects (SceneNode* ogre_scene_node)
{
    ogre_scene_node->detachAllObjects();
}

// name: "isInSceneGraph"
// type: "bool"
// args: "void"
//
bool ogre_scene_node_is_in_scene_graph (SceneNode* ogre_scene_node)
{
    return ogre_scene_node->isInSceneGraph();
}

// name: "getAttachedObjectIterator"
// type: "ObjectIterator"
// args: "void"
//
SceneNode::ObjectIterator ogre_scene_node_get_attached_object_iterator (SceneNode* ogre_scene_node)
{
    return ogre_scene_node->getAttachedObjectIterator();
}

// name: "getCreator"
// type: "SceneManager*"
// args: "void"
//
SceneManager* ogre_scene_node_get_creator (SceneNode* ogre_scene_node)
{
    return ogre_scene_node->getCreator();
}

// name: "removeAndDestroyChild"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_node_remove_and_destroy_child (SceneNode* ogre_scene_node, const char* name)
{
    ogre_scene_node->removeAndDestroyChild(name);
}

// name: "removeAndDestroyAllChildren"
// type: "void"
// args: "void"
//
void ogre_scene_node_remove_and_destroy_all_children (SceneNode* ogre_scene_node)
{
    ogre_scene_node->removeAndDestroyAllChildren();
}

// name: "showBoundingBox"
// type: "void"
// args: (("bool" . "bShow"))
//
void ogre_scene_node_show_bounding_box (SceneNode* ogre_scene_node, bool bShow)
{
    ogre_scene_node->showBoundingBox(bShow);
}

// name: "getShowBoundingBox"
// type: "bool"
// args: NIL
//
bool ogre_scene_node_get_show_bounding_box (SceneNode* ogre_scene_node)
{
    return ogre_scene_node->getShowBoundingBox();
}

// name: "createChildSceneNode"
// type: "SceneNode*"
// args: (("const String&" . "name") ("const Vector3&" . "translate") ("const Quaternion&" . "rotate"))
//
SceneNode* ogre_scene_node_create_child_scene_node (SceneNode* ogre_scene_node, const char* name, const okraArray3 translate, const okraArray4 rotate)
{
    Vector3 ogre_translate = Vector3(translate[0], translate[1], translate[2]);Quaternion ogre_rotate = Quaternion(rotate[0], rotate[1], rotate[2], rotate[3]);
    return ogre_scene_node->createChildSceneNode(name, ogre_translate, ogre_rotate);
}

// name: "findLights"
// type: "void"
// args: (("LightList&" . "destList") ("Real" . "radius"))
//
void ogre_scene_node_find_lights (SceneNode* ogre_scene_node, LightList& destList, Real radius)
{
    ogre_scene_node->findLights(destList, radius);
}

// name: "setFixedYawAxis"
// type: "void"
// args: (("bool" . "useFixed") ("const Vector3&" . "fixedAxis"))
//
void ogre_scene_node_set_fixed_yaw_axis (SceneNode* ogre_scene_node, bool useFixed, const okraArray3 fixedAxis)
{
    Vector3 ogre_fixedAxis = Vector3(fixedAxis[0], fixedAxis[1], fixedAxis[2]);
    ogre_scene_node->setFixedYawAxis(useFixed, ogre_fixedAxis);
}

// name: "getAutoTrackTarget"
// type: "SceneNode*"
// args: "void"
//
SceneNode* ogre_scene_node_get_auto_track_target (SceneNode* ogre_scene_node)
{
    return ogre_scene_node->getAutoTrackTarget();
}

// name: "getAutoTrackOffset"
// type: "const Vector3&"
// args: "void"
//
void ogre_scene_node_get_auto_track_offset (SceneNode* ogre_scene_node, okraArray3 v)
{
    Vector3 ogre_v = ogre_scene_node->getAutoTrackOffset();
    v[0] = ogre_v[0];
    v[1] = ogre_v[1];
    v[2] = ogre_v[2];
}

// name: "getAutoTrackLocalDirection"
// type: "const Vector3&"
// args: "void"
//
void ogre_scene_node_get_auto_track_local_direction (SceneNode* ogre_scene_node, okraArray3 v)
{
    Vector3 ogre_v = ogre_scene_node->getAutoTrackLocalDirection();
    v[0] = ogre_v[0];
    v[1] = ogre_v[1];
    v[2] = ogre_v[2];
}

// name: "getParentSceneNode"
// type: "SceneNode*"
// args: "void"
//
SceneNode* ogre_scene_node_get_parent_scene_node (SceneNode* ogre_scene_node)
{
    return ogre_scene_node->getParentSceneNode();
}

// name: "flipVisibility"
// type: "void"
// args: (("bool" . "cascade"))
//
void ogre_scene_node_flip_visibility (SceneNode* ogre_scene_node, bool cascade)
{
    ogre_scene_node->flipVisibility(cascade);
}


