// ogre-overlay.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-08-07 15:52:09.

#include "handwritten/okra.h"


// Prototypes

extern "C"
{
    OverlayContainer* ogre_overlay_get_child_string (Overlay*, const char*);
    const char* ogre_overlay_get_name (Overlay*);
    void ogre_overlay_set_zorder (Overlay*, unsigned short);
    unsigned short ogre_overlay_get_zorder (Overlay*);
    bool ogre_overlay_is_visible_void (Overlay*);
    bool ogre_overlay_is_initialised (Overlay*);
    void ogre_overlay_show (Overlay*);
    void ogre_overlay_hide (Overlay*);
    void ogre_overlay_add2_d (Overlay*, OverlayContainer*);
    void ogre_overlay_remove2_d (Overlay*, OverlayContainer*);
    void ogre_overlay_add3_d (Overlay*, SceneNode*);
    void ogre_overlay_remove3_d (Overlay*, SceneNode*);
    void ogre_overlay_clear (Overlay*);
    void ogre_overlay_set_scroll (Overlay*, Real, Real);
    Real ogre_overlay_get_scroll_x (Overlay*);
    Real ogre_overlay_get_scroll_y (Overlay*);
    void ogre_overlay_scroll (Overlay*, Real, Real);
    void ogre_overlay_set_rotate (Overlay*, Real);
    okraReal ogre_overlay_get_rotate (Overlay*);
    void ogre_overlay_rotate_radian (Overlay*, Real);
    void ogre_overlay_set_scale_real_real (Overlay*, Real, Real);
    Real ogre_overlay_get_scale_x (Overlay*);
    Real ogre_overlay_get_scale_y (Overlay*);
    OverlayElement* ogre_overlay_find_element_at (Overlay*, Real, Real);
    Overlay::Overlay2DElementsIterator ogre_overlay_get2_delements_iterator (Overlay*);
    const char* ogre_overlay_get_origin (Overlay*);
}


// Functions

// name: "getChild"
// type: "OverlayContainer*"
// args: (("const String&" . "name"))
//
OverlayContainer* ogre_overlay_get_child_string (Overlay* ogre_overlay, const char* name)
{
    return ogre_overlay->getChild(name);
}

// name: "getName"
// type: "const String&"
// args: "void"
//
const char* ogre_overlay_get_name (Overlay* ogre_overlay)
{
    return ogre_overlay->getName().c_str();
}

// name: "setZOrder"
// type: "void"
// args: (("ushort" . "zorder"))
//
void ogre_overlay_set_zorder (Overlay* ogre_overlay, unsigned short zorder)
{
    ogre_overlay->setZOrder(zorder);
}

// name: "getZOrder"
// type: "ushort"
// args: "void"
//
unsigned short ogre_overlay_get_zorder (Overlay* ogre_overlay)
{
    return ogre_overlay->getZOrder();
}

// name: "isVisible"
// type: "bool"
// args: "void"
//
bool ogre_overlay_is_visible_void (Overlay* ogre_overlay)
{
    return ogre_overlay->isVisible();
}

// name: "isInitialised"
// type: "bool"
// args: "void"
//
bool ogre_overlay_is_initialised (Overlay* ogre_overlay)
{
    return ogre_overlay->isInitialised();
}

// name: "show"
// type: "void"
// args: "void"
//
void ogre_overlay_show (Overlay* ogre_overlay)
{
    ogre_overlay->show();
}

// name: "hide"
// type: "void"
// args: "void"
//
void ogre_overlay_hide (Overlay* ogre_overlay)
{
    ogre_overlay->hide();
}

// name: "add2D"
// type: "void"
// args: (("OverlayContainer*" . "cont"))
//
void ogre_overlay_add2_d (Overlay* ogre_overlay, OverlayContainer* cont)
{
    ogre_overlay->add2D(cont);
}

// name: "remove2D"
// type: "void"
// args: (("OverlayContainer*" . "cont"))
//
void ogre_overlay_remove2_d (Overlay* ogre_overlay, OverlayContainer* cont)
{
    ogre_overlay->remove2D(cont);
}

// name: "add3D"
// type: "void"
// args: (("SceneNode*" . "node"))
//
void ogre_overlay_add3_d (Overlay* ogre_overlay, SceneNode* node)
{
    ogre_overlay->add3D(node);
}

// name: "remove3D"
// type: "void"
// args: (("SceneNode*" . "node"))
//
void ogre_overlay_remove3_d (Overlay* ogre_overlay, SceneNode* node)
{
    ogre_overlay->remove3D(node);
}

// name: "clear"
// type: "void"
// args: "void"
//
void ogre_overlay_clear (Overlay* ogre_overlay)
{
    ogre_overlay->clear();
}

// name: "setScroll"
// type: "void"
// args: (("Real" . "x") ("Real" . "y"))
//
void ogre_overlay_set_scroll (Overlay* ogre_overlay, Real x, Real y)
{
    ogre_overlay->setScroll(x, y);
}

// name: "getScrollX"
// type: "Real"
// args: "void"
//
Real ogre_overlay_get_scroll_x (Overlay* ogre_overlay)
{
    return ogre_overlay->getScrollX();
}

// name: "getScrollY"
// type: "Real"
// args: "void"
//
Real ogre_overlay_get_scroll_y (Overlay* ogre_overlay)
{
    return ogre_overlay->getScrollY();
}

// name: "scroll"
// type: "void"
// args: (("Real" . "xoff") ("Real" . "yoff"))
//
void ogre_overlay_scroll (Overlay* ogre_overlay, Real xoff, Real yoff)
{
    ogre_overlay->scroll(xoff, yoff);
}

// name: "setRotate"
// type: "void"
// args: (("const Radian&" . "angle"))
//
void ogre_overlay_set_rotate (Overlay* ogre_overlay, Real angle)
{
    Radian ogre_angle = Radian(angle);
    ogre_overlay->setRotate(ogre_angle);
}

// name: "getRotate"
// type: "const Radian&"
// args: "void"
//
okraReal ogre_overlay_get_rotate (Overlay* ogre_overlay)
{
    Radian ogre_r = ogre_overlay->getRotate();
    return ogre_r.valueRadians();
}

// name: "rotate"
// type: "void"
// args: (("const Radian&" . "angle"))
//
void ogre_overlay_rotate_radian (Overlay* ogre_overlay, Real angle)
{
    Radian ogre_angle = Radian(angle);
    ogre_overlay->rotate(ogre_angle);
}

// name: "setScale"
// type: "void"
// args: (("Real" . "x") ("Real" . "y"))
//
void ogre_overlay_set_scale_real_real (Overlay* ogre_overlay, Real x, Real y)
{
    ogre_overlay->setScale(x, y);
}

// name: "getScaleX"
// type: "Real"
// args: "void"
//
Real ogre_overlay_get_scale_x (Overlay* ogre_overlay)
{
    return ogre_overlay->getScaleX();
}

// name: "getScaleY"
// type: "Real"
// args: "void"
//
Real ogre_overlay_get_scale_y (Overlay* ogre_overlay)
{
    return ogre_overlay->getScaleY();
}

// name: "findElementAt"
// type: "OverlayElement*"
// args: (("Real" . "x") ("Real" . "y"))
//
OverlayElement* ogre_overlay_find_element_at (Overlay* ogre_overlay, Real x, Real y)
{
    return ogre_overlay->findElementAt(x, y);
}

// name: "get2DElementsIterator"
// type: "Overlay2DElementsIterator"
// args: "void"
//
Overlay::Overlay2DElementsIterator ogre_overlay_get2_delements_iterator (Overlay* ogre_overlay)
{
    return ogre_overlay->get2DElementsIterator();
}

// name: "getOrigin"
// type: "const String&"
// args: "void"
//
const char* ogre_overlay_get_origin (Overlay* ogre_overlay)
{
    return ogre_overlay->getOrigin().c_str();
}


