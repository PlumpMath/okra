// ogre-frustum.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-08-07 15:52:09.

#include "handwritten/okra.h"


// Prototypes

extern "C"
{
    void ogre_frustum_set_fovy (Frustum*, Real);
    okraReal ogre_frustum_get_fovy (Frustum*);
    void ogre_frustum_set_near_clip_distance (Frustum*, Real);
    Real ogre_frustum_get_near_clip_distance (Frustum*);
    void ogre_frustum_set_far_clip_distance (Frustum*, Real);
    Real ogre_frustum_get_far_clip_distance (Frustum*);
    void ogre_frustum_set_aspect_ratio (Frustum*, Real);
    Real ogre_frustum_get_aspect_ratio (Frustum*);
    void ogre_frustum_set_frustum_offset_vector2 (Frustum*, const Vector2&);
    void ogre_frustum_set_frustum_offset_real_real (Frustum*, Real, Real);
    const Vector2& ogre_frustum_get_frustum_offset (Frustum*);
    void ogre_frustum_set_focal_length (Frustum*, Real);
    Real ogre_frustum_get_focal_length (Frustum*);
    void ogre_frustum_set_frustum_extents (Frustum*, Real, Real, Real, Real);
    void ogre_frustum_reset_frustum_extents (Frustum*);
    void ogre_frustum_get_frustum_extents (Frustum*, Real&, Real&, Real&, Real&);
    void ogre_frustum_get_projection_matrix_rs (Frustum*, okraArray16);
    void ogre_frustum_get_projection_matrix_with_rsdepth (Frustum*, okraArray16);
    void ogre_frustum_get_projection_matrix (Frustum*, okraArray16);
    void ogre_frustum_get_view_matrix_void (Frustum*, okraArray16);
    void ogre_frustum_calc_view_matrix_relative (Frustum*, const okraArray3, Matrix4&);
    void ogre_frustum_set_custom_view_matrix (Frustum*, bool, const okraArray16);
    bool ogre_frustum_is_custom_view_matrix_enabled (Frustum*);
    void ogre_frustum_set_custom_projection_matrix (Frustum*, bool, const okraArray16);
    bool ogre_frustum_is_custom_projection_matrix_enabled (Frustum*);
    const Plane* ogre_frustum_get_frustum_planes (Frustum*);
    const Plane& ogre_frustum_get_frustum_plane (Frustum*, unsigned short);
    bool ogre_frustum_is_visible_axisalignedbox_frustumplane (Frustum*, const okraArray6, FrustumPlane*);
    bool ogre_frustum_is_visible_sphere_frustumplane (Frustum*, const okraArray4, FrustumPlane*);
    bool ogre_frustum_is_visible_vector3_frustumplane (Frustum*, const okraArray3, FrustumPlane*);
    unsigned int ogre_frustum_get_type_flags (Frustum*);
    const AxisAlignedBox& ogre_frustum_get_bounding_box (Frustum*);
    Real ogre_frustum_get_bounding_radius (Frustum*);
    const char* ogre_frustum_get_movable_type (Frustum*);
    const MaterialPtr& ogre_frustum_get_material (Frustum*);
    void ogre_frustum_get_render_operation (Frustum*, RenderOperation&);
    void ogre_frustum_get_world_transforms (Frustum*, Matrix4*);
    Real ogre_frustum_get_squared_view_depth (Frustum*, const Camera*);
    const LightList& ogre_frustum_get_lights (Frustum*);
    const Vector3* ogre_frustum_get_world_space_corners (Frustum*);
    void ogre_frustum_set_projection_type (Frustum*, ProjectionType);
    ProjectionType ogre_frustum_get_projection_type (Frustum*);
    void ogre_frustum_set_ortho_window (Frustum*, Real, Real);
    void ogre_frustum_set_ortho_window_height (Frustum*, Real);
    void ogre_frustum_set_ortho_window_width (Frustum*, Real);
    Real ogre_frustum_get_ortho_window_height (Frustum*);
    Real ogre_frustum_get_ortho_window_width (Frustum*);
    void ogre_frustum_enable_reflection (Frustum*, const MovablePlane*);
    void ogre_frustum_disable_reflection (Frustum*);
    bool ogre_frustum_is_reflected (Frustum*);
    void ogre_frustum_get_reflection_matrix (Frustum*, okraArray16);
    const Plane& ogre_frustum_get_reflection_plane (Frustum*);
    void ogre_frustum_enable_custom_near_clip_plane (Frustum*, const MovablePlane*);
    void ogre_frustum_disable_custom_near_clip_plane (Frustum*);
    bool ogre_frustum_is_custom_near_clip_plane_enabled (Frustum*);
    void ogre_frustum_visit_renderables (Frustum*, Renderable::Visitor*, bool);
    void ogre_frustum_get_position_for_view_update (Frustum*, okraArray3);
    void ogre_frustum_get_orientation_for_view_update (Frustum*, okraArray4);
}


// Functions

// name: "setFOVy"
// type: "void"
// args: (("const Radian&" . "fovy"))
//
void ogre_frustum_set_fovy (Frustum* ogre_frustum, Real fovy)
{
    Radian ogre_fovy = Radian(fovy);
    ogre_frustum->setFOVy(ogre_fovy);
}

// name: "getFOVy"
// type: "const Radian&"
// args: "void"
//
okraReal ogre_frustum_get_fovy (Frustum* ogre_frustum)
{
    Radian ogre_r = ogre_frustum->getFOVy();
    return ogre_r.valueRadians();
}

// name: "setNearClipDistance"
// type: "void"
// args: (("Real" . "nearDist"))
//
void ogre_frustum_set_near_clip_distance (Frustum* ogre_frustum, Real nearDist)
{
    ogre_frustum->setNearClipDistance(nearDist);
}

// name: "getNearClipDistance"
// type: "Real"
// args: "void"
//
Real ogre_frustum_get_near_clip_distance (Frustum* ogre_frustum)
{
    return ogre_frustum->getNearClipDistance();
}

// name: "setFarClipDistance"
// type: "void"
// args: (("Real" . "farDist"))
//
void ogre_frustum_set_far_clip_distance (Frustum* ogre_frustum, Real farDist)
{
    ogre_frustum->setFarClipDistance(farDist);
}

// name: "getFarClipDistance"
// type: "Real"
// args: "void"
//
Real ogre_frustum_get_far_clip_distance (Frustum* ogre_frustum)
{
    return ogre_frustum->getFarClipDistance();
}

// name: "setAspectRatio"
// type: "void"
// args: (("Real" . "ratio"))
//
void ogre_frustum_set_aspect_ratio (Frustum* ogre_frustum, Real ratio)
{
    ogre_frustum->setAspectRatio(ratio);
}

// name: "getAspectRatio"
// type: "Real"
// args: "void"
//
Real ogre_frustum_get_aspect_ratio (Frustum* ogre_frustum)
{
    return ogre_frustum->getAspectRatio();
}

// name: "setFrustumOffset"
// type: "void"
// args: (("const Vector2&" . "offset"))
//
void ogre_frustum_set_frustum_offset_vector2 (Frustum* ogre_frustum, const Vector2& offset)
{
    ogre_frustum->setFrustumOffset(offset);
}

// name: "setFrustumOffset"
// type: "void"
// args: (("Real" . "horizontal") ("Real" . "vertical"))
//
void ogre_frustum_set_frustum_offset_real_real (Frustum* ogre_frustum, Real horizontal, Real vertical)
{
    ogre_frustum->setFrustumOffset(horizontal, vertical);
}

// name: "getFrustumOffset"
// type: "const Vector2&"
// args: "void"
//
const Vector2& ogre_frustum_get_frustum_offset (Frustum* ogre_frustum)
{
    return ogre_frustum->getFrustumOffset();
}

// name: "setFocalLength"
// type: "void"
// args: (("Real" . "focalLength"))
//
void ogre_frustum_set_focal_length (Frustum* ogre_frustum, Real focalLength)
{
    ogre_frustum->setFocalLength(focalLength);
}

// name: "getFocalLength"
// type: "Real"
// args: "void"
//
Real ogre_frustum_get_focal_length (Frustum* ogre_frustum)
{
    return ogre_frustum->getFocalLength();
}

// name: "setFrustumExtents"
// type: "void"
// args: (("Real" . "left") ("Real" . "right") ("Real" . "top") ("Real" . "bottom"))
//
void ogre_frustum_set_frustum_extents (Frustum* ogre_frustum, Real left, Real right, Real top, Real bottom)
{
    ogre_frustum->setFrustumExtents(left, right, top, bottom);
}

// name: "resetFrustumExtents"
// type: "void"
// args: "void"
//
void ogre_frustum_reset_frustum_extents (Frustum* ogre_frustum)
{
    ogre_frustum->resetFrustumExtents();
}

// name: "getFrustumExtents"
// type: "void"
// args: (("Real&" . "outleft") ("Real&" . "outright") ("Real&" . "outtop") ("Real&" . "outbottom"))
//
void ogre_frustum_get_frustum_extents (Frustum* ogre_frustum, Real& outleft, Real& outright, Real& outtop, Real& outbottom)
{
    ogre_frustum->getFrustumExtents(outleft, outright, outtop, outbottom);
}

// name: "getProjectionMatrixRS"
// type: "const Matrix4&"
// args: "void"
//
void ogre_frustum_get_projection_matrix_rs (Frustum* ogre_frustum, okraArray16 m4)
{
    Matrix4 ogre_m4 = ogre_frustum->getProjectionMatrixRS();
    m4[ 0] = *(ogre_m4[ 0]);  m4[ 1] = *(ogre_m4[ 1]);
    m4[ 2] = *(ogre_m4[ 2]);  m4[ 3] = *(ogre_m4[ 3]);
    m4[ 4] = *(ogre_m4[ 4]);  m4[ 5] = *(ogre_m4[ 5]);
    m4[ 6] = *(ogre_m4[ 6]);  m4[ 7] = *(ogre_m4[ 7]);
    m4[ 8] = *(ogre_m4[ 8]);  m4[ 9] = *(ogre_m4[ 9]);
    m4[10] = *(ogre_m4[10]);  m4[11] = *(ogre_m4[11]);
    m4[12] = *(ogre_m4[12]);  m4[13] = *(ogre_m4[13]);
    m4[14] = *(ogre_m4[14]);  m4[15] = *(ogre_m4[15]);
}

// name: "getProjectionMatrixWithRSDepth"
// type: "const Matrix4&"
// args: "void"
//
void ogre_frustum_get_projection_matrix_with_rsdepth (Frustum* ogre_frustum, okraArray16 m4)
{
    Matrix4 ogre_m4 = ogre_frustum->getProjectionMatrixWithRSDepth();
    m4[ 0] = *(ogre_m4[ 0]);  m4[ 1] = *(ogre_m4[ 1]);
    m4[ 2] = *(ogre_m4[ 2]);  m4[ 3] = *(ogre_m4[ 3]);
    m4[ 4] = *(ogre_m4[ 4]);  m4[ 5] = *(ogre_m4[ 5]);
    m4[ 6] = *(ogre_m4[ 6]);  m4[ 7] = *(ogre_m4[ 7]);
    m4[ 8] = *(ogre_m4[ 8]);  m4[ 9] = *(ogre_m4[ 9]);
    m4[10] = *(ogre_m4[10]);  m4[11] = *(ogre_m4[11]);
    m4[12] = *(ogre_m4[12]);  m4[13] = *(ogre_m4[13]);
    m4[14] = *(ogre_m4[14]);  m4[15] = *(ogre_m4[15]);
}

// name: "getProjectionMatrix"
// type: "const Matrix4&"
// args: "void"
//
void ogre_frustum_get_projection_matrix (Frustum* ogre_frustum, okraArray16 m4)
{
    Matrix4 ogre_m4 = ogre_frustum->getProjectionMatrix();
    m4[ 0] = *(ogre_m4[ 0]);  m4[ 1] = *(ogre_m4[ 1]);
    m4[ 2] = *(ogre_m4[ 2]);  m4[ 3] = *(ogre_m4[ 3]);
    m4[ 4] = *(ogre_m4[ 4]);  m4[ 5] = *(ogre_m4[ 5]);
    m4[ 6] = *(ogre_m4[ 6]);  m4[ 7] = *(ogre_m4[ 7]);
    m4[ 8] = *(ogre_m4[ 8]);  m4[ 9] = *(ogre_m4[ 9]);
    m4[10] = *(ogre_m4[10]);  m4[11] = *(ogre_m4[11]);
    m4[12] = *(ogre_m4[12]);  m4[13] = *(ogre_m4[13]);
    m4[14] = *(ogre_m4[14]);  m4[15] = *(ogre_m4[15]);
}

// name: "getViewMatrix"
// type: "const Matrix4&"
// args: "void"
//
void ogre_frustum_get_view_matrix_void (Frustum* ogre_frustum, okraArray16 m4)
{
    Matrix4 ogre_m4 = ogre_frustum->getViewMatrix();
    m4[ 0] = *(ogre_m4[ 0]);  m4[ 1] = *(ogre_m4[ 1]);
    m4[ 2] = *(ogre_m4[ 2]);  m4[ 3] = *(ogre_m4[ 3]);
    m4[ 4] = *(ogre_m4[ 4]);  m4[ 5] = *(ogre_m4[ 5]);
    m4[ 6] = *(ogre_m4[ 6]);  m4[ 7] = *(ogre_m4[ 7]);
    m4[ 8] = *(ogre_m4[ 8]);  m4[ 9] = *(ogre_m4[ 9]);
    m4[10] = *(ogre_m4[10]);  m4[11] = *(ogre_m4[11]);
    m4[12] = *(ogre_m4[12]);  m4[13] = *(ogre_m4[13]);
    m4[14] = *(ogre_m4[14]);  m4[15] = *(ogre_m4[15]);
}

// name: "calcViewMatrixRelative"
// type: "void"
// args: (("const Vector3&" . "relPos") ("Matrix4&" . "matToUpdate"))
//
void ogre_frustum_calc_view_matrix_relative (Frustum* ogre_frustum, const okraArray3 relPos, Matrix4& matToUpdate)
{
    Vector3 ogre_relPos = Vector3(relPos[0], relPos[1], relPos[2]);
    ogre_frustum->calcViewMatrixRelative(ogre_relPos, matToUpdate);
}

// name: "setCustomViewMatrix"
// type: "void"
// args: (("bool" . "enable") ("const Matrix4&" . "viewMatrix"))
//
void ogre_frustum_set_custom_view_matrix (Frustum* ogre_frustum, bool enable, const okraArray16 viewMatrix)
{
    Matrix4 ogre_viewMatrix = Matrix4(viewMatrix[0], viewMatrix[1], viewMatrix[2], viewMatrix[3], viewMatrix[4], viewMatrix[5], viewMatrix[6], viewMatrix[7], viewMatrix[8], viewMatrix[9], viewMatrix[10], viewMatrix[11], viewMatrix[12], viewMatrix[13], viewMatrix[14], viewMatrix[15]);
    ogre_frustum->setCustomViewMatrix(enable, ogre_viewMatrix);
}

// name: "isCustomViewMatrixEnabled"
// type: "bool"
// args: "void"
//
bool ogre_frustum_is_custom_view_matrix_enabled (Frustum* ogre_frustum)
{
    return ogre_frustum->isCustomViewMatrixEnabled();
}

// name: "setCustomProjectionMatrix"
// type: "void"
// args: (("bool" . "enable") ("const Matrix4&" . "projectionMatrix"))
//
void ogre_frustum_set_custom_projection_matrix (Frustum* ogre_frustum, bool enable, const okraArray16 projectionMatrix)
{
    Matrix4 ogre_projectionMatrix = Matrix4(projectionMatrix[0], projectionMatrix[1], projectionMatrix[2], projectionMatrix[3], projectionMatrix[4], projectionMatrix[5], projectionMatrix[6], projectionMatrix[7], projectionMatrix[8], projectionMatrix[9], projectionMatrix[10], projectionMatrix[11], projectionMatrix[12], projectionMatrix[13], projectionMatrix[14], projectionMatrix[15]);
    ogre_frustum->setCustomProjectionMatrix(enable, ogre_projectionMatrix);
}

// name: "isCustomProjectionMatrixEnabled"
// type: "bool"
// args: "void"
//
bool ogre_frustum_is_custom_projection_matrix_enabled (Frustum* ogre_frustum)
{
    return ogre_frustum->isCustomProjectionMatrixEnabled();
}

// name: "getFrustumPlanes"
// type: "const Plane*"
// args: "void"
//
const Plane* ogre_frustum_get_frustum_planes (Frustum* ogre_frustum)
{
    return ogre_frustum->getFrustumPlanes();
}

// name: "getFrustumPlane"
// type: "const Plane&"
// args: (("unsigned short" . "plane"))
//
const Plane& ogre_frustum_get_frustum_plane (Frustum* ogre_frustum, unsigned short plane)
{
    return ogre_frustum->getFrustumPlane(plane);
}

// name: "isVisible"
// type: "bool"
// args: (("const AxisAlignedBox&" . "bound") ("FrustumPlane*" . "culledBy"))
//
bool ogre_frustum_is_visible_axisalignedbox_frustumplane (Frustum* ogre_frustum, const okraArray6 bound, FrustumPlane* culledBy)
{
    AxisAlignedBox ogre_bound = AxisAlignedBox(bound[0], bound[1], bound[2], bound[3], bound[4], bound[5]);
    return ogre_frustum->isVisible(ogre_bound, culledBy);
}

// name: "isVisible"
// type: "bool"
// args: (("const Sphere&" . "bound") ("FrustumPlane*" . "culledBy"))
//
bool ogre_frustum_is_visible_sphere_frustumplane (Frustum* ogre_frustum, const okraArray4 bound, FrustumPlane* culledBy)
{
    Sphere ogre_bound = Sphere(Vector3(bound[0], bound[1], bound[2]), bound[3]);
    return ogre_frustum->isVisible(ogre_bound, culledBy);
}

// name: "isVisible"
// type: "bool"
// args: (("const Vector3&" . "vert") ("FrustumPlane*" . "culledBy"))
//
bool ogre_frustum_is_visible_vector3_frustumplane (Frustum* ogre_frustum, const okraArray3 vert, FrustumPlane* culledBy)
{
    Vector3 ogre_vert = Vector3(vert[0], vert[1], vert[2]);
    return ogre_frustum->isVisible(ogre_vert, culledBy);
}

// name: "getTypeFlags"
// type: "uint32"
// args: "void"
//
unsigned int ogre_frustum_get_type_flags (Frustum* ogre_frustum)
{
    return ogre_frustum->getTypeFlags();
}

// name: "getBoundingBox"
// type: "const AxisAlignedBox&"
// args: "void"
//
const AxisAlignedBox& ogre_frustum_get_bounding_box (Frustum* ogre_frustum)
{
    return ogre_frustum->getBoundingBox();
}

// name: "getBoundingRadius"
// type: "Real"
// args: "void"
//
Real ogre_frustum_get_bounding_radius (Frustum* ogre_frustum)
{
    return ogre_frustum->getBoundingRadius();
}

// name: "getMovableType"
// type: "const String&"
// args: "void"
//
const char* ogre_frustum_get_movable_type (Frustum* ogre_frustum)
{
    return ogre_frustum->getMovableType().c_str();
}

// name: "getMaterial"
// type: "const MaterialPtr&"
// args: "void"
//
const MaterialPtr& ogre_frustum_get_material (Frustum* ogre_frustum)
{
    return ogre_frustum->getMaterial();
}

// name: "getRenderOperation"
// type: "void"
// args: (("RenderOperation&" . "op"))
//
void ogre_frustum_get_render_operation (Frustum* ogre_frustum, RenderOperation& op)
{
    ogre_frustum->getRenderOperation(op);
}

// name: "getWorldTransforms"
// type: "void"
// args: (("Matrix4*" . "xform"))
//
void ogre_frustum_get_world_transforms (Frustum* ogre_frustum, Matrix4* xform)
{
    ogre_frustum->getWorldTransforms(xform);
}

// name: "getSquaredViewDepth"
// type: "Real"
// args: (("const Camera*" . "cam"))
//
Real ogre_frustum_get_squared_view_depth (Frustum* ogre_frustum, const Camera* cam)
{
    return ogre_frustum->getSquaredViewDepth(cam);
}

// name: "getLights"
// type: "const LightList&"
// args: "void"
//
const LightList& ogre_frustum_get_lights (Frustum* ogre_frustum)
{
    return ogre_frustum->getLights();
}

// name: "getWorldSpaceCorners"
// type: "const Vector3*"
// args: "void"
//
const Vector3* ogre_frustum_get_world_space_corners (Frustum* ogre_frustum)
{
    return ogre_frustum->getWorldSpaceCorners();
}

// name: "setProjectionType"
// type: "void"
// args: (("ProjectionType" . "pt"))
//
void ogre_frustum_set_projection_type (Frustum* ogre_frustum, ProjectionType pt)
{
    ogre_frustum->setProjectionType(pt);
}

// name: "getProjectionType"
// type: "ProjectionType"
// args: "void"
//
ProjectionType ogre_frustum_get_projection_type (Frustum* ogre_frustum)
{
    return ogre_frustum->getProjectionType();
}

// name: "setOrthoWindow"
// type: "void"
// args: (("Real" . "w") ("Real" . "h"))
//
void ogre_frustum_set_ortho_window (Frustum* ogre_frustum, Real w, Real h)
{
    ogre_frustum->setOrthoWindow(w, h);
}

// name: "setOrthoWindowHeight"
// type: "void"
// args: (("Real" . "h"))
//
void ogre_frustum_set_ortho_window_height (Frustum* ogre_frustum, Real h)
{
    ogre_frustum->setOrthoWindowHeight(h);
}

// name: "setOrthoWindowWidth"
// type: "void"
// args: (("Real" . "w"))
//
void ogre_frustum_set_ortho_window_width (Frustum* ogre_frustum, Real w)
{
    ogre_frustum->setOrthoWindowWidth(w);
}

// name: "getOrthoWindowHeight"
// type: "Real"
// args: "void"
//
Real ogre_frustum_get_ortho_window_height (Frustum* ogre_frustum)
{
    return ogre_frustum->getOrthoWindowHeight();
}

// name: "getOrthoWindowWidth"
// type: "Real"
// args: "void"
//
Real ogre_frustum_get_ortho_window_width (Frustum* ogre_frustum)
{
    return ogre_frustum->getOrthoWindowWidth();
}

// name: "enableReflection"
// type: "void"
// args: (("const MovablePlane*" . "p"))
//
void ogre_frustum_enable_reflection (Frustum* ogre_frustum, const MovablePlane* p)
{
    ogre_frustum->enableReflection(p);
}

// name: "disableReflection"
// type: "void"
// args: "void"
//
void ogre_frustum_disable_reflection (Frustum* ogre_frustum)
{
    ogre_frustum->disableReflection();
}

// name: "isReflected"
// type: "bool"
// args: "void"
//
bool ogre_frustum_is_reflected (Frustum* ogre_frustum)
{
    return ogre_frustum->isReflected();
}

// name: "getReflectionMatrix"
// type: "const Matrix4&"
// args: "void"
//
void ogre_frustum_get_reflection_matrix (Frustum* ogre_frustum, okraArray16 m4)
{
    Matrix4 ogre_m4 = ogre_frustum->getReflectionMatrix();
    m4[ 0] = *(ogre_m4[ 0]);  m4[ 1] = *(ogre_m4[ 1]);
    m4[ 2] = *(ogre_m4[ 2]);  m4[ 3] = *(ogre_m4[ 3]);
    m4[ 4] = *(ogre_m4[ 4]);  m4[ 5] = *(ogre_m4[ 5]);
    m4[ 6] = *(ogre_m4[ 6]);  m4[ 7] = *(ogre_m4[ 7]);
    m4[ 8] = *(ogre_m4[ 8]);  m4[ 9] = *(ogre_m4[ 9]);
    m4[10] = *(ogre_m4[10]);  m4[11] = *(ogre_m4[11]);
    m4[12] = *(ogre_m4[12]);  m4[13] = *(ogre_m4[13]);
    m4[14] = *(ogre_m4[14]);  m4[15] = *(ogre_m4[15]);
}

// name: "getReflectionPlane"
// type: "const Plane&"
// args: "void"
//
const Plane& ogre_frustum_get_reflection_plane (Frustum* ogre_frustum)
{
    return ogre_frustum->getReflectionPlane();
}

// name: "enableCustomNearClipPlane"
// type: "void"
// args: (("const MovablePlane*" . "plane"))
//
void ogre_frustum_enable_custom_near_clip_plane (Frustum* ogre_frustum, const MovablePlane* plane)
{
    ogre_frustum->enableCustomNearClipPlane(plane);
}

// name: "disableCustomNearClipPlane"
// type: "void"
// args: "void"
//
void ogre_frustum_disable_custom_near_clip_plane (Frustum* ogre_frustum)
{
    ogre_frustum->disableCustomNearClipPlane();
}

// name: "isCustomNearClipPlaneEnabled"
// type: "bool"
// args: "void"
//
bool ogre_frustum_is_custom_near_clip_plane_enabled (Frustum* ogre_frustum)
{
    return ogre_frustum->isCustomNearClipPlaneEnabled();
}

// name: "visitRenderables"
// type: "void"
// args: (("Renderable::Visitor*" . "visitor") ("bool" . "debugRenderables"))
//
void ogre_frustum_visit_renderables (Frustum* ogre_frustum, Renderable::Visitor* visitor, bool debugRenderables)
{
    ogre_frustum->visitRenderables(visitor, debugRenderables);
}

// name: "getPositionForViewUpdate"
// type: "const Vector3&"
// args: "void"
//
void ogre_frustum_get_position_for_view_update (Frustum* ogre_frustum, okraArray3 v)
{
    Vector3 ogre_v = ogre_frustum->getPositionForViewUpdate();
    v[0] = ogre_v[0];
    v[1] = ogre_v[1];
    v[2] = ogre_v[2];
}

// name: "getOrientationForViewUpdate"
// type: "const Quaternion&"
// args: "void"
//
void ogre_frustum_get_orientation_for_view_update (Frustum* ogre_frustum, okraArray4 q)
{
    Quaternion ogre_q = ogre_frustum->getOrientationForViewUpdate();
    q[0] = ogre_q[0];
    q[1] = ogre_q[1];
    q[2] = ogre_q[2];
    q[3] = ogre_q[3];
}


