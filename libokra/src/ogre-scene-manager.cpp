// ogre-scene-manager.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-08-07 15:52:09.

#include "handwritten/okra.h"


// Prototypes

extern "C"
{
    const char* ogre_scene_manager_get_name (SceneManager*);
    const char* ogre_scene_manager_get_type_name (SceneManager*);
    Camera* ogre_scene_manager_create_camera (SceneManager*, const char*);
    Camera* ogre_scene_manager_get_camera_string (SceneManager*, const char*);
    bool ogre_scene_manager_has_camera (SceneManager*, const char*);
    void ogre_scene_manager_destroy_camera_camera (SceneManager*, Camera*);
    void ogre_scene_manager_destroy_camera_string (SceneManager*, const char*);
    void ogre_scene_manager_destroy_all_cameras (SceneManager*);
    Light* ogre_scene_manager_create_light (SceneManager*, const char*);
    Light* ogre_scene_manager_get_light (SceneManager*, const char*);
    bool ogre_scene_manager_has_light (SceneManager*, const char*);
    const PlaneList& ogre_scene_manager_get_light_clipping_planes (SceneManager*, Light*);
    const RealRect& ogre_scene_manager_get_light_scissor_rect (SceneManager*, Light*, const Camera*);
    void ogre_scene_manager_destroy_light_string (SceneManager*, const char*);
    void ogre_scene_manager_destroy_light_light (SceneManager*, Light*);
    void ogre_scene_manager_destroy_all_lights (SceneManager*);
    SceneNode* ogre_scene_manager_create_scene_node_void (SceneManager*);
    SceneNode* ogre_scene_manager_create_scene_node_string (SceneManager*, const char*);
    void ogre_scene_manager_destroy_scene_node_string (SceneManager*, const char*);
    void ogre_scene_manager_destroy_scene_node_scenenode (SceneManager*, SceneNode*);
    SceneNode* ogre_scene_manager_get_root_scene_node (SceneManager*);
    SceneNode* ogre_scene_manager_get_scene_node (SceneManager*, const char*);
    bool ogre_scene_manager_has_scene_node (SceneManager*, const char*);
    Entity* ogre_scene_manager_create_entity_string_string (SceneManager*, const char*, const char*);
    Entity* ogre_scene_manager_create_entity_string_prefabtype (SceneManager*, const char*, SceneManager::PrefabType);
    Entity* ogre_scene_manager_get_entity (SceneManager*, const char*);
    bool ogre_scene_manager_has_entity (SceneManager*, const char*);
    void ogre_scene_manager_destroy_entity_entity (SceneManager*, Entity*);
    void ogre_scene_manager_destroy_entity_string (SceneManager*, const char*);
    void ogre_scene_manager_destroy_all_entities (SceneManager*);
    ManualObject* ogre_scene_manager_create_manual_object (SceneManager*, const char*);
    ManualObject* ogre_scene_manager_get_manual_object (SceneManager*, const char*);
    bool ogre_scene_manager_has_manual_object (SceneManager*, const char*);
    void ogre_scene_manager_destroy_manual_object_manualobject (SceneManager*, ManualObject*);
    void ogre_scene_manager_destroy_manual_object_string (SceneManager*, const char*);
    void ogre_scene_manager_destroy_all_manual_objects (SceneManager*);
    BillboardChain* ogre_scene_manager_create_billboard_chain (SceneManager*, const char*);
    BillboardChain* ogre_scene_manager_get_billboard_chain (SceneManager*, const char*);
    bool ogre_scene_manager_has_billboard_chain (SceneManager*, const char*);
    void ogre_scene_manager_destroy_billboard_chain_billboardchain (SceneManager*, BillboardChain*);
    void ogre_scene_manager_destroy_billboard_chain_string (SceneManager*, const char*);
    void ogre_scene_manager_destroy_all_billboard_chains (SceneManager*);
    RibbonTrail* ogre_scene_manager_create_ribbon_trail (SceneManager*, const char*);
    RibbonTrail* ogre_scene_manager_get_ribbon_trail (SceneManager*, const char*);
    bool ogre_scene_manager_has_ribbon_trail (SceneManager*, const char*);
    void ogre_scene_manager_destroy_ribbon_trail_ribbontrail (SceneManager*, RibbonTrail*);
    void ogre_scene_manager_destroy_ribbon_trail_string (SceneManager*, const char*);
    void ogre_scene_manager_destroy_all_ribbon_trails (SceneManager*);
    ParticleSystem* ogre_scene_manager_create_particle_system_string_string (SceneManager*, const char*, const char*);
    ParticleSystem* ogre_scene_manager_create_particle_system_string_size_t_string (SceneManager*, const char*, size_t, const char*);
    ParticleSystem* ogre_scene_manager_get_particle_system (SceneManager*, const char*);
    bool ogre_scene_manager_has_particle_system (SceneManager*, const char*);
    void ogre_scene_manager_destroy_particle_system_particlesystem (SceneManager*, ParticleSystem*);
    void ogre_scene_manager_destroy_particle_system_string (SceneManager*, const char*);
    void ogre_scene_manager_destroy_all_particle_systems (SceneManager*);
    void ogre_scene_manager_clear_scene (SceneManager*);
    void ogre_scene_manager_set_ambient_light (SceneManager*, const okraArray4);
    void ogre_scene_manager_get_ambient_light (SceneManager*, okraArray4);
    void ogre_scene_manager_prepare_world_geometry_string (SceneManager*, const char*);
    void ogre_scene_manager_prepare_world_geometry_datastreamptr_string (SceneManager*, DataStreamPtr&, const char*);
    void ogre_scene_manager_set_world_geometry_string (SceneManager*, const char*);
    void ogre_scene_manager_set_world_geometry_datastreamptr_string (SceneManager*, DataStreamPtr&, const char*);
    size_t ogre_scene_manager_estimate_world_geometry_string (SceneManager*, const char*);
    size_t ogre_scene_manager_estimate_world_geometry_datastreamptr_string (SceneManager*, DataStreamPtr&, const char*);
    ViewPoint ogre_scene_manager_get_suggested_viewpoint (SceneManager*, bool);
    bool ogre_scene_manager_set_option (SceneManager*, const char*, const void*);
    bool ogre_scene_manager_get_option (SceneManager*, const char*, void*);
    bool ogre_scene_manager_has_option (SceneManager*, const char*);
    bool ogre_scene_manager_get_option_values (SceneManager*, const char*, StringVector&);
    bool ogre_scene_manager_get_option_keys (SceneManager*, StringVector&);
    void ogre_scene_manager_set_sky_plane (SceneManager*, bool, const okraArray4, const char*, Real, Real, bool, Real, int, int, const char*);
    bool ogre_scene_manager_is_sky_plane_enabled (SceneManager*);
    SceneNode* ogre_scene_manager_get_sky_plane_node (SceneManager*);
    SceneManager::SkyPlaneGenParameters ogre_scene_manager_get_sky_plane_gen_parameters (SceneManager*);
    void ogre_scene_manager_set_sky_box (SceneManager*, bool, const char*, Real, bool, const okraArray4, const char*);
    bool ogre_scene_manager_is_sky_box_enabled (SceneManager*);
    SceneNode* ogre_scene_manager_get_sky_box_node (SceneManager*);
    SceneManager::SkyBoxGenParameters ogre_scene_manager_get_sky_box_gen_parameters (SceneManager*);
    void ogre_scene_manager_set_sky_dome (SceneManager*, bool, const char*, Real, Real, Real, bool, const okraArray4, int, int, int, const char*);
    bool ogre_scene_manager_is_sky_dome_enabled (SceneManager*);
    SceneNode* ogre_scene_manager_get_sky_dome_node (SceneManager*);
    SceneManager::SkyDomeGenParameters ogre_scene_manager_get_sky_dome_gen_parameters (SceneManager*);
    void ogre_scene_manager_set_fog (SceneManager*, FogMode, const okraArray4, Real, Real, Real);
    FogMode ogre_scene_manager_get_fog_mode (SceneManager*);
    void ogre_scene_manager_get_fog_colour (SceneManager*, okraArray4);
    Real ogre_scene_manager_get_fog_start (SceneManager*);
    Real ogre_scene_manager_get_fog_end (SceneManager*);
    Real ogre_scene_manager_get_fog_density (SceneManager*);
    BillboardSet* ogre_scene_manager_create_billboard_set (SceneManager*, const char*, unsigned int);
    BillboardSet* ogre_scene_manager_get_billboard_set (SceneManager*, const char*);
    bool ogre_scene_manager_has_billboard_set (SceneManager*, const char*);
    void ogre_scene_manager_destroy_billboard_set_billboardset (SceneManager*, BillboardSet*);
    void ogre_scene_manager_destroy_billboard_set_string (SceneManager*, const char*);
    void ogre_scene_manager_destroy_all_billboard_sets (SceneManager*);
    void ogre_scene_manager_set_display_scene_nodes (SceneManager*, bool);
    bool ogre_scene_manager_get_display_scene_nodes (SceneManager*);
    Animation* ogre_scene_manager_create_animation (SceneManager*, const char*, Real);
    Animation* ogre_scene_manager_get_animation (SceneManager*, const char*);
    bool ogre_scene_manager_has_animation (SceneManager*, const char*);
    void ogre_scene_manager_destroy_animation (SceneManager*, const char*);
    void ogre_scene_manager_destroy_all_animations (SceneManager*);
    AnimationState* ogre_scene_manager_create_animation_state (SceneManager*, const char*);
    AnimationState* ogre_scene_manager_get_animation_state (SceneManager*, const char*);
    bool ogre_scene_manager_has_animation_state (SceneManager*, const char*);
    void ogre_scene_manager_destroy_animation_state (SceneManager*, const char*);
    void ogre_scene_manager_destroy_all_animation_states (SceneManager*);
    void ogre_scene_manager_manual_render (SceneManager*, RenderOperation*, Pass*, Viewport*, const okraArray16, const okraArray16, const okraArray16, bool);
    RenderQueue* ogre_scene_manager_get_render_queue (SceneManager*);
    void ogre_scene_manager_add_render_queue_listener (SceneManager*, RenderQueueListener*);
    void ogre_scene_manager_remove_render_queue_listener (SceneManager*, RenderQueueListener*);
    void ogre_scene_manager_add_special_case_render_queue (SceneManager*, unsigned char);
    void ogre_scene_manager_remove_special_case_render_queue (SceneManager*, unsigned char);
    void ogre_scene_manager_clear_special_case_render_queues (SceneManager*);
    void ogre_scene_manager_set_special_case_render_queue_mode (SceneManager*, SceneManager::SpecialCaseRenderQueueMode);
    bool ogre_scene_manager_is_render_queue_to_be_processed (SceneManager*, unsigned char);
    void ogre_scene_manager_set_world_geometry_render_queue (SceneManager*, unsigned char);
    unsigned char ogre_scene_manager_get_world_geometry_render_queue (SceneManager*);
    void ogre_scene_manager_show_bounding_boxes (SceneManager*, bool);
    bool ogre_scene_manager_get_show_bounding_boxes (SceneManager*);
    AxisAlignedBoxSceneQuery* ogre_scene_manager_create_aabbquery (SceneManager*, const okraArray6, unsigned long);
    SphereSceneQuery* ogre_scene_manager_create_sphere_query (SceneManager*, const okraArray4, unsigned long);
    PlaneBoundedVolumeListSceneQuery* ogre_scene_manager_create_plane_bounded_volume_query (SceneManager*, const PlaneBoundedVolumeList&, unsigned long);
    RaySceneQuery* ogre_scene_manager_create_ray_query (SceneManager*, const Ray&, unsigned long);
    IntersectionSceneQuery* ogre_scene_manager_create_intersection_query (SceneManager*, unsigned long);
    void ogre_scene_manager_destroy_query (SceneManager*, SceneQuery*);
    SceneManager::CameraIterator ogre_scene_manager_get_camera_iterator (SceneManager*);
    SceneManager::AnimationIterator ogre_scene_manager_get_animation_iterator (SceneManager*);
    AnimationStateIterator ogre_scene_manager_get_animation_state_iterator (SceneManager*);
    void ogre_scene_manager_set_shadow_technique (SceneManager*, ShadowTechnique);
    ShadowTechnique ogre_scene_manager_get_shadow_technique (SceneManager*);
    void ogre_scene_manager_set_show_debug_shadows (SceneManager*, bool);
    bool ogre_scene_manager_get_show_debug_shadows (SceneManager*);
    void ogre_scene_manager_set_shadow_colour (SceneManager*, const okraArray4);
    void ogre_scene_manager_get_shadow_colour (SceneManager*, okraArray4);
    void ogre_scene_manager_set_shadow_directional_light_extrusion_distance (SceneManager*, Real);
    Real ogre_scene_manager_get_shadow_directional_light_extrusion_distance (SceneManager*);
    void ogre_scene_manager_set_shadow_far_distance (SceneManager*, Real);
    Real ogre_scene_manager_get_shadow_far_distance (SceneManager*);
    Real ogre_scene_manager_get_shadow_far_distance_squared (SceneManager*);
    void ogre_scene_manager_set_shadow_index_buffer_size (SceneManager*, size_t);
    size_t ogre_scene_manager_get_shadow_index_buffer_size (SceneManager*);
    void ogre_scene_manager_set_shadow_texture_size (SceneManager*, unsigned short);
    void ogre_scene_manager_set_shadow_texture_config_size_t_unsignedshort_unsignedshort_pixelformat (SceneManager*, size_t, unsigned short, unsigned short, PixelFormat);
    void ogre_scene_manager_set_shadow_texture_config_size_t_shadowtextureconfig (SceneManager*, size_t, const ShadowTextureConfig&);
    ConstShadowTextureConfigIterator ogre_scene_manager_get_shadow_texture_config_iterator (SceneManager*);
    void ogre_scene_manager_set_shadow_texture_pixel_format (SceneManager*, PixelFormat);
    void ogre_scene_manager_set_shadow_texture_count (SceneManager*, size_t);
    size_t ogre_scene_manager_get_shadow_texture_count (SceneManager*);
    void ogre_scene_manager_set_shadow_texture_count_per_light_type (SceneManager*, Light::LightTypes, size_t);
    size_t ogre_scene_manager_get_shadow_texture_count_per_light_type (SceneManager*, Light::LightTypes);
    void ogre_scene_manager_set_shadow_texture_settings (SceneManager*, unsigned short, unsigned short, PixelFormat);
    const TexturePtr& ogre_scene_manager_get_shadow_texture (SceneManager*, size_t);
    void ogre_scene_manager_set_shadow_dir_light_texture_offset (SceneManager*, Real);
    Real ogre_scene_manager_get_shadow_dir_light_texture_offset (SceneManager*);
    void ogre_scene_manager_set_shadow_texture_fade_start (SceneManager*, Real);
    void ogre_scene_manager_set_shadow_texture_fade_end (SceneManager*, Real);
    void ogre_scene_manager_set_shadow_texture_self_shadow (SceneManager*, bool);
    bool ogre_scene_manager_get_shadow_texture_self_shadow (SceneManager*);
    void ogre_scene_manager_set_shadow_texture_caster_material (SceneManager*, const char*);
    void ogre_scene_manager_set_shadow_texture_receiver_material (SceneManager*, const char*);
    void ogre_scene_manager_set_shadow_caster_render_back_faces (SceneManager*, bool);
    bool ogre_scene_manager_get_shadow_caster_render_back_faces (SceneManager*);
    void ogre_scene_manager_set_shadow_camera_setup (SceneManager*, const ShadowCameraSetupPtr&);
    const ShadowCameraSetupPtr& ogre_scene_manager_get_shadow_camera_setup (SceneManager*);
    void ogre_scene_manager_set_shadow_use_infinite_far_plane (SceneManager*, bool);
    bool ogre_scene_manager_is_shadow_technique_stencil_based (SceneManager*);
    bool ogre_scene_manager_is_shadow_technique_texture_based (SceneManager*);
    bool ogre_scene_manager_is_shadow_technique_modulative (SceneManager*);
    bool ogre_scene_manager_is_shadow_technique_additive (SceneManager*);
    bool ogre_scene_manager_is_shadow_technique_integrated (SceneManager*);
    bool ogre_scene_manager_is_shadow_technique_in_use (SceneManager*);
    void ogre_scene_manager_set_shadow_use_light_clip_planes (SceneManager*, bool);
    bool ogre_scene_manager_get_shadow_use_light_clip_planes (SceneManager*);
    StaticGeometry* ogre_scene_manager_create_static_geometry (SceneManager*, const char*);
    StaticGeometry* ogre_scene_manager_get_static_geometry (SceneManager*, const char*);
    bool ogre_scene_manager_has_static_geometry (SceneManager*, const char*);
    void ogre_scene_manager_destroy_static_geometry_staticgeometry (SceneManager*, StaticGeometry*);
    void ogre_scene_manager_destroy_static_geometry_string (SceneManager*, const char*);
    void ogre_scene_manager_destroy_all_static_geometry (SceneManager*);
    InstancedGeometry* ogre_scene_manager_create_instanced_geometry (SceneManager*, const char*);
    InstancedGeometry* ogre_scene_manager_get_instanced_geometry (SceneManager*, const char*);
    void ogre_scene_manager_destroy_instanced_geometry_instancedgeometry (SceneManager*, InstancedGeometry*);
    void ogre_scene_manager_destroy_instanced_geometry_string (SceneManager*, const char*);
    void ogre_scene_manager_destroy_all_instanced_geometry (SceneManager*);
    MovableObject* ogre_scene_manager_create_movable_object (SceneManager*, const char*, const char*, const NameValuePairList*);
    void ogre_scene_manager_destroy_movable_object_string_string (SceneManager*, const char*, const char*);
    void ogre_scene_manager_destroy_movable_object_movableobject (SceneManager*, MovableObject*);
    void ogre_scene_manager_destroy_all_movable_objects_by_type (SceneManager*, const char*);
    void ogre_scene_manager_destroy_all_movable_objects (SceneManager*);
    MovableObject* ogre_scene_manager_get_movable_object (SceneManager*, const char*, const char*);
    bool ogre_scene_manager_has_movable_object (SceneManager*, const char*, const char*);
    SceneManager::MovableObjectIterator ogre_scene_manager_get_movable_object_iterator (SceneManager*, const char*);
    void ogre_scene_manager_inject_movable_object (SceneManager*, MovableObject*);
    void ogre_scene_manager_extract_movable_object_string_string (SceneManager*, const char*, const char*);
    void ogre_scene_manager_extract_movable_object_movableobject (SceneManager*, MovableObject*);
    void ogre_scene_manager_extract_all_movable_objects_by_type (SceneManager*, const char*);
    void ogre_scene_manager_set_visibility_mask (SceneManager*, unsigned int);
    unsigned int ogre_scene_manager_get_visibility_mask (SceneManager*);
    void ogre_scene_manager_set_find_visible_objects (SceneManager*, bool);
    bool ogre_scene_manager_get_find_visible_objects (SceneManager*);
    void ogre_scene_manager_set_normalise_normals_on_scale (SceneManager*, bool);
    bool ogre_scene_manager_get_normalise_normals_on_scale (SceneManager*);
    void ogre_scene_manager_set_flip_culling_on_negative_scale (SceneManager*, bool);
    bool ogre_scene_manager_get_flip_culling_on_negative_scale (SceneManager*);
    RenderSystem* ogre_scene_manager_get_destination_render_system (SceneManager*);
    Viewport* ogre_scene_manager_get_current_viewport (SceneManager*);
    const VisibleObjectsBoundsInfo& ogre_scene_manager_get_visible_objects_bounds_info (SceneManager*, const Camera*);
    const VisibleObjectsBoundsInfo& ogre_scene_manager_get_shadow_caster_bounds_info (SceneManager*, const Light*, size_t);
    void ogre_scene_manager_set_camera_relative_rendering (SceneManager*, bool);
    bool ogre_scene_manager_get_camera_relative_rendering (SceneManager*);
}


// Functions

// name: "getName"
// type: "const String&"
// args: "void"
//
const char* ogre_scene_manager_get_name (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getName().c_str();
}

// name: "getTypeName"
// type: "const String&"
// args: "void"
//
const char* ogre_scene_manager_get_type_name (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getTypeName().c_str();
}

// name: "createCamera"
// type: "Camera*"
// args: (("const String&" . "name"))
//
Camera* ogre_scene_manager_create_camera (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->createCamera(name);
}

// name: "getCamera"
// type: "Camera*"
// args: (("const String&" . "name"))
//
Camera* ogre_scene_manager_get_camera_string (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->getCamera(name);
}

// name: "hasCamera"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_scene_manager_has_camera (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->hasCamera(name);
}

// name: "destroyCamera"
// type: "void"
// args: (("Camera*" . "cam"))
//
void ogre_scene_manager_destroy_camera_camera (SceneManager* ogre_scene_manager, Camera* cam)
{
    ogre_scene_manager->destroyCamera(cam);
}

// name: "destroyCamera"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_destroy_camera_string (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->destroyCamera(name);
}

// name: "destroyAllCameras"
// type: "void"
// args: "void"
//
void ogre_scene_manager_destroy_all_cameras (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->destroyAllCameras();
}

// name: "createLight"
// type: "Light*"
// args: (("const String&" . "name"))
//
Light* ogre_scene_manager_create_light (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->createLight(name);
}

// name: "getLight"
// type: "Light*"
// args: (("const String&" . "name"))
//
Light* ogre_scene_manager_get_light (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->getLight(name);
}

// name: "hasLight"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_scene_manager_has_light (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->hasLight(name);
}

// name: "getLightClippingPlanes"
// type: "const PlaneList&"
// args: (("Light*" . "l"))
//
const PlaneList& ogre_scene_manager_get_light_clipping_planes (SceneManager* ogre_scene_manager, Light* l)
{
    return ogre_scene_manager->getLightClippingPlanes(l);
}

// name: "getLightScissorRect"
// type: "const RealRect&"
// args: (("Light*" . "l") ("const Camera*" . "cam"))
//
const RealRect& ogre_scene_manager_get_light_scissor_rect (SceneManager* ogre_scene_manager, Light* l, const Camera* cam)
{
    return ogre_scene_manager->getLightScissorRect(l, cam);
}

// name: "destroyLight"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_destroy_light_string (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->destroyLight(name);
}

// name: "destroyLight"
// type: "void"
// args: (("Light*" . "light"))
//
void ogre_scene_manager_destroy_light_light (SceneManager* ogre_scene_manager, Light* light)
{
    ogre_scene_manager->destroyLight(light);
}

// name: "destroyAllLights"
// type: "void"
// args: "void"
//
void ogre_scene_manager_destroy_all_lights (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->destroyAllLights();
}

// name: "createSceneNode"
// type: "SceneNode*"
// args: "void"
//
SceneNode* ogre_scene_manager_create_scene_node_void (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->createSceneNode();
}

// name: "createSceneNode"
// type: "SceneNode*"
// args: (("const String&" . "name"))
//
SceneNode* ogre_scene_manager_create_scene_node_string (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->createSceneNode(name);
}

// name: "destroySceneNode"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_destroy_scene_node_string (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->destroySceneNode(name);
}

// name: "destroySceneNode"
// type: "void"
// args: (("SceneNode*" . "sn"))
//
void ogre_scene_manager_destroy_scene_node_scenenode (SceneManager* ogre_scene_manager, SceneNode* sn)
{
    ogre_scene_manager->destroySceneNode(sn);
}

// name: "getRootSceneNode"
// type: "SceneNode*"
// args: "void"
//
SceneNode* ogre_scene_manager_get_root_scene_node (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getRootSceneNode();
}

// name: "getSceneNode"
// type: "SceneNode*"
// args: (("const String&" . "name"))
//
SceneNode* ogre_scene_manager_get_scene_node (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->getSceneNode(name);
}

// name: "hasSceneNode"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_scene_manager_has_scene_node (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->hasSceneNode(name);
}

// name: "createEntity"
// type: "Entity*"
// args: (("const String&" . "entityName") ("const String&" . "meshName"))
//
Entity* ogre_scene_manager_create_entity_string_string (SceneManager* ogre_scene_manager, const char* entityName, const char* meshName)
{
    return ogre_scene_manager->createEntity(entityName, meshName);
}

// name: "createEntity"
// type: "Entity*"
// args: (("const String&" . "entityName") ("PrefabType" . "ptype"))
//
Entity* ogre_scene_manager_create_entity_string_prefabtype (SceneManager* ogre_scene_manager, const char* entityName, SceneManager::PrefabType ptype)
{
    return ogre_scene_manager->createEntity(entityName, ptype);
}

// name: "getEntity"
// type: "Entity*"
// args: (("const String&" . "name"))
//
Entity* ogre_scene_manager_get_entity (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->getEntity(name);
}

// name: "hasEntity"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_scene_manager_has_entity (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->hasEntity(name);
}

// name: "destroyEntity"
// type: "void"
// args: (("Entity*" . "ent"))
//
void ogre_scene_manager_destroy_entity_entity (SceneManager* ogre_scene_manager, Entity* ent)
{
    ogre_scene_manager->destroyEntity(ent);
}

// name: "destroyEntity"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_destroy_entity_string (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->destroyEntity(name);
}

// name: "destroyAllEntities"
// type: "void"
// args: "void"
//
void ogre_scene_manager_destroy_all_entities (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->destroyAllEntities();
}

// name: "createManualObject"
// type: "ManualObject*"
// args: (("const String&" . "name"))
//
ManualObject* ogre_scene_manager_create_manual_object (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->createManualObject(name);
}

// name: "getManualObject"
// type: "ManualObject*"
// args: (("const String&" . "name"))
//
ManualObject* ogre_scene_manager_get_manual_object (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->getManualObject(name);
}

// name: "hasManualObject"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_scene_manager_has_manual_object (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->hasManualObject(name);
}

// name: "destroyManualObject"
// type: "void"
// args: (("ManualObject*" . "obj"))
//
void ogre_scene_manager_destroy_manual_object_manualobject (SceneManager* ogre_scene_manager, ManualObject* obj)
{
    ogre_scene_manager->destroyManualObject(obj);
}

// name: "destroyManualObject"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_destroy_manual_object_string (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->destroyManualObject(name);
}

// name: "destroyAllManualObjects"
// type: "void"
// args: "void"
//
void ogre_scene_manager_destroy_all_manual_objects (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->destroyAllManualObjects();
}

// name: "createBillboardChain"
// type: "BillboardChain*"
// args: (("const String&" . "name"))
//
BillboardChain* ogre_scene_manager_create_billboard_chain (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->createBillboardChain(name);
}

// name: "getBillboardChain"
// type: "BillboardChain*"
// args: (("const String&" . "name"))
//
BillboardChain* ogre_scene_manager_get_billboard_chain (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->getBillboardChain(name);
}

// name: "hasBillboardChain"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_scene_manager_has_billboard_chain (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->hasBillboardChain(name);
}

// name: "destroyBillboardChain"
// type: "void"
// args: (("BillboardChain*" . "obj"))
//
void ogre_scene_manager_destroy_billboard_chain_billboardchain (SceneManager* ogre_scene_manager, BillboardChain* obj)
{
    ogre_scene_manager->destroyBillboardChain(obj);
}

// name: "destroyBillboardChain"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_destroy_billboard_chain_string (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->destroyBillboardChain(name);
}

// name: "destroyAllBillboardChains"
// type: "void"
// args: "void"
//
void ogre_scene_manager_destroy_all_billboard_chains (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->destroyAllBillboardChains();
}

// name: "createRibbonTrail"
// type: "RibbonTrail*"
// args: (("const String&" . "name"))
//
RibbonTrail* ogre_scene_manager_create_ribbon_trail (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->createRibbonTrail(name);
}

// name: "getRibbonTrail"
// type: "RibbonTrail*"
// args: (("const String&" . "name"))
//
RibbonTrail* ogre_scene_manager_get_ribbon_trail (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->getRibbonTrail(name);
}

// name: "hasRibbonTrail"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_scene_manager_has_ribbon_trail (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->hasRibbonTrail(name);
}

// name: "destroyRibbonTrail"
// type: "void"
// args: (("RibbonTrail*" . "obj"))
//
void ogre_scene_manager_destroy_ribbon_trail_ribbontrail (SceneManager* ogre_scene_manager, RibbonTrail* obj)
{
    ogre_scene_manager->destroyRibbonTrail(obj);
}

// name: "destroyRibbonTrail"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_destroy_ribbon_trail_string (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->destroyRibbonTrail(name);
}

// name: "destroyAllRibbonTrails"
// type: "void"
// args: "void"
//
void ogre_scene_manager_destroy_all_ribbon_trails (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->destroyAllRibbonTrails();
}

// name: "createParticleSystem"
// type: "ParticleSystem*"
// args: (("const String&" . "name") ("const String&" . "templateName"))
//
ParticleSystem* ogre_scene_manager_create_particle_system_string_string (SceneManager* ogre_scene_manager, const char* name, const char* templateName)
{
    return ogre_scene_manager->createParticleSystem(name, templateName);
}

// name: "createParticleSystem"
// type: "ParticleSystem*"
// args: (("const String&" . "name") ("size_t" . "quota") ("const String&" . "resourceGroup"))
//
ParticleSystem* ogre_scene_manager_create_particle_system_string_size_t_string (SceneManager* ogre_scene_manager, const char* name, size_t quota, const char* resourceGroup)
{
    return ogre_scene_manager->createParticleSystem(name, quota, resourceGroup);
}

// name: "getParticleSystem"
// type: "ParticleSystem*"
// args: (("const String&" . "name"))
//
ParticleSystem* ogre_scene_manager_get_particle_system (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->getParticleSystem(name);
}

// name: "hasParticleSystem"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_scene_manager_has_particle_system (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->hasParticleSystem(name);
}

// name: "destroyParticleSystem"
// type: "void"
// args: (("ParticleSystem*" . "obj"))
//
void ogre_scene_manager_destroy_particle_system_particlesystem (SceneManager* ogre_scene_manager, ParticleSystem* obj)
{
    ogre_scene_manager->destroyParticleSystem(obj);
}

// name: "destroyParticleSystem"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_destroy_particle_system_string (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->destroyParticleSystem(name);
}

// name: "destroyAllParticleSystems"
// type: "void"
// args: "void"
//
void ogre_scene_manager_destroy_all_particle_systems (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->destroyAllParticleSystems();
}

// name: "clearScene"
// type: "void"
// args: "void"
//
void ogre_scene_manager_clear_scene (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->clearScene();
}

// name: "setAmbientLight"
// type: "void"
// args: (("const ColourValue&" . "colour"))
//
void ogre_scene_manager_set_ambient_light (SceneManager* ogre_scene_manager, const okraArray4 colour)
{
    ColourValue ogre_colour = ColourValue(colour[0], colour[1], colour[2], colour[3]);
    ogre_scene_manager->setAmbientLight(ogre_colour);
}

// name: "getAmbientLight"
// type: "const ColourValue&"
// args: "void"
//
void ogre_scene_manager_get_ambient_light (SceneManager* ogre_scene_manager, okraArray4 cv)
{
    ColourValue ogre_cv = ogre_scene_manager->getAmbientLight();
    cv[0] = ogre_cv.r;
    cv[1] = ogre_cv.g;
    cv[2] = ogre_cv.b;
    cv[3] = ogre_cv.a;
}

// name: "prepareWorldGeometry"
// type: "void"
// args: (("const String&" . "filename"))
//
void ogre_scene_manager_prepare_world_geometry_string (SceneManager* ogre_scene_manager, const char* filename)
{
    ogre_scene_manager->prepareWorldGeometry(filename);
}

// name: "prepareWorldGeometry"
// type: "void"
// args: (("DataStreamPtr&" . "stream") ("const String&" . "typeName"))
//
void ogre_scene_manager_prepare_world_geometry_datastreamptr_string (SceneManager* ogre_scene_manager, DataStreamPtr& stream, const char* typeName)
{
    ogre_scene_manager->prepareWorldGeometry(stream, typeName);
}

// name: "setWorldGeometry"
// type: "void"
// args: (("const String&" . "filename"))
//
void ogre_scene_manager_set_world_geometry_string (SceneManager* ogre_scene_manager, const char* filename)
{
    ogre_scene_manager->setWorldGeometry(filename);
}

// name: "setWorldGeometry"
// type: "void"
// args: (("DataStreamPtr&" . "stream") ("const String&" . "typeName"))
//
void ogre_scene_manager_set_world_geometry_datastreamptr_string (SceneManager* ogre_scene_manager, DataStreamPtr& stream, const char* typeName)
{
    ogre_scene_manager->setWorldGeometry(stream, typeName);
}

// name: "estimateWorldGeometry"
// type: "size_t"
// args: (("const String&" . "filename"))
//
size_t ogre_scene_manager_estimate_world_geometry_string (SceneManager* ogre_scene_manager, const char* filename)
{
    return ogre_scene_manager->estimateWorldGeometry(filename);
}

// name: "estimateWorldGeometry"
// type: "size_t"
// args: (("DataStreamPtr&" . "stream") ("const String&" . "typeName"))
//
size_t ogre_scene_manager_estimate_world_geometry_datastreamptr_string (SceneManager* ogre_scene_manager, DataStreamPtr& stream, const char* typeName)
{
    return ogre_scene_manager->estimateWorldGeometry(stream, typeName);
}

// name: "getSuggestedViewpoint"
// type: "ViewPoint"
// args: (("bool" . "random"))
//
ViewPoint ogre_scene_manager_get_suggested_viewpoint (SceneManager* ogre_scene_manager, bool random)
{
    return ogre_scene_manager->getSuggestedViewpoint(random);
}

// name: "setOption"
// type: "bool"
// args: (("const String&" . "strKey") ("const void*" . "pValue"))
//
bool ogre_scene_manager_set_option (SceneManager* ogre_scene_manager, const char* strKey, const void* pValue)
{
    return ogre_scene_manager->setOption(strKey, pValue);
}

// name: "getOption"
// type: "bool"
// args: (("const String&" . "strKey") ("void*" . "pDestValue"))
//
bool ogre_scene_manager_get_option (SceneManager* ogre_scene_manager, const char* strKey, void* pDestValue)
{
    return ogre_scene_manager->getOption(strKey, pDestValue);
}

// name: "hasOption"
// type: "bool"
// args: (("const String&" . "strKey"))
//
bool ogre_scene_manager_has_option (SceneManager* ogre_scene_manager, const char* strKey)
{
    return ogre_scene_manager->hasOption(strKey);
}

// name: "getOptionValues"
// type: "bool"
// args: (("const String&" . "strKey") ("StringVector&" . "refValueList"))
//
bool ogre_scene_manager_get_option_values (SceneManager* ogre_scene_manager, const char* strKey, StringVector& refValueList)
{
    return ogre_scene_manager->getOptionValues(strKey, refValueList);
}

// name: "getOptionKeys"
// type: "bool"
// args: (("StringVector&" . "refKeys"))
//
bool ogre_scene_manager_get_option_keys (SceneManager* ogre_scene_manager, StringVector& refKeys)
{
    return ogre_scene_manager->getOptionKeys(refKeys);
}

// name: "setSkyPlane"
// type: "void"
// args: (("bool" . "enable") ("const Plane&" . "plane") ("const String&" . "materialName") ("Real" . "scale") ("Real" . "tiling") ("bool" . "drawFirst") ("Real" . "bow") ("int" . "xsegments") ("int" . "ysegments") ("const String&" . "groupName"))
//
void ogre_scene_manager_set_sky_plane (SceneManager* ogre_scene_manager, bool enable, const okraArray4 plane, const char* materialName, Real scale, Real tiling, bool drawFirst, Real bow, int xsegments, int ysegments, const char* groupName)
{
    Plane ogre_plane = Plane(plane[0], plane[1], plane[2], plane[3]);
    ogre_scene_manager->setSkyPlane(enable, ogre_plane, materialName, scale, tiling, drawFirst, bow, xsegments, ysegments, groupName);
}

// name: "isSkyPlaneEnabled"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_is_sky_plane_enabled (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->isSkyPlaneEnabled();
}

// name: "getSkyPlaneNode"
// type: "SceneNode*"
// args: "void"
//
SceneNode* ogre_scene_manager_get_sky_plane_node (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getSkyPlaneNode();
}

// name: "getSkyPlaneGenParameters"
// type: "const SkyPlaneGenParameters&"
// args: "void"
//
SceneManager::SkyPlaneGenParameters ogre_scene_manager_get_sky_plane_gen_parameters (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getSkyPlaneGenParameters();
}

// name: "setSkyBox"
// type: "void"
// args: (("bool" . "enable") ("const String&" . "materialName") ("Real" . "distance") ("bool" . "drawFirst") ("const Quaternion&" . "orientation") ("const String&" . "groupName"))
//
void ogre_scene_manager_set_sky_box (SceneManager* ogre_scene_manager, bool enable, const char* materialName, Real distance, bool drawFirst, const okraArray4 orientation, const char* groupName)
{
    Quaternion ogre_orientation = Quaternion(orientation[0], orientation[1], orientation[2], orientation[3]);
    ogre_scene_manager->setSkyBox(enable, materialName, distance, drawFirst, ogre_orientation, groupName);
}

// name: "isSkyBoxEnabled"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_is_sky_box_enabled (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->isSkyBoxEnabled();
}

// name: "getSkyBoxNode"
// type: "SceneNode*"
// args: "void"
//
SceneNode* ogre_scene_manager_get_sky_box_node (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getSkyBoxNode();
}

// name: "getSkyBoxGenParameters"
// type: "const SkyBoxGenParameters&"
// args: "void"
//
SceneManager::SkyBoxGenParameters ogre_scene_manager_get_sky_box_gen_parameters (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getSkyBoxGenParameters();
}

// name: "setSkyDome"
// type: "void"
// args: (("bool" . "enable") ("const String&" . "materialName") ("Real" . "curvature") ("Real" . "tiling") ("Real" . "distance") ("bool" . "drawFirst") ("const Quaternion&" . "orientation") ("int" . "xsegments") ("int" . "ysegments") ("int" . "ysegments_keep") ("const String&" . "groupName"))
//
void ogre_scene_manager_set_sky_dome (SceneManager* ogre_scene_manager, bool enable, const char* materialName, Real curvature, Real tiling, Real distance, bool drawFirst, const okraArray4 orientation, int xsegments, int ysegments, int ysegments_keep, const char* groupName)
{
    Quaternion ogre_orientation = Quaternion(orientation[0], orientation[1], orientation[2], orientation[3]);
    ogre_scene_manager->setSkyDome(enable, materialName, curvature, tiling, distance, drawFirst, ogre_orientation, xsegments, ysegments, ysegments_keep, groupName);
}

// name: "isSkyDomeEnabled"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_is_sky_dome_enabled (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->isSkyDomeEnabled();
}

// name: "getSkyDomeNode"
// type: "SceneNode*"
// args: "void"
//
SceneNode* ogre_scene_manager_get_sky_dome_node (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getSkyDomeNode();
}

// name: "getSkyDomeGenParameters"
// type: "const SkyDomeGenParameters&"
// args: "void"
//
SceneManager::SkyDomeGenParameters ogre_scene_manager_get_sky_dome_gen_parameters (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getSkyDomeGenParameters();
}

// name: "setFog"
// type: "void"
// args: (("FogMode" . "mode") ("const ColourValue&" . "colour") ("Real" . "expDensity") ("Real" . "linearStart") ("Real" . "linearEnd"))
//
void ogre_scene_manager_set_fog (SceneManager* ogre_scene_manager, FogMode mode, const okraArray4 colour, Real expDensity, Real linearStart, Real linearEnd)
{
    ColourValue ogre_colour = ColourValue(colour[0], colour[1], colour[2], colour[3]);
    ogre_scene_manager->setFog(mode, ogre_colour, expDensity, linearStart, linearEnd);
}

// name: "getFogMode"
// type: "FogMode"
// args: "void"
//
FogMode ogre_scene_manager_get_fog_mode (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getFogMode();
}

// name: "getFogColour"
// type: "const ColourValue&"
// args: "void"
//
void ogre_scene_manager_get_fog_colour (SceneManager* ogre_scene_manager, okraArray4 cv)
{
    ColourValue ogre_cv = ogre_scene_manager->getFogColour();
    cv[0] = ogre_cv.r;
    cv[1] = ogre_cv.g;
    cv[2] = ogre_cv.b;
    cv[3] = ogre_cv.a;
}

// name: "getFogStart"
// type: "Real"
// args: "void"
//
Real ogre_scene_manager_get_fog_start (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getFogStart();
}

// name: "getFogEnd"
// type: "Real"
// args: "void"
//
Real ogre_scene_manager_get_fog_end (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getFogEnd();
}

// name: "getFogDensity"
// type: "Real"
// args: "void"
//
Real ogre_scene_manager_get_fog_density (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getFogDensity();
}

// name: "createBillboardSet"
// type: "BillboardSet*"
// args: (("const String&" . "name") ("unsigned int" . "poolSize"))
//
BillboardSet* ogre_scene_manager_create_billboard_set (SceneManager* ogre_scene_manager, const char* name, unsigned int poolSize)
{
    return ogre_scene_manager->createBillboardSet(name, poolSize);
}

// name: "getBillboardSet"
// type: "BillboardSet*"
// args: (("const String&" . "name"))
//
BillboardSet* ogre_scene_manager_get_billboard_set (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->getBillboardSet(name);
}

// name: "hasBillboardSet"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_scene_manager_has_billboard_set (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->hasBillboardSet(name);
}

// name: "destroyBillboardSet"
// type: "void"
// args: (("BillboardSet*" . "set"))
//
void ogre_scene_manager_destroy_billboard_set_billboardset (SceneManager* ogre_scene_manager, BillboardSet* set)
{
    ogre_scene_manager->destroyBillboardSet(set);
}

// name: "destroyBillboardSet"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_destroy_billboard_set_string (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->destroyBillboardSet(name);
}

// name: "destroyAllBillboardSets"
// type: "void"
// args: "void"
//
void ogre_scene_manager_destroy_all_billboard_sets (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->destroyAllBillboardSets();
}

// name: "setDisplaySceneNodes"
// type: "void"
// args: (("bool" . "display"))
//
void ogre_scene_manager_set_display_scene_nodes (SceneManager* ogre_scene_manager, bool display)
{
    ogre_scene_manager->setDisplaySceneNodes(display);
}

// name: "getDisplaySceneNodes"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_get_display_scene_nodes (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getDisplaySceneNodes();
}

// name: "createAnimation"
// type: "Animation*"
// args: (("const String&" . "name") ("Real" . "length"))
//
Animation* ogre_scene_manager_create_animation (SceneManager* ogre_scene_manager, const char* name, Real length)
{
    return ogre_scene_manager->createAnimation(name, length);
}

// name: "getAnimation"
// type: "Animation*"
// args: (("const String&" . "name"))
//
Animation* ogre_scene_manager_get_animation (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->getAnimation(name);
}

// name: "hasAnimation"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_scene_manager_has_animation (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->hasAnimation(name);
}

// name: "destroyAnimation"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_destroy_animation (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->destroyAnimation(name);
}

// name: "destroyAllAnimations"
// type: "void"
// args: "void"
//
void ogre_scene_manager_destroy_all_animations (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->destroyAllAnimations();
}

// name: "createAnimationState"
// type: "AnimationState*"
// args: (("const String&" . "animName"))
//
AnimationState* ogre_scene_manager_create_animation_state (SceneManager* ogre_scene_manager, const char* animName)
{
    return ogre_scene_manager->createAnimationState(animName);
}

// name: "getAnimationState"
// type: "AnimationState*"
// args: (("const String&" . "animName"))
//
AnimationState* ogre_scene_manager_get_animation_state (SceneManager* ogre_scene_manager, const char* animName)
{
    return ogre_scene_manager->getAnimationState(animName);
}

// name: "hasAnimationState"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_scene_manager_has_animation_state (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->hasAnimationState(name);
}

// name: "destroyAnimationState"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_destroy_animation_state (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->destroyAnimationState(name);
}

// name: "destroyAllAnimationStates"
// type: "void"
// args: "void"
//
void ogre_scene_manager_destroy_all_animation_states (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->destroyAllAnimationStates();
}

// name: "manualRender"
// type: "void"
// args: (("RenderOperation*" . "rend") ("Pass*" . "pass") ("Viewport*" . "vp") ("const Matrix4&" . "worldMatrix") ("const Matrix4&" . "viewMatrix") ("const Matrix4&" . "projMatrix") ("bool" . "doBeginEndFrame"))
//
void ogre_scene_manager_manual_render (SceneManager* ogre_scene_manager, RenderOperation* rend, Pass* pass, Viewport* vp, const okraArray16 worldMatrix, const okraArray16 viewMatrix, const okraArray16 projMatrix, bool doBeginEndFrame)
{
    Matrix4 ogre_worldMatrix = Matrix4(worldMatrix[0], worldMatrix[1], worldMatrix[2], worldMatrix[3], worldMatrix[4], worldMatrix[5], worldMatrix[6], worldMatrix[7], worldMatrix[8], worldMatrix[9], worldMatrix[10], worldMatrix[11], worldMatrix[12], worldMatrix[13], worldMatrix[14], worldMatrix[15]);Matrix4 ogre_viewMatrix = Matrix4(viewMatrix[0], viewMatrix[1], viewMatrix[2], viewMatrix[3], viewMatrix[4], viewMatrix[5], viewMatrix[6], viewMatrix[7], viewMatrix[8], viewMatrix[9], viewMatrix[10], viewMatrix[11], viewMatrix[12], viewMatrix[13], viewMatrix[14], viewMatrix[15]);Matrix4 ogre_projMatrix = Matrix4(projMatrix[0], projMatrix[1], projMatrix[2], projMatrix[3], projMatrix[4], projMatrix[5], projMatrix[6], projMatrix[7], projMatrix[8], projMatrix[9], projMatrix[10], projMatrix[11], projMatrix[12], projMatrix[13], projMatrix[14], projMatrix[15]);
    ogre_scene_manager->manualRender(rend, pass, vp, ogre_worldMatrix, ogre_viewMatrix, ogre_projMatrix, doBeginEndFrame);
}

// name: "getRenderQueue"
// type: "RenderQueue*"
// args: "void"
//
RenderQueue* ogre_scene_manager_get_render_queue (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getRenderQueue();
}

// name: "addRenderQueueListener"
// type: "void"
// args: (("RenderQueueListener*" . "newListener"))
//
void ogre_scene_manager_add_render_queue_listener (SceneManager* ogre_scene_manager, RenderQueueListener* newListener)
{
    ogre_scene_manager->addRenderQueueListener(newListener);
}

// name: "removeRenderQueueListener"
// type: "void"
// args: (("RenderQueueListener*" . "delListener"))
//
void ogre_scene_manager_remove_render_queue_listener (SceneManager* ogre_scene_manager, RenderQueueListener* delListener)
{
    ogre_scene_manager->removeRenderQueueListener(delListener);
}

// name: "addSpecialCaseRenderQueue"
// type: "void"
// args: (("uint8" . "qid"))
//
void ogre_scene_manager_add_special_case_render_queue (SceneManager* ogre_scene_manager, unsigned char qid)
{
    ogre_scene_manager->addSpecialCaseRenderQueue(qid);
}

// name: "removeSpecialCaseRenderQueue"
// type: "void"
// args: (("uint8" . "qid"))
//
void ogre_scene_manager_remove_special_case_render_queue (SceneManager* ogre_scene_manager, unsigned char qid)
{
    ogre_scene_manager->removeSpecialCaseRenderQueue(qid);
}

// name: "clearSpecialCaseRenderQueues"
// type: "void"
// args: "void"
//
void ogre_scene_manager_clear_special_case_render_queues (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->clearSpecialCaseRenderQueues();
}

// name: "setSpecialCaseRenderQueueMode"
// type: "void"
// args: (("SpecialCaseRenderQueueMode" . "mode"))
//
void ogre_scene_manager_set_special_case_render_queue_mode (SceneManager* ogre_scene_manager, SceneManager::SpecialCaseRenderQueueMode mode)
{
    ogre_scene_manager->setSpecialCaseRenderQueueMode(mode);
}

// name: "isRenderQueueToBeProcessed"
// type: "bool"
// args: (("uint8" . "qid"))
//
bool ogre_scene_manager_is_render_queue_to_be_processed (SceneManager* ogre_scene_manager, unsigned char qid)
{
    return ogre_scene_manager->isRenderQueueToBeProcessed(qid);
}

// name: "setWorldGeometryRenderQueue"
// type: "void"
// args: (("uint8" . "qid"))
//
void ogre_scene_manager_set_world_geometry_render_queue (SceneManager* ogre_scene_manager, unsigned char qid)
{
    ogre_scene_manager->setWorldGeometryRenderQueue(qid);
}

// name: "getWorldGeometryRenderQueue"
// type: "uint8"
// args: "void"
//
unsigned char ogre_scene_manager_get_world_geometry_render_queue (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getWorldGeometryRenderQueue();
}

// name: "showBoundingBoxes"
// type: "void"
// args: (("bool" . "bShow"))
//
void ogre_scene_manager_show_bounding_boxes (SceneManager* ogre_scene_manager, bool bShow)
{
    ogre_scene_manager->showBoundingBoxes(bShow);
}

// name: "getShowBoundingBoxes"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_get_show_bounding_boxes (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShowBoundingBoxes();
}

// name: "createAABBQuery"
// type: "AxisAlignedBoxSceneQuery*"
// args: (("const AxisAlignedBox&" . "box") ("unsigned long" . "mask"))
//
AxisAlignedBoxSceneQuery* ogre_scene_manager_create_aabbquery (SceneManager* ogre_scene_manager, const okraArray6 box, unsigned long mask)
{
    AxisAlignedBox ogre_box = AxisAlignedBox(box[0], box[1], box[2], box[3], box[4], box[5]);
    return ogre_scene_manager->createAABBQuery(ogre_box, mask);
}

// name: "createSphereQuery"
// type: "SphereSceneQuery*"
// args: (("const Sphere&" . "sphere") ("unsigned long" . "mask"))
//
SphereSceneQuery* ogre_scene_manager_create_sphere_query (SceneManager* ogre_scene_manager, const okraArray4 sphere, unsigned long mask)
{
    Sphere ogre_sphere = Sphere(Vector3(sphere[0], sphere[1], sphere[2]), sphere[3]);
    return ogre_scene_manager->createSphereQuery(ogre_sphere, mask);
}

// name: "createPlaneBoundedVolumeQuery"
// type: "PlaneBoundedVolumeListSceneQuery*"
// args: (("const PlaneBoundedVolumeList&" . "volumes") ("unsigned long" . "mask"))
//
PlaneBoundedVolumeListSceneQuery* ogre_scene_manager_create_plane_bounded_volume_query (SceneManager* ogre_scene_manager, const PlaneBoundedVolumeList& volumes, unsigned long mask)
{
    return ogre_scene_manager->createPlaneBoundedVolumeQuery(volumes, mask);
}

// name: "createRayQuery"
// type: "RaySceneQuery*"
// args: (("const Ray&" . "ray") ("unsigned long" . "mask"))
//
RaySceneQuery* ogre_scene_manager_create_ray_query (SceneManager* ogre_scene_manager, const Ray& ray, unsigned long mask)
{
    return ogre_scene_manager->createRayQuery(ray, mask);
}

// name: "createIntersectionQuery"
// type: "IntersectionSceneQuery*"
// args: (("unsigned long" . "mask"))
//
IntersectionSceneQuery* ogre_scene_manager_create_intersection_query (SceneManager* ogre_scene_manager, unsigned long mask)
{
    return ogre_scene_manager->createIntersectionQuery(mask);
}

// name: "destroyQuery"
// type: "void"
// args: (("SceneQuery*" . "query"))
//
void ogre_scene_manager_destroy_query (SceneManager* ogre_scene_manager, SceneQuery* query)
{
    ogre_scene_manager->destroyQuery(query);
}

// name: "getCameraIterator"
// type: "CameraIterator"
// args: "void"
//
SceneManager::CameraIterator ogre_scene_manager_get_camera_iterator (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getCameraIterator();
}

// name: "getAnimationIterator"
// type: "AnimationIterator"
// args: "void"
//
SceneManager::AnimationIterator ogre_scene_manager_get_animation_iterator (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getAnimationIterator();
}

// name: "getAnimationStateIterator"
// type: "AnimationStateIterator"
// args: "void"
//
AnimationStateIterator ogre_scene_manager_get_animation_state_iterator (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getAnimationStateIterator();
}

// name: "setShadowTechnique"
// type: "void"
// args: (("ShadowTechnique" . "technique"))
//
void ogre_scene_manager_set_shadow_technique (SceneManager* ogre_scene_manager, ShadowTechnique technique)
{
    ogre_scene_manager->setShadowTechnique(technique);
}

// name: "getShadowTechnique"
// type: "ShadowTechnique"
// args: "void"
//
ShadowTechnique ogre_scene_manager_get_shadow_technique (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShadowTechnique();
}

// name: "setShowDebugShadows"
// type: "void"
// args: (("bool" . "debug"))
//
void ogre_scene_manager_set_show_debug_shadows (SceneManager* ogre_scene_manager, bool debug)
{
    ogre_scene_manager->setShowDebugShadows(debug);
}

// name: "getShowDebugShadows"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_get_show_debug_shadows (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShowDebugShadows();
}

// name: "setShadowColour"
// type: "void"
// args: (("const ColourValue&" . "colour"))
//
void ogre_scene_manager_set_shadow_colour (SceneManager* ogre_scene_manager, const okraArray4 colour)
{
    ColourValue ogre_colour = ColourValue(colour[0], colour[1], colour[2], colour[3]);
    ogre_scene_manager->setShadowColour(ogre_colour);
}

// name: "getShadowColour"
// type: "const ColourValue&"
// args: "void"
//
void ogre_scene_manager_get_shadow_colour (SceneManager* ogre_scene_manager, okraArray4 cv)
{
    ColourValue ogre_cv = ogre_scene_manager->getShadowColour();
    cv[0] = ogre_cv.r;
    cv[1] = ogre_cv.g;
    cv[2] = ogre_cv.b;
    cv[3] = ogre_cv.a;
}

// name: "setShadowDirectionalLightExtrusionDistance"
// type: "void"
// args: (("Real" . "dist"))
//
void ogre_scene_manager_set_shadow_directional_light_extrusion_distance (SceneManager* ogre_scene_manager, Real dist)
{
    ogre_scene_manager->setShadowDirectionalLightExtrusionDistance(dist);
}

// name: "getShadowDirectionalLightExtrusionDistance"
// type: "Real"
// args: "void"
//
Real ogre_scene_manager_get_shadow_directional_light_extrusion_distance (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShadowDirectionalLightExtrusionDistance();
}

// name: "setShadowFarDistance"
// type: "void"
// args: (("Real" . "distance"))
//
void ogre_scene_manager_set_shadow_far_distance (SceneManager* ogre_scene_manager, Real distance)
{
    ogre_scene_manager->setShadowFarDistance(distance);
}

// name: "getShadowFarDistance"
// type: "Real"
// args: "void"
//
Real ogre_scene_manager_get_shadow_far_distance (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShadowFarDistance();
}

// name: "getShadowFarDistanceSquared"
// type: "Real"
// args: "void"
//
Real ogre_scene_manager_get_shadow_far_distance_squared (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShadowFarDistanceSquared();
}

// name: "setShadowIndexBufferSize"
// type: "void"
// args: (("size_t" . "size"))
//
void ogre_scene_manager_set_shadow_index_buffer_size (SceneManager* ogre_scene_manager, size_t size)
{
    ogre_scene_manager->setShadowIndexBufferSize(size);
}

// name: "getShadowIndexBufferSize"
// type: "size_t"
// args: "void"
//
size_t ogre_scene_manager_get_shadow_index_buffer_size (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShadowIndexBufferSize();
}

// name: "setShadowTextureSize"
// type: "void"
// args: (("unsigned short" . "size"))
//
void ogre_scene_manager_set_shadow_texture_size (SceneManager* ogre_scene_manager, unsigned short size)
{
    ogre_scene_manager->setShadowTextureSize(size);
}

// name: "setShadowTextureConfig"
// type: "void"
// args: (("size_t" . "shadowIndex") ("unsigned short" . "width") ("unsigned short" . "height") ("PixelFormat" . "format"))
//
void ogre_scene_manager_set_shadow_texture_config_size_t_unsignedshort_unsignedshort_pixelformat (SceneManager* ogre_scene_manager, size_t shadowIndex, unsigned short width, unsigned short height, PixelFormat format)
{
    ogre_scene_manager->setShadowTextureConfig(shadowIndex, width, height, format);
}

// name: "setShadowTextureConfig"
// type: "void"
// args: (("size_t" . "shadowIndex") ("const ShadowTextureConfig&" . "config"))
//
void ogre_scene_manager_set_shadow_texture_config_size_t_shadowtextureconfig (SceneManager* ogre_scene_manager, size_t shadowIndex, const ShadowTextureConfig& config)
{
    ogre_scene_manager->setShadowTextureConfig(shadowIndex, config);
}

// name: "getShadowTextureConfigIterator"
// type: "ConstShadowTextureConfigIterator"
// args: "void"
//
ConstShadowTextureConfigIterator ogre_scene_manager_get_shadow_texture_config_iterator (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShadowTextureConfigIterator();
}

// name: "setShadowTexturePixelFormat"
// type: "void"
// args: (("PixelFormat" . "fmt"))
//
void ogre_scene_manager_set_shadow_texture_pixel_format (SceneManager* ogre_scene_manager, PixelFormat fmt)
{
    ogre_scene_manager->setShadowTexturePixelFormat(fmt);
}

// name: "setShadowTextureCount"
// type: "void"
// args: (("size_t" . "count"))
//
void ogre_scene_manager_set_shadow_texture_count (SceneManager* ogre_scene_manager, size_t count)
{
    ogre_scene_manager->setShadowTextureCount(count);
}

// name: "getShadowTextureCount"
// type: "size_t"
// args: "void"
//
size_t ogre_scene_manager_get_shadow_texture_count (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShadowTextureCount();
}

// name: "setShadowTextureCountPerLightType"
// type: "void"
// args: (("Light::LightTypes" . "type") ("size_t" . "count"))
//
void ogre_scene_manager_set_shadow_texture_count_per_light_type (SceneManager* ogre_scene_manager, Light::LightTypes type, size_t count)
{
    ogre_scene_manager->setShadowTextureCountPerLightType(type, count);
}

// name: "getShadowTextureCountPerLightType"
// type: "size_t"
// args: (("Light::LightTypes" . "type"))
//
size_t ogre_scene_manager_get_shadow_texture_count_per_light_type (SceneManager* ogre_scene_manager, Light::LightTypes type)
{
    return ogre_scene_manager->getShadowTextureCountPerLightType(type);
}

// name: "setShadowTextureSettings"
// type: "void"
// args: (("unsigned short" . "size") ("unsigned short" . "count") ("PixelFormat" . "fmt"))
//
void ogre_scene_manager_set_shadow_texture_settings (SceneManager* ogre_scene_manager, unsigned short size, unsigned short count, PixelFormat fmt)
{
    ogre_scene_manager->setShadowTextureSettings(size, count, fmt);
}

// name: "getShadowTexture"
// type: "const TexturePtr&"
// args: (("size_t" . "shadowIndex"))
//
const TexturePtr& ogre_scene_manager_get_shadow_texture (SceneManager* ogre_scene_manager, size_t shadowIndex)
{
    return ogre_scene_manager->getShadowTexture(shadowIndex);
}

// name: "setShadowDirLightTextureOffset"
// type: "void"
// args: (("Real" . "offset"))
//
void ogre_scene_manager_set_shadow_dir_light_texture_offset (SceneManager* ogre_scene_manager, Real offset)
{
    ogre_scene_manager->setShadowDirLightTextureOffset(offset);
}

// name: "getShadowDirLightTextureOffset"
// type: "Real"
// args: "void"
//
Real ogre_scene_manager_get_shadow_dir_light_texture_offset (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShadowDirLightTextureOffset();
}

// name: "setShadowTextureFadeStart"
// type: "void"
// args: (("Real" . "fadeStart"))
//
void ogre_scene_manager_set_shadow_texture_fade_start (SceneManager* ogre_scene_manager, Real fadeStart)
{
    ogre_scene_manager->setShadowTextureFadeStart(fadeStart);
}

// name: "setShadowTextureFadeEnd"
// type: "void"
// args: (("Real" . "fadeEnd"))
//
void ogre_scene_manager_set_shadow_texture_fade_end (SceneManager* ogre_scene_manager, Real fadeEnd)
{
    ogre_scene_manager->setShadowTextureFadeEnd(fadeEnd);
}

// name: "setShadowTextureSelfShadow"
// type: "void"
// args: (("bool" . "selfShadow"))
//
void ogre_scene_manager_set_shadow_texture_self_shadow (SceneManager* ogre_scene_manager, bool selfShadow)
{
    ogre_scene_manager->setShadowTextureSelfShadow(selfShadow);
}

// name: "getShadowTextureSelfShadow"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_get_shadow_texture_self_shadow (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShadowTextureSelfShadow();
}

// name: "setShadowTextureCasterMaterial"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_set_shadow_texture_caster_material (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->setShadowTextureCasterMaterial(name);
}

// name: "setShadowTextureReceiverMaterial"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_set_shadow_texture_receiver_material (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->setShadowTextureReceiverMaterial(name);
}

// name: "setShadowCasterRenderBackFaces"
// type: "void"
// args: (("bool" . "bf"))
//
void ogre_scene_manager_set_shadow_caster_render_back_faces (SceneManager* ogre_scene_manager, bool bf)
{
    ogre_scene_manager->setShadowCasterRenderBackFaces(bf);
}

// name: "getShadowCasterRenderBackFaces"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_get_shadow_caster_render_back_faces (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShadowCasterRenderBackFaces();
}

// name: "setShadowCameraSetup"
// type: "void"
// args: (("const ShadowCameraSetupPtr&" . "shadowSetup"))
//
void ogre_scene_manager_set_shadow_camera_setup (SceneManager* ogre_scene_manager, const ShadowCameraSetupPtr& shadowSetup)
{
    ogre_scene_manager->setShadowCameraSetup(shadowSetup);
}

// name: "getShadowCameraSetup"
// type: "const ShadowCameraSetupPtr&"
// args: "void"
//
const ShadowCameraSetupPtr& ogre_scene_manager_get_shadow_camera_setup (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShadowCameraSetup();
}

// name: "setShadowUseInfiniteFarPlane"
// type: "void"
// args: (("bool" . "enable"))
//
void ogre_scene_manager_set_shadow_use_infinite_far_plane (SceneManager* ogre_scene_manager, bool enable)
{
    ogre_scene_manager->setShadowUseInfiniteFarPlane(enable);
}

// name: "isShadowTechniqueStencilBased"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_is_shadow_technique_stencil_based (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->isShadowTechniqueStencilBased();
}

// name: "isShadowTechniqueTextureBased"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_is_shadow_technique_texture_based (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->isShadowTechniqueTextureBased();
}

// name: "isShadowTechniqueModulative"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_is_shadow_technique_modulative (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->isShadowTechniqueModulative();
}

// name: "isShadowTechniqueAdditive"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_is_shadow_technique_additive (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->isShadowTechniqueAdditive();
}

// name: "isShadowTechniqueIntegrated"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_is_shadow_technique_integrated (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->isShadowTechniqueIntegrated();
}

// name: "isShadowTechniqueInUse"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_is_shadow_technique_in_use (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->isShadowTechniqueInUse();
}

// name: "setShadowUseLightClipPlanes"
// type: "void"
// args: (("bool" . "enabled"))
//
void ogre_scene_manager_set_shadow_use_light_clip_planes (SceneManager* ogre_scene_manager, bool enabled)
{
    ogre_scene_manager->setShadowUseLightClipPlanes(enabled);
}

// name: "getShadowUseLightClipPlanes"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_get_shadow_use_light_clip_planes (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getShadowUseLightClipPlanes();
}

// name: "createStaticGeometry"
// type: "StaticGeometry*"
// args: (("const String&" . "name"))
//
StaticGeometry* ogre_scene_manager_create_static_geometry (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->createStaticGeometry(name);
}

// name: "getStaticGeometry"
// type: "StaticGeometry*"
// args: (("const String&" . "name"))
//
StaticGeometry* ogre_scene_manager_get_static_geometry (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->getStaticGeometry(name);
}

// name: "hasStaticGeometry"
// type: "bool"
// args: (("const String&" . "name"))
//
bool ogre_scene_manager_has_static_geometry (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->hasStaticGeometry(name);
}

// name: "destroyStaticGeometry"
// type: "void"
// args: (("StaticGeometry*" . "geom"))
//
void ogre_scene_manager_destroy_static_geometry_staticgeometry (SceneManager* ogre_scene_manager, StaticGeometry* geom)
{
    ogre_scene_manager->destroyStaticGeometry(geom);
}

// name: "destroyStaticGeometry"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_destroy_static_geometry_string (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->destroyStaticGeometry(name);
}

// name: "destroyAllStaticGeometry"
// type: "void"
// args: "void"
//
void ogre_scene_manager_destroy_all_static_geometry (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->destroyAllStaticGeometry();
}

// name: "createInstancedGeometry"
// type: "InstancedGeometry*"
// args: (("const String&" . "name"))
//
InstancedGeometry* ogre_scene_manager_create_instanced_geometry (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->createInstancedGeometry(name);
}

// name: "getInstancedGeometry"
// type: "InstancedGeometry*"
// args: (("const String&" . "name"))
//
InstancedGeometry* ogre_scene_manager_get_instanced_geometry (SceneManager* ogre_scene_manager, const char* name)
{
    return ogre_scene_manager->getInstancedGeometry(name);
}

// name: "destroyInstancedGeometry"
// type: "void"
// args: (("InstancedGeometry*" . "geom"))
//
void ogre_scene_manager_destroy_instanced_geometry_instancedgeometry (SceneManager* ogre_scene_manager, InstancedGeometry* geom)
{
    ogre_scene_manager->destroyInstancedGeometry(geom);
}

// name: "destroyInstancedGeometry"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_scene_manager_destroy_instanced_geometry_string (SceneManager* ogre_scene_manager, const char* name)
{
    ogre_scene_manager->destroyInstancedGeometry(name);
}

// name: "destroyAllInstancedGeometry"
// type: "void"
// args: "void"
//
void ogre_scene_manager_destroy_all_instanced_geometry (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->destroyAllInstancedGeometry();
}

// name: "createMovableObject"
// type: "MovableObject*"
// args: (("const String&" . "name") ("const String&" . "typeName") ("const NameValuePairList*" . "params"))
//
MovableObject* ogre_scene_manager_create_movable_object (SceneManager* ogre_scene_manager, const char* name, const char* typeName, const NameValuePairList* params)
{
    return ogre_scene_manager->createMovableObject(name, typeName, params);
}

// name: "destroyMovableObject"
// type: "void"
// args: (("const String&" . "name") ("const String&" . "typeName"))
//
void ogre_scene_manager_destroy_movable_object_string_string (SceneManager* ogre_scene_manager, const char* name, const char* typeName)
{
    ogre_scene_manager->destroyMovableObject(name, typeName);
}

// name: "destroyMovableObject"
// type: "void"
// args: (("MovableObject*" . "m"))
//
void ogre_scene_manager_destroy_movable_object_movableobject (SceneManager* ogre_scene_manager, MovableObject* m)
{
    ogre_scene_manager->destroyMovableObject(m);
}

// name: "destroyAllMovableObjectsByType"
// type: "void"
// args: (("const String&" . "typeName"))
//
void ogre_scene_manager_destroy_all_movable_objects_by_type (SceneManager* ogre_scene_manager, const char* typeName)
{
    ogre_scene_manager->destroyAllMovableObjectsByType(typeName);
}

// name: "destroyAllMovableObjects"
// type: "void"
// args: "void"
//
void ogre_scene_manager_destroy_all_movable_objects (SceneManager* ogre_scene_manager)
{
    ogre_scene_manager->destroyAllMovableObjects();
}

// name: "getMovableObject"
// type: "MovableObject*"
// args: (("const String&" . "name") ("const String&" . "typeName"))
//
MovableObject* ogre_scene_manager_get_movable_object (SceneManager* ogre_scene_manager, const char* name, const char* typeName)
{
    return ogre_scene_manager->getMovableObject(name, typeName);
}

// name: "hasMovableObject"
// type: "bool"
// args: (("const String&" . "name") ("const String&" . "typeName"))
//
bool ogre_scene_manager_has_movable_object (SceneManager* ogre_scene_manager, const char* name, const char* typeName)
{
    return ogre_scene_manager->hasMovableObject(name, typeName);
}

// name: "getMovableObjectIterator"
// type: "MovableObjectIterator"
// args: (("const String&" . "typeName"))
//
SceneManager::MovableObjectIterator ogre_scene_manager_get_movable_object_iterator (SceneManager* ogre_scene_manager, const char* typeName)
{
    return ogre_scene_manager->getMovableObjectIterator(typeName);
}

// name: "injectMovableObject"
// type: "void"
// args: (("MovableObject*" . "m"))
//
void ogre_scene_manager_inject_movable_object (SceneManager* ogre_scene_manager, MovableObject* m)
{
    ogre_scene_manager->injectMovableObject(m);
}

// name: "extractMovableObject"
// type: "void"
// args: (("const String&" . "name") ("const String&" . "typeName"))
//
void ogre_scene_manager_extract_movable_object_string_string (SceneManager* ogre_scene_manager, const char* name, const char* typeName)
{
    ogre_scene_manager->extractMovableObject(name, typeName);
}

// name: "extractMovableObject"
// type: "void"
// args: (("MovableObject*" . "m"))
//
void ogre_scene_manager_extract_movable_object_movableobject (SceneManager* ogre_scene_manager, MovableObject* m)
{
    ogre_scene_manager->extractMovableObject(m);
}

// name: "extractAllMovableObjectsByType"
// type: "void"
// args: (("const String&" . "typeName"))
//
void ogre_scene_manager_extract_all_movable_objects_by_type (SceneManager* ogre_scene_manager, const char* typeName)
{
    ogre_scene_manager->extractAllMovableObjectsByType(typeName);
}

// name: "setVisibilityMask"
// type: "void"
// args: (("uint32" . "vmask"))
//
void ogre_scene_manager_set_visibility_mask (SceneManager* ogre_scene_manager, unsigned int vmask)
{
    ogre_scene_manager->setVisibilityMask(vmask);
}

// name: "getVisibilityMask"
// type: "uint32"
// args: "void"
//
unsigned int ogre_scene_manager_get_visibility_mask (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getVisibilityMask();
}

// name: "setFindVisibleObjects"
// type: "void"
// args: (("bool" . "find"))
//
void ogre_scene_manager_set_find_visible_objects (SceneManager* ogre_scene_manager, bool find)
{
    ogre_scene_manager->setFindVisibleObjects(find);
}

// name: "getFindVisibleObjects"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_get_find_visible_objects (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getFindVisibleObjects();
}

// name: "setNormaliseNormalsOnScale"
// type: "void"
// args: (("bool" . "n"))
//
void ogre_scene_manager_set_normalise_normals_on_scale (SceneManager* ogre_scene_manager, bool n)
{
    ogre_scene_manager->setNormaliseNormalsOnScale(n);
}

// name: "getNormaliseNormalsOnScale"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_get_normalise_normals_on_scale (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getNormaliseNormalsOnScale();
}

// name: "setFlipCullingOnNegativeScale"
// type: "void"
// args: (("bool" . "n"))
//
void ogre_scene_manager_set_flip_culling_on_negative_scale (SceneManager* ogre_scene_manager, bool n)
{
    ogre_scene_manager->setFlipCullingOnNegativeScale(n);
}

// name: "getFlipCullingOnNegativeScale"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_get_flip_culling_on_negative_scale (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getFlipCullingOnNegativeScale();
}

// name: "getDestinationRenderSystem"
// type: "RenderSystem*"
// args: "void"
//
RenderSystem* ogre_scene_manager_get_destination_render_system (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getDestinationRenderSystem();
}

// name: "getCurrentViewport"
// type: "Viewport*"
// args: "void"
//
Viewport* ogre_scene_manager_get_current_viewport (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getCurrentViewport();
}

// name: "getVisibleObjectsBoundsInfo"
// type: "const VisibleObjectsBoundsInfo&"
// args: (("const Camera*" . "cam"))
//
const VisibleObjectsBoundsInfo& ogre_scene_manager_get_visible_objects_bounds_info (SceneManager* ogre_scene_manager, const Camera* cam)
{
    return ogre_scene_manager->getVisibleObjectsBoundsInfo(cam);
}

// name: "getShadowCasterBoundsInfo"
// type: "const VisibleObjectsBoundsInfo&"
// args: (("const Light*" . "light") ("size_t" . "iteration"))
//
const VisibleObjectsBoundsInfo& ogre_scene_manager_get_shadow_caster_bounds_info (SceneManager* ogre_scene_manager, const Light* light, size_t iteration)
{
    return ogre_scene_manager->getShadowCasterBoundsInfo(light, iteration);
}

// name: "setCameraRelativeRendering"
// type: "void"
// args: (("bool" . "rel"))
//
void ogre_scene_manager_set_camera_relative_rendering (SceneManager* ogre_scene_manager, bool rel)
{
    ogre_scene_manager->setCameraRelativeRendering(rel);
}

// name: "getCameraRelativeRendering"
// type: "bool"
// args: "void"
//
bool ogre_scene_manager_get_camera_relative_rendering (SceneManager* ogre_scene_manager)
{
    return ogre_scene_manager->getCameraRelativeRendering();
}


