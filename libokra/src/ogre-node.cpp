// ogre-node.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-06-19 15:01:31.

#include "Ogre.h"
#include "okra.h"

using namespace Ogre;


// Prototypes

extern "C"
{
    const char* ogre_node_get_name (Node*);
    Node* ogre_node_get_parent (Node*);
    void ogre_node_get_orientation (Node*, okraArray4);
    void ogre_node_set_orientation (Node*, const okraArray4);
    void ogre_node_reset_orientation (Node*);
    void ogre_node_set_position (Node*, const okraArray3);
    void ogre_node_get_position (Node*, okraArray3);
    void ogre_node_set_scale (Node*, const okraArray3);
    void ogre_node_get_scale (Node*, okraArray3);
    void ogre_node_set_inherit_orientation (Node*, bool);
    bool ogre_node_get_inherit_orientation (Node*);
    void ogre_node_set_inherit_scale (Node*, bool);
    bool ogre_node_get_inherit_scale (Node*);
    void ogre_node_scale (Node*, const okraArray3);
    void ogre_node_translate (Node*, const okraArray3, SceneNode::TransformSpace);
    Matrix3 ogre_node_get_local_axes (Node*);
    Node* ogre_node_create_child (Node*, const char*, const okraArray3, const okraArray4);
    void ogre_node_add_child (Node*, Node*);
    unsigned short ogre_node_num_children (Node*);
    Node* ogre_node_get_child (Node*, const char*);
    Node::ChildNodeIterator ogre_node_get_child_iterator (Node*);
    Node* ogre_node_remove_child (Node*, const char*);
    void ogre_node_remove_all_children (Node*);
    const MaterialPtr& ogre_node_get_material (Node*);
    void ogre_node_get_render_operation (Node*, RenderOperation&);
    void ogre_node_get_world_transforms (Node*, Matrix4*);
    void ogre_node_set_initial_state (Node*);
    void ogre_node_reset_to_initial_state (Node*);
    void ogre_node_get_initial_position (Node*, okraArray3);
    void ogre_node_get_initial_orientation (Node*, okraArray4);
    void ogre_node_get_initial_scale (Node*, okraArray3);
    Real ogre_node_get_squared_view_depth (Node*, const Camera*);
    void ogre_node_need_update (Node*, bool);
    void ogre_node_request_update (Node*, Node*, bool);
    void ogre_node_cancel_update (Node*, Node*);
    const LightList& ogre_node_get_lights (Node*);
}


// Functions

// name: "getName"
// type: "const String&"
// args: "void"
//
const char* ogre_node_get_name (Node* ogre_node)
{
    return ogre_node->getName().c_str();
}

// name: "getParent"
// type: "Node*"
// args: "void"
//
Node* ogre_node_get_parent (Node* ogre_node)
{
    return ogre_node->getParent();
}

// name: "getOrientation"
// type: "const Quaternion&"
// args: NIL
//
void ogre_node_get_orientation (Node* ogre_node, okraArray4 q)
{
    Quaternion ogre_q = ogre_node->getOrientation();
    q[0] = ogre_q[0];
    q[1] = ogre_q[1];
    q[2] = ogre_q[2];
    q[3] = ogre_q[3];
}

// name: "setOrientation"
// type: "void"
// args: (("const Quaternion&" . "q"))
//
void ogre_node_set_orientation (Node* ogre_node, const okraArray4 q)
{
    Quaternion ogre_q = Quaternion(q[0], q[1], q[2], q[3]);
    ogre_node->setOrientation(ogre_q);
}

// name: "resetOrientation"
// type: "void"
// args: "void"
//
void ogre_node_reset_orientation (Node* ogre_node)
{
    ogre_node->resetOrientation();
}

// name: "setPosition"
// type: "void"
// args: (("const Vector3&" . "pos"))
//
void ogre_node_set_position (Node* ogre_node, const okraArray3 pos)
{
    Vector3 ogre_pos = Vector3(pos[0], pos[1], pos[2]);
    ogre_node->setPosition(ogre_pos);
}

// name: "getPosition"
// type: "const Vector3&"
// args: "void"
//
void ogre_node_get_position (Node* ogre_node, okraArray3 v)
{
    Vector3 ogre_v = ogre_node->getPosition();
    v[0] = ogre_v[0];
    v[1] = ogre_v[1];
    v[2] = ogre_v[2];
}

// name: "setScale"
// type: "void"
// args: (("const Vector3&" . "scale"))
//
void ogre_node_set_scale (Node* ogre_node, const okraArray3 scale)
{
    Vector3 ogre_scale = Vector3(scale[0], scale[1], scale[2]);
    ogre_node->setScale(ogre_scale);
}

// name: "getScale"
// type: "const Vector3&"
// args: "void"
//
void ogre_node_get_scale (Node* ogre_node, okraArray3 v)
{
    Vector3 ogre_v = ogre_node->getScale();
    v[0] = ogre_v[0];
    v[1] = ogre_v[1];
    v[2] = ogre_v[2];
}

// name: "setInheritOrientation"
// type: "void"
// args: (("bool" . "inherit"))
//
void ogre_node_set_inherit_orientation (Node* ogre_node, bool inherit)
{
    ogre_node->setInheritOrientation(inherit);
}

// name: "getInheritOrientation"
// type: "bool"
// args: "void"
//
bool ogre_node_get_inherit_orientation (Node* ogre_node)
{
    return ogre_node->getInheritOrientation();
}

// name: "setInheritScale"
// type: "void"
// args: (("bool" . "inherit"))
//
void ogre_node_set_inherit_scale (Node* ogre_node, bool inherit)
{
    ogre_node->setInheritScale(inherit);
}

// name: "getInheritScale"
// type: "bool"
// args: "void"
//
bool ogre_node_get_inherit_scale (Node* ogre_node)
{
    return ogre_node->getInheritScale();
}

// name: "scale"
// type: "void"
// args: (("const Vector3&" . "scale"))
//
void ogre_node_scale (Node* ogre_node, const okraArray3 scale)
{
    Vector3 ogre_scale = Vector3(scale[0], scale[1], scale[2]);
    ogre_node->scale(ogre_scale);
}

// name: "translate"
// type: "void"
// args: (("const Vector3&" . "d") ("TransformSpace" . "relativeTo"))
//
void ogre_node_translate (Node* ogre_node, const okraArray3 d, SceneNode::TransformSpace relativeTo)
{
    Vector3 ogre_d = Vector3(d[0], d[1], d[2]);
    ogre_node->translate(ogre_d, relativeTo);
}

// name: "getLocalAxes"
// type: "Matrix3"
// args: "void"
//
Matrix3 ogre_node_get_local_axes (Node* ogre_node)
{
    return ogre_node->getLocalAxes();
}

// name: "createChild"
// type: "Node*"
// args: (("const String&" . "name") ("const Vector3&" . "translate") ("const Quaternion&" . "rotate"))
//
Node* ogre_node_create_child (Node* ogre_node, const char* name, const okraArray3 translate, const okraArray4 rotate)
{
    Vector3 ogre_translate = Vector3(translate[0], translate[1], translate[2]);Quaternion ogre_rotate = Quaternion(rotate[0], rotate[1], rotate[2], rotate[3]);
    return ogre_node->createChild(name, ogre_translate, ogre_rotate);
}

// name: "addChild"
// type: "void"
// args: (("Node*" . "child"))
//
void ogre_node_add_child (Node* ogre_node, Node* child)
{
    ogre_node->addChild(child);
}

// name: "numChildren"
// type: "unsigned short"
// args: "void"
//
unsigned short ogre_node_num_children (Node* ogre_node)
{
    return ogre_node->numChildren();
}

// name: "getChild"
// type: "Node*"
// args: (("const String&" . "name"))
//
Node* ogre_node_get_child (Node* ogre_node, const char* name)
{
    return ogre_node->getChild(name);
}

// name: "getChildIterator"
// type: "ChildNodeIterator"
// args: "void"
//
Node::ChildNodeIterator ogre_node_get_child_iterator (Node* ogre_node)
{
    return ogre_node->getChildIterator();
}

// name: "removeChild"
// type: "Node*"
// args: (("const String&" . "name"))
//
Node* ogre_node_remove_child (Node* ogre_node, const char* name)
{
    return ogre_node->removeChild(name);
}

// name: "removeAllChildren"
// type: "void"
// args: "void"
//
void ogre_node_remove_all_children (Node* ogre_node)
{
    ogre_node->removeAllChildren();
}

// name: "getMaterial"
// type: "const MaterialPtr&"
// args: "void"
//
const MaterialPtr& ogre_node_get_material (Node* ogre_node)
{
    return ogre_node->getMaterial();
}

// name: "getRenderOperation"
// type: "void"
// args: (("RenderOperation&" . "op"))
//
void ogre_node_get_render_operation (Node* ogre_node, RenderOperation& op)
{
    ogre_node->getRenderOperation(op);
}

// name: "getWorldTransforms"
// type: "void"
// args: (("Matrix4*" . "xform"))
//
void ogre_node_get_world_transforms (Node* ogre_node, Matrix4* xform)
{
    ogre_node->getWorldTransforms(xform);
}

// name: "setInitialState"
// type: "void"
// args: "void"
//
void ogre_node_set_initial_state (Node* ogre_node)
{
    ogre_node->setInitialState();
}

// name: "resetToInitialState"
// type: "void"
// args: "void"
//
void ogre_node_reset_to_initial_state (Node* ogre_node)
{
    ogre_node->resetToInitialState();
}

// name: "getInitialPosition"
// type: "const Vector3&"
// args: "void"
//
void ogre_node_get_initial_position (Node* ogre_node, okraArray3 v)
{
    Vector3 ogre_v = ogre_node->getInitialPosition();
    v[0] = ogre_v[0];
    v[1] = ogre_v[1];
    v[2] = ogre_v[2];
}

// name: "getInitialOrientation"
// type: "const Quaternion&"
// args: "void"
//
void ogre_node_get_initial_orientation (Node* ogre_node, okraArray4 q)
{
    Quaternion ogre_q = ogre_node->getInitialOrientation();
    q[0] = ogre_q[0];
    q[1] = ogre_q[1];
    q[2] = ogre_q[2];
    q[3] = ogre_q[3];
}

// name: "getInitialScale"
// type: "const Vector3&"
// args: "void"
//
void ogre_node_get_initial_scale (Node* ogre_node, okraArray3 v)
{
    Vector3 ogre_v = ogre_node->getInitialScale();
    v[0] = ogre_v[0];
    v[1] = ogre_v[1];
    v[2] = ogre_v[2];
}

// name: "getSquaredViewDepth"
// type: "Real"
// args: (("const Camera*" . "cam"))
//
Real ogre_node_get_squared_view_depth (Node* ogre_node, const Camera* cam)
{
    return ogre_node->getSquaredViewDepth(cam);
}

// name: "needUpdate"
// type: "void"
// args: (("bool" . "forceParentUpdate"))
//
void ogre_node_need_update (Node* ogre_node, bool forceParentUpdate)
{
    ogre_node->needUpdate(forceParentUpdate);
}

// name: "requestUpdate"
// type: "void"
// args: (("Node*" . "child") ("bool" . "forceParentUpdate"))
//
void ogre_node_request_update (Node* ogre_node, Node* child, bool forceParentUpdate)
{
    ogre_node->requestUpdate(child, forceParentUpdate);
}

// name: "cancelUpdate"
// type: "void"
// args: (("Node*" . "child"))
//
void ogre_node_cancel_update (Node* ogre_node, Node* child)
{
    ogre_node->cancelUpdate(child);
}

// name: "getLights"
// type: "const LightList&"
// args: "void"
//
const LightList& ogre_node_get_lights (Node* ogre_node)
{
    return ogre_node->getLights();
}


