// ogre-ray-scene-query.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-09-28 14:07:26.

#include "handwritten/okra.h"


// Prototypes

extern "C"
{
    void ogre_ray_scene_query_set_ray (RaySceneQuery*, const Ray&);
    const Ray& ogre_ray_scene_query_get_ray (RaySceneQuery*);
    void ogre_ray_scene_query_set_sort_by_distance (RaySceneQuery*, bool, unsigned short);
    bool ogre_ray_scene_query_get_sort_by_distance (RaySceneQuery*);
    unsigned short ogre_ray_scene_query_get_max_results (RaySceneQuery*);
    RaySceneQueryResult& ogre_ray_scene_query_execute_void (RaySceneQuery*);
    void ogre_ray_scene_query_execute_rayscenequerylistener (RaySceneQuery*, RaySceneQueryListener*);
    RaySceneQueryResult& ogre_ray_scene_query_get_last_results (RaySceneQuery*);
    void ogre_ray_scene_query_clear_results (RaySceneQuery*);
    bool ogre_ray_scene_query_query_result_movableobject_real (RaySceneQuery*, MovableObject*, Real);
    bool ogre_ray_scene_query_query_result_scenequeryworldfragment_real (RaySceneQuery*, SceneQuery::WorldFragment*, Real);
}


// Functions

// name: "setRay"
// type: "void"
// args: (("const Ray&" . "ray"))
//
void ogre_ray_scene_query_set_ray (RaySceneQuery* ogre_ray_scene_query, const Ray& ray)
{
    ogre_ray_scene_query->setRay(ray);
}

// name: "getRay"
// type: "const Ray&"
// args: "void"
//
const Ray& ogre_ray_scene_query_get_ray (RaySceneQuery* ogre_ray_scene_query)
{
    return ogre_ray_scene_query->getRay();
}

// name: "setSortByDistance"
// type: "void"
// args: (("bool" . "sort") ("ushort" . "maxresults"))
//
void ogre_ray_scene_query_set_sort_by_distance (RaySceneQuery* ogre_ray_scene_query, bool sort, unsigned short maxresults)
{
    ogre_ray_scene_query->setSortByDistance(sort, maxresults);
}

// name: "getSortByDistance"
// type: "bool"
// args: "void"
//
bool ogre_ray_scene_query_get_sort_by_distance (RaySceneQuery* ogre_ray_scene_query)
{
    return ogre_ray_scene_query->getSortByDistance();
}

// name: "getMaxResults"
// type: "ushort"
// args: "void"
//
unsigned short ogre_ray_scene_query_get_max_results (RaySceneQuery* ogre_ray_scene_query)
{
    return ogre_ray_scene_query->getMaxResults();
}

// name: "execute"
// type: "RaySceneQueryResult&"
// args: "void"
//
RaySceneQueryResult& ogre_ray_scene_query_execute_void (RaySceneQuery* ogre_ray_scene_query)
{
    return ogre_ray_scene_query->execute();
}

// name: "execute"
// type: "void"
// args: (("RaySceneQueryListener*" . "listener"))
//
void ogre_ray_scene_query_execute_rayscenequerylistener (RaySceneQuery* ogre_ray_scene_query, RaySceneQueryListener* listener)
{
    ogre_ray_scene_query->execute(listener);
}

// name: "getLastResults"
// type: "RaySceneQueryResult&"
// args: "void"
//
RaySceneQueryResult& ogre_ray_scene_query_get_last_results (RaySceneQuery* ogre_ray_scene_query)
{
    return ogre_ray_scene_query->getLastResults();
}

// name: "clearResults"
// type: "void"
// args: "void"
//
void ogre_ray_scene_query_clear_results (RaySceneQuery* ogre_ray_scene_query)
{
    ogre_ray_scene_query->clearResults();
}

// name: "queryResult"
// type: "bool"
// args: (("MovableObject*" . "obj") ("Real" . "distance"))
//
bool ogre_ray_scene_query_query_result_movableobject_real (RaySceneQuery* ogre_ray_scene_query, MovableObject* obj, Real distance)
{
    return ogre_ray_scene_query->queryResult(obj, distance);
}

// name: "queryResult"
// type: "bool"
// args: (("SceneQuery::WorldFragment*" . "fragment") ("Real" . "distance"))
//
bool ogre_ray_scene_query_query_result_scenequeryworldfragment_real (RaySceneQuery* ogre_ray_scene_query, SceneQuery::WorldFragment* fragment, Real distance)
{
    return ogre_ray_scene_query->queryResult(fragment, distance);
}


