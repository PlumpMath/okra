;;;; overlay.lisp
;;;;
;;;; This file has been generated by the Okra Bindings Generator.
;;;; You should not edit this file unless you know what you're doing.
;;;; Any changes you've made directly to this file will not be retained
;;;; when a new instance of this file is generated.
;;;;
;;;; author: Erik Winkels (aerique@xs4all.nl)
;;;;
;;;; See the LICENSE file in the Okra root directory for more info.
;;;;
;;;; This file was generated on: 2009-09-15 10:46:19.

(in-package :okra-bindings)


;;; Class

(defclass overlay (ogre-object)
  ())


;;; Foreign Functions & Methods

;; name: "getName"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_overlay_get_name"
    :string
  (ogre-overlay :pointer))

(defmethod get-name ((this overlay))
  (ogre-overlay-get-name (pointer-to this)))


;; name: "setZOrder"
;; type: "void"
;; args: (("ushort" . "zorder"))
;;
(defcfun "ogre_overlay_set_zorder"
    :void
  (ogre-overlay :pointer)
  (zorder :ushort))

(defmethod set-zorder ((this overlay) zorder)
  (ogre-overlay-set-zorder (pointer-to this) zorder))


;; name: "getZOrder"
;; type: "ushort"
;; args: "void"
;;
(defcfun "ogre_overlay_get_zorder"
    :ushort
  (ogre-overlay :pointer))

(defmethod get-zorder ((this overlay))
  (ogre-overlay-get-zorder (pointer-to this)))


;; name: "isInitialised"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_overlay_is_initialised"
    :boolean
  (ogre-overlay :pointer))

(defmethod is-initialised ((this overlay))
  (ogre-overlay-is-initialised (pointer-to this)))


;; name: "show"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_overlay_show"
    :void
  (ogre-overlay :pointer))

(defmethod show ((this overlay))
  (ogre-overlay-show (pointer-to this)))


;; name: "hide"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_overlay_hide"
    :void
  (ogre-overlay :pointer))

(defmethod hide ((this overlay))
  (ogre-overlay-hide (pointer-to this)))


;; name: "add2D"
;; type: "void"
;; args: (("OverlayContainer*" . "cont"))
;;
(defcfun "ogre_overlay_add2_d"
    :void
  (ogre-overlay :pointer)
  (cont :pointer))

(defmethod add2-d ((this overlay) cont)
  (ogre-overlay-add2-d (pointer-to this) cont))


;; name: "remove2D"
;; type: "void"
;; args: (("OverlayContainer*" . "cont"))
;;
(defcfun "ogre_overlay_remove2_d"
    :void
  (ogre-overlay :pointer)
  (cont :pointer))

(defmethod remove2-d ((this overlay) cont)
  (ogre-overlay-remove2-d (pointer-to this) cont))


;; name: "add3D"
;; type: "void"
;; args: (("SceneNode*" . "node"))
;;
(defcfun "ogre_overlay_add3_d"
    :void
  (ogre-overlay :pointer)
  (node :pointer))

(defmethod add3-d ((this overlay) node)
  (ogre-overlay-add3-d (pointer-to this) node))


;; name: "remove3D"
;; type: "void"
;; args: (("SceneNode*" . "node"))
;;
(defcfun "ogre_overlay_remove3_d"
    :void
  (ogre-overlay :pointer)
  (node :pointer))

(defmethod remove3-d ((this overlay) node)
  (ogre-overlay-remove3-d (pointer-to this) node))


;; name: "clear"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_overlay_clear"
    :void
  (ogre-overlay :pointer))

(defmethod clear ((this overlay))
  (ogre-overlay-clear (pointer-to this)))


;; name: "setScroll"
;; type: "void"
;; args: (("Real" . "x") ("Real" . "y"))
;;
(defcfun "ogre_overlay_set_scroll"
    :void
  (ogre-overlay :pointer)
  (x okra-real)
  (y okra-real))

(defmethod set-scroll ((this overlay) x y)
  (ogre-overlay-set-scroll (pointer-to this) x y))


;; name: "getScrollX"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_overlay_get_scroll_x"
    okra-real
  (ogre-overlay :pointer))

(defmethod get-scroll-x ((this overlay))
  (ogre-overlay-get-scroll-x (pointer-to this)))


;; name: "getScrollY"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_overlay_get_scroll_y"
    okra-real
  (ogre-overlay :pointer))

(defmethod get-scroll-y ((this overlay))
  (ogre-overlay-get-scroll-y (pointer-to this)))


;; name: "scroll"
;; type: "void"
;; args: (("Real" . "xoff") ("Real" . "yoff"))
;;
(defcfun "ogre_overlay_scroll"
    :void
  (ogre-overlay :pointer)
  (xoff okra-real)
  (yoff okra-real))

(defmethod scroll ((this overlay) xoff yoff)
  (ogre-overlay-scroll (pointer-to this) xoff yoff))


;; name: "setRotate"
;; type: "void"
;; args: (("const Radian&" . "angle"))
;;
(defcfun "ogre_overlay_set_rotate"
    :void
  (ogre-overlay :pointer)
  (angle okra-real))

(defmethod set-rotate ((this overlay) angle)
  (ogre-overlay-set-rotate (pointer-to this) angle))


;; name: "getRotate"
;; type: "const Radian&"
;; args: "void"
;;
(defcfun "ogre_overlay_get_rotate"
    okra-real
  (ogre-overlay :pointer))

(defmethod get-rotate ((this overlay))
  (ogre-overlay-get-rotate (pointer-to this)))


;; name: "getScaleX"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_overlay_get_scale_x"
    okra-real
  (ogre-overlay :pointer))

(defmethod get-scale-x ((this overlay))
  (ogre-overlay-get-scale-x (pointer-to this)))


;; name: "getScaleY"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_overlay_get_scale_y"
    okra-real
  (ogre-overlay :pointer))

(defmethod get-scale-y ((this overlay))
  (ogre-overlay-get-scale-y (pointer-to this)))


;; name: "findElementAt"
;; type: "OverlayElement*"
;; args: (("Real" . "x") ("Real" . "y"))
;;
(defcfun "ogre_overlay_find_element_at"
    :pointer
  (ogre-overlay :pointer)
  (x okra-real)
  (y okra-real))

(defmethod find-element-at ((this overlay) x y)
  (ogre-overlay-find-element-at (pointer-to this) x y))


;; name: "get2DElementsIterator"
;; type: "Overlay2DElementsIterator"
;; args: "void"
;;
(defcfun "ogre_overlay_get2_delements_iterator"
    :pointer
  (ogre-overlay :pointer))

(defmethod get2-delements-iterator ((this overlay))
  (ogre-overlay-get2-delements-iterator (pointer-to this)))


;; name: "getOrigin"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_overlay_get_origin"
    :string
  (ogre-overlay :pointer))

(defmethod get-origin ((this overlay))
  (ogre-overlay-get-origin (pointer-to this)))


;;; Overloaded Foreign Functions

;; name: "getChild"
;; type: "OverlayContainer*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_overlay_get_child_string"
    :pointer
  (ogre-overlay :pointer)
  (name :string))


;; name: "isVisible"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_overlay_is_visible_void"
    :boolean
  (ogre-overlay :pointer))


;; name: "rotate"
;; type: "void"
;; args: (("const Radian&" . "angle"))
;;
(defcfun "ogre_overlay_rotate_radian"
    :void
  (ogre-overlay :pointer)
  (angle okra-real))


;; name: "setScale"
;; type: "void"
;; args: (("Real" . "x") ("Real" . "y"))
;;
(defcfun "ogre_overlay_set_scale_real_real"
    :void
  (ogre-overlay :pointer)
  (x okra-real)
  (y okra-real))


;;; Methods for Overloaded Foreign Functions

(defmethod rotate ((this overlay) &optional (arg0 nil) (arg1 nil) (arg2 nil))
  (declare (ignore arg1 arg2))
  (cond
    ((and (typep arg0 'real))
     (ogre-overlay-rotate-radian (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod is-visible ((this overlay) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 'null) (typep arg1 'null))
     (ogre-overlay-is-visible-void (pointer-to this)))
    (t (error "Overloaded method not defined for this class."))))


(defmethod set-scale ((this overlay) &optional (arg0 nil) (arg1 nil) (arg2 nil))
  (declare (ignore arg2))
  (cond
    ((and (typep arg0 'real) (typep arg1 'real))
     (ogre-overlay-set-scale-real-real (pointer-to this) arg0 arg1))
    (t (error "Overloaded method not defined for this class."))))


(defmethod get-child ((this overlay) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-overlay-get-child-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))



