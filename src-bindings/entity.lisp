;;;; entity.lisp
;;;;
;;;; This file has been generated by the Okra Bindings Generator.
;;;; You should not edit this file unless you know what you're doing.
;;;; Any changes you've made directly to this file will not be retained
;;;; when a new instance of this file is generated.
;;;;
;;;; author: Erik Winkels (aerique@xs4all.nl)
;;;;
;;;; See the LICENSE file in the Okra root directory for more info.
;;;;
;;;; This file was generated on: 2009-09-15 10:46:19.

(in-package :okra-bindings)


;;; Class

(defclass entity (movable-object)
  ())


;;; Foreign Functions & Methods

;; name: "getMesh"
;; type: "const MeshPtr&"
;; args: "void"
;;
(defcfun "ogre_entity_get_mesh"
    :pointer
  (ogre-entity :pointer))

(defmethod get-mesh ((this entity))
  (ogre-entity-get-mesh (pointer-to this)))


;; name: "getNumSubEntities"
;; type: "unsigned int"
;; args: "void"
;;
(defcfun "ogre_entity_get_num_sub_entities"
    :unsigned-int
  (ogre-entity :pointer))

(defmethod get-num-sub-entities ((this entity))
  (ogre-entity-get-num-sub-entities (pointer-to this)))


;; name: "clone"
;; type: "Entity*"
;; args: (("const String&" . "newName"))
;;
(defcfun "ogre_entity_clone"
    :pointer
  (ogre-entity :pointer)
  (new-name :string))

(defmethod clone ((this entity) new-name)
  (ogre-entity-clone (pointer-to this) new-name))


;; name: "setMaterial"
;; type: "void"
;; args: (("const MaterialPtr&" . "material"))
;;
(defcfun "ogre_entity_set_material"
    :void
  (ogre-entity :pointer)
  (material :pointer))

(defmethod set-material ((this entity) material)
  (ogre-entity-set-material (pointer-to this) material))


;; name: "setRenderQueueGroup"
;; type: "void"
;; args: (("uint8" . "queueID"))
;;
(defcfun "ogre_entity_set_render_queue_group"
    :void
  (ogre-entity :pointer)
  (queue-id :uint8))

(defmethod set-render-queue-group ((this entity) queue-id)
  (ogre-entity-set-render-queue-group (pointer-to this) queue-id))


;; name: "getBoundingBox"
;; type: "const AxisAlignedBox&"
;; args: "void"
;;
(defcfun "ogre_entity_get_bounding_box"
    :void
  (ogre-entity :pointer)
  (array6 :pointer))

(defmethod get-bounding-box ((this entity))
  (with-foreign-object (array 'okra-real 6)
    (ogre-entity-get-bounding-box (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3)
            (mem-aref array 'okra-real 4) (mem-aref array 'okra-real 5))))


;; name: "getChildObjectsBoundingBox"
;; type: "AxisAlignedBox"
;; args: "void"
;;
(defcfun "ogre_entity_get_child_objects_bounding_box"
    :void
  (ogre-entity :pointer)
  (array6 :pointer))

(defmethod get-child-objects-bounding-box ((this entity))
  (with-foreign-object (array 'okra-real 6)
    (ogre-entity-get-child-objects-bounding-box (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3)
            (mem-aref array 'okra-real 4) (mem-aref array 'okra-real 5))))


;; name: "getMovableType"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_entity_get_movable_type"
    :string
  (ogre-entity :pointer))

(defmethod get-movable-type ((this entity))
  (ogre-entity-get-movable-type (pointer-to this)))


;; name: "getAnimationState"
;; type: "AnimationState*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_entity_get_animation_state"
    :pointer
  (ogre-entity :pointer)
  (name :string))

(defmethod get-animation-state ((this entity) name)
  (ogre-entity-get-animation-state (pointer-to this) name))


;; name: "getAllAnimationStates"
;; type: "AnimationStateSet*"
;; args: "void"
;;
(defcfun "ogre_entity_get_all_animation_states"
    :pointer
  (ogre-entity :pointer))

(defmethod get-all-animation-states ((this entity))
  (ogre-entity-get-all-animation-states (pointer-to this)))


;; name: "setDisplaySkeleton"
;; type: "void"
;; args: (("bool" . "display"))
;;
(defcfun "ogre_entity_set_display_skeleton"
    :void
  (ogre-entity :pointer)
  (display :boolean))

(defmethod set-display-skeleton ((this entity) display)
  (ogre-entity-set-display-skeleton (pointer-to this) display))


;; name: "getDisplaySkeleton"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_entity_get_display_skeleton"
    :boolean
  (ogre-entity :pointer))

(defmethod get-display-skeleton ((this entity))
  (ogre-entity-get-display-skeleton (pointer-to this)))


;; name: "getManualLodLevel"
;; type: "Entity*"
;; args: (("size_t" . "index"))
;;
(defcfun "ogre_entity_get_manual_lod_level"
    :pointer
  (ogre-entity :pointer)
  (index :unsigned-int))

(defmethod get-manual-lod-level ((this entity) index)
  (ogre-entity-get-manual-lod-level (pointer-to this) index))


;; name: "getNumManualLodLevels"
;; type: "size_t"
;; args: "void"
;;
(defcfun "ogre_entity_get_num_manual_lod_levels"
    :unsigned-int
  (ogre-entity :pointer))

(defmethod get-num-manual-lod-levels ((this entity))
  (ogre-entity-get-num-manual-lod-levels (pointer-to this)))


;; name: "getCurrentLodIndex"
;; type: "ushort"
;; args: "void"
;;
(defcfun "ogre_entity_get_current_lod_index"
    :ushort
  (ogre-entity :pointer))

(defmethod get-current-lod-index ((this entity))
  (ogre-entity-get-current-lod-index (pointer-to this)))


;; name: "setMeshLodBias"
;; type: "void"
;; args: (("Real" . "factor") ("ushort" . "maxDetailIndex") ("ushort" . "minDetailIndex"))
;;
(defcfun "ogre_entity_set_mesh_lod_bias"
    :void
  (ogre-entity :pointer)
  (factor okra-real)
  (max-detail-index :ushort)
  (min-detail-index :ushort))

(defmethod set-mesh-lod-bias ((this entity) factor max-detail-index min-detail-index)
  (ogre-entity-set-mesh-lod-bias (pointer-to this) factor max-detail-index min-detail-index))


;; name: "setMaterialLodBias"
;; type: "void"
;; args: (("Real" . "factor") ("ushort" . "maxDetailIndex") ("ushort" . "minDetailIndex"))
;;
(defcfun "ogre_entity_set_material_lod_bias"
    :void
  (ogre-entity :pointer)
  (factor okra-real)
  (max-detail-index :ushort)
  (min-detail-index :ushort))

(defmethod set-material-lod-bias ((this entity) factor max-detail-index min-detail-index)
  (ogre-entity-set-material-lod-bias (pointer-to this) factor max-detail-index min-detail-index))


;; name: "setPolygonModeOverrideable"
;; type: "void"
;; args: (("bool" . "PolygonModeOverrideable"))
;;
(defcfun "ogre_entity_set_polygon_mode_overrideable"
    :void
  (ogre-entity :pointer)
  (polygon-mode-overrideable :boolean))

(defmethod set-polygon-mode-overrideable ((this entity) polygon-mode-overrideable)
  (ogre-entity-set-polygon-mode-overrideable (pointer-to this) polygon-mode-overrideable))


;; name: "attachObjectToBone"
;; type: "TagPoint*"
;; args: (("const String&" . "boneName") ("MovableObject*" . "pMovable") ("const Quaternion&" . "offsetOrientation") ("const Vector3&" . "offsetPosition"))
;;
(defcfun "ogre_entity_attach_object_to_bone"
    :pointer
  (ogre-entity :pointer)
  (bone-name :string)
  (pmovable :pointer)
  (offset-orientation okra-array4)
  (offset-position okra-array3))

(defmethod attach-object-to-bone ((this entity) bone-name pmovable offset-orientation offset-position)
  (ogre-entity-attach-object-to-bone (pointer-to this) bone-name pmovable offset-orientation offset-position))


;; name: "detachAllObjectsFromBone"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_entity_detach_all_objects_from_bone"
    :void
  (ogre-entity :pointer))

(defmethod detach-all-objects-from-bone ((this entity))
  (ogre-entity-detach-all-objects-from-bone (pointer-to this)))


;; name: "getAttachedObjectIterator"
;; type: "ChildObjectListIterator"
;; args: "void"
;;
(defcfun "ogre_entity_get_attached_object_iterator"
    :pointer
  (ogre-entity :pointer))

(defmethod get-attached-object-iterator ((this entity))
  (ogre-entity-get-attached-object-iterator (pointer-to this)))


;; name: "getBoundingRadius"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_entity_get_bounding_radius"
    okra-real
  (ogre-entity :pointer))

(defmethod get-bounding-radius ((this entity))
  (ogre-entity-get-bounding-radius (pointer-to this)))


;; name: "getWorldBoundingBox"
;; type: "const AxisAlignedBox&"
;; args: (("bool" . "derive"))
;;
(defcfun "ogre_entity_get_world_bounding_box"
    :void
  (ogre-entity :pointer)
  (array6 :pointer)
  (derive :boolean))

(defmethod get-world-bounding-box ((this entity) derive)
  (with-foreign-object (array 'okra-real 6)
    (ogre-entity-get-world-bounding-box (pointer-to this) array derive)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3)
            (mem-aref array 'okra-real 4) (mem-aref array 'okra-real 5))))


;; name: "getWorldBoundingSphere"
;; type: "const Sphere&"
;; args: (("bool" . "derive"))
;;
(defcfun "ogre_entity_get_world_bounding_sphere"
    :void
  (ogre-entity :pointer)
  (array4 :pointer)
  (derive :boolean))

(defmethod get-world-bounding-sphere ((this entity) derive)
  (with-foreign-object (array 'okra-real 4)
    (ogre-entity-get-world-bounding-sphere (pointer-to this) array derive)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3))))


;; name: "getEdgeList"
;; type: "EdgeData*"
;; args: "void"
;;
(defcfun "ogre_entity_get_edge_list"
    :pointer
  (ogre-entity :pointer))

(defmethod get-edge-list ((this entity))
  (ogre-entity-get-edge-list (pointer-to this)))


;; name: "hasEdgeList"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_entity_has_edge_list"
    :boolean
  (ogre-entity :pointer))

(defmethod has-edge-list ((this entity))
  (ogre-entity-has-edge-list (pointer-to this)))


;; name: "getShadowVolumeRenderableIterator"
;; type: "ShadowRenderableListIterator"
;; args: (("ShadowTechnique" . "shadowTechnique") ("const Light*" . "light") ("HardwareIndexBufferSharedPtr*" . "indexBuffer") ("bool" . "extrudeVertices") ("Real" . "extrusionDistance") ("unsigned long" . "flags"))
;;
(defcfun "ogre_entity_get_shadow_volume_renderable_iterator"
    :pointer
  (ogre-entity :pointer)
  (shadow-technique shadow-technique)
  (light :pointer)
  (index-buffer :pointer)
  (extrude-vertices :boolean)
  (extrusion-distance okra-real)
  (flags :unsigned-long))

(defmethod get-shadow-volume-renderable-iterator ((this entity) shadow-technique light index-buffer extrude-vertices extrusion-distance flags)
  (ogre-entity-get-shadow-volume-renderable-iterator (pointer-to this) shadow-technique light index-buffer extrude-vertices extrusion-distance flags))


;; name: "hasSkeleton"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_entity_has_skeleton"
    :boolean
  (ogre-entity :pointer))

(defmethod has-skeleton ((this entity))
  (ogre-entity-has-skeleton (pointer-to this)))


;; name: "getSkeleton"
;; type: "SkeletonInstance*"
;; args: "void"
;;
(defcfun "ogre_entity_get_skeleton"
    :pointer
  (ogre-entity :pointer))

(defmethod get-skeleton ((this entity))
  (ogre-entity-get-skeleton (pointer-to this)))


;; name: "isHardwareAnimationEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_entity_is_hardware_animation_enabled"
    :boolean
  (ogre-entity :pointer))

(defmethod is-hardware-animation-enabled ((this entity))
  (ogre-entity-is-hardware-animation-enabled (pointer-to this)))


;; name: "getSoftwareAnimationRequests"
;; type: "int"
;; args: "void"
;;
(defcfun "ogre_entity_get_software_animation_requests"
    :int
  (ogre-entity :pointer))

(defmethod get-software-animation-requests ((this entity))
  (ogre-entity-get-software-animation-requests (pointer-to this)))


;; name: "getSoftwareAnimationNormalsRequests"
;; type: "int"
;; args: "void"
;;
(defcfun "ogre_entity_get_software_animation_normals_requests"
    :int
  (ogre-entity :pointer))

(defmethod get-software-animation-normals-requests ((this entity))
  (ogre-entity-get-software-animation-normals-requests (pointer-to this)))


;; name: "addSoftwareAnimationRequest"
;; type: "void"
;; args: (("bool" . "normalsAlso"))
;;
(defcfun "ogre_entity_add_software_animation_request"
    :void
  (ogre-entity :pointer)
  (normals-also :boolean))

(defmethod add-software-animation-request ((this entity) normals-also)
  (ogre-entity-add-software-animation-request (pointer-to this) normals-also))


;; name: "removeSoftwareAnimationRequest"
;; type: "void"
;; args: (("bool" . "normalsAlso"))
;;
(defcfun "ogre_entity_remove_software_animation_request"
    :void
  (ogre-entity :pointer)
  (normals-also :boolean))

(defmethod remove-software-animation-request ((this entity) normals-also)
  (ogre-entity-remove-software-animation-request (pointer-to this) normals-also))


;; name: "shareSkeletonInstanceWith"
;; type: "void"
;; args: (("Entity*" . "entity"))
;;
(defcfun "ogre_entity_share_skeleton_instance_with"
    :void
  (ogre-entity :pointer)
  (entity :pointer))

(defmethod share-skeleton-instance-with ((this entity) entity)
  (ogre-entity-share-skeleton-instance-with (pointer-to this) entity))


;; name: "hasVertexAnimation"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_entity_has_vertex_animation"
    :boolean
  (ogre-entity :pointer))

(defmethod has-vertex-animation ((this entity))
  (ogre-entity-has-vertex-animation (pointer-to this)))


;; name: "stopSharingSkeletonInstance"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_entity_stop_sharing_skeleton_instance"
    :void
  (ogre-entity :pointer))

(defmethod stop-sharing-skeleton-instance ((this entity))
  (ogre-entity-stop-sharing-skeleton-instance (pointer-to this)))


;; name: "sharesSkeletonInstance"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_entity_shares_skeleton_instance"
    :boolean
  (ogre-entity :pointer))

(defmethod shares-skeleton-instance ((this entity))
  (ogre-entity-shares-skeleton-instance (pointer-to this)))


;; name: "getSkeletonInstanceSharingSet"
;; type: "const EntitySet*"
;; args: "void"
;;
(defcfun "ogre_entity_get_skeleton_instance_sharing_set"
    :pointer
  (ogre-entity :pointer))

(defmethod get-skeleton-instance-sharing-set ((this entity))
  (ogre-entity-get-skeleton-instance-sharing-set (pointer-to this)))


;; name: "refreshAvailableAnimationState"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_entity_refresh_available_animation_state"
    :void
  (ogre-entity :pointer))

(defmethod refresh-available-animation-state ((this entity))
  (ogre-entity-refresh-available-animation-state (pointer-to this)))


;; name: "getTypeFlags"
;; type: "uint32"
;; args: "void"
;;
(defcfun "ogre_entity_get_type_flags"
    :uint32
  (ogre-entity :pointer))

(defmethod get-type-flags ((this entity))
  (ogre-entity-get-type-flags (pointer-to this)))


;; name: "getVertexDataForBinding"
;; type: "VertexData*"
;; args: "void"
;;
(defcfun "ogre_entity_get_vertex_data_for_binding"
    :pointer
  (ogre-entity :pointer))

(defmethod get-vertex-data-for-binding ((this entity))
  (ogre-entity-get-vertex-data-for-binding (pointer-to this)))


;; name: "chooseVertexDataForBinding"
;; type: "VertexDataBindChoice"
;; args: (("bool" . "hasVertexAnim"))
;;
(defcfun "ogre_entity_choose_vertex_data_for_binding"
    vertex-data-bind-choice
  (ogre-entity :pointer)
  (has-vertex-anim :boolean))

(defmethod choose-vertex-data-for-binding ((this entity) has-vertex-anim)
  (ogre-entity-choose-vertex-data-for-binding (pointer-to this) has-vertex-anim))


;; name: "isInitialised"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_entity_is_initialised"
    :boolean
  (ogre-entity :pointer))

(defmethod is-initialised ((this entity))
  (ogre-entity-is-initialised (pointer-to this)))


;; name: "backgroundLoadingComplete"
;; type: "void"
;; args: (("Resource*" . "res"))
;;
(defcfun "ogre_entity_background_loading_complete"
    :void
  (ogre-entity :pointer)
  (res :pointer))

(defmethod background-loading-complete ((this entity) res)
  (ogre-entity-background-loading-complete (pointer-to this) res))


;; name: "visitRenderables"
;; type: "void"
;; args: (("Renderable::Visitor*" . "visitor") ("bool" . "debugRenderables"))
;;
(defcfun "ogre_entity_visit_renderables"
    :void
  (ogre-entity :pointer)
  (visitor :pointer)
  (debug-renderables :boolean))

(defmethod visit-renderables ((this entity) visitor debug-renderables)
  (ogre-entity-visit-renderables (pointer-to this) visitor debug-renderables))


;;; Overloaded Foreign Functions

;; name: "getSubEntity"
;; type: "SubEntity*"
;; args: (("unsigned int" . "index"))
;;
(defcfun "ogre_entity_get_sub_entity_unsignedint"
    :pointer
  (ogre-entity :pointer)
  (index :unsigned-int))


;; name: "getSubEntity"
;; type: "SubEntity*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_entity_get_sub_entity_string"
    :pointer
  (ogre-entity :pointer)
  (name :string))


;; name: "setMaterialName"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_entity_set_material_name_string"
    :void
  (ogre-entity :pointer)
  (name :string))


;; name: "detachObjectFromBone"
;; type: "MovableObject*"
;; args: (("const String&" . "movableName"))
;;
(defcfun "ogre_entity_detach_object_from_bone_string"
    :pointer
  (ogre-entity :pointer)
  (movable-name :string))


;; name: "detachObjectFromBone"
;; type: "void"
;; args: (("MovableObject*" . "obj"))
;;
(defcfun "ogre_entity_detach_object_from_bone_movableobject"
    :void
  (ogre-entity :pointer)
  (obj :pointer))


;;; Methods for Overloaded Foreign Functions

(defmethod get-sub-entity ((this entity) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-entity-get-sub-entity-string (pointer-to this) arg0))
    ((and (typep arg0 'integer))
     (ogre-entity-get-sub-entity-unsignedint (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod set-material-name ((this entity) &optional (arg0 nil) (arg1 nil))
  (declare (ignore arg1))
  (cond
    ((and (typep arg0 'string))
     (ogre-entity-set-material-name-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod detach-object-from-bone ((this entity) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-entity-detach-object-from-bone-movableobject (pointer-to this) arg0))
    ((and (typep arg0 'string))
     (ogre-entity-detach-object-from-bone-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))



