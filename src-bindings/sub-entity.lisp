;;;; sub-entity.lisp
;;;;
;;;; This file has been generated by the Okra Bindings Generator.
;;;; You should not edit this file unless you know what you're doing.
;;;; Any changes you've made directly to this file will not be retained
;;;; when a new instance of this file is generated.
;;;;
;;;; author: Erik Winkels (aerique@xs4all.nl)
;;;;
;;;; See the LICENSE file in the Okra root directory for more info.
;;;;
;;;; This file was generated on: 2009-10-28 16:11:12.

(in-package :okra-bindings)


;;; Class

(defclass sub-entity (ogre-object)
  ())


;;; Foreign Functions & Methods

;; name: "getMaterialName"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_sub_entity_get_material_name"
    :string
  (ogre-sub-entity :pointer))

(defmethod get-material-name ((this sub-entity))
  (ogre-sub-entity-get-material-name (pointer-to this)))


;; name: "setMaterial"
;; type: "void"
;; args: (("const MaterialPtr&" . "material"))
;;
(defcfun "ogre_sub_entity_set_material"
    :void
  (ogre-sub-entity :pointer)
  (material :pointer))

(defmethod set-material ((this sub-entity) material)
  (ogre-sub-entity-set-material (pointer-to this) material))


;; name: "getParent"
;; type: "Entity*"
;; args: "void"
;;
(defcfun "ogre_sub_entity_get_parent"
    :pointer
  (ogre-sub-entity :pointer))

(defmethod get-parent ((this sub-entity))
  (ogre-sub-entity-get-parent (pointer-to this)))


;; name: "getMaterial"
;; type: "const MaterialPtr&"
;; args: "void"
;;
(defcfun "ogre_sub_entity_get_material"
    :pointer
  (ogre-sub-entity :pointer))

(defmethod get-material ((this sub-entity))
  (ogre-sub-entity-get-material (pointer-to this)))


;; name: "getTechnique"
;; type: "Technique*"
;; args: "void"
;;
(defcfun "ogre_sub_entity_get_technique"
    :pointer
  (ogre-sub-entity :pointer))

(defmethod get-technique ((this sub-entity))
  (ogre-sub-entity-get-technique (pointer-to this)))


;; name: "getRenderOperation"
;; type: "void"
;; args: (("RenderOperation&" . "op"))
;;
(defcfun "ogre_sub_entity_get_render_operation"
    :void
  (ogre-sub-entity :pointer)
  (op :pointer))

(defmethod get-render-operation ((this sub-entity) op)
  (ogre-sub-entity-get-render-operation (pointer-to this) op))


;; name: "getWorldTransforms"
;; type: "void"
;; args: (("Matrix4*" . "xform"))
;;
(defcfun "ogre_sub_entity_get_world_transforms"
    :void
  (ogre-sub-entity :pointer)
  (xform :pointer))

(defmethod get-world-transforms ((this sub-entity) xform)
  (ogre-sub-entity-get-world-transforms (pointer-to this) xform))


;; name: "getNumWorldTransforms"
;; type: "unsigned short"
;; args: "void"
;;
(defcfun "ogre_sub_entity_get_num_world_transforms"
    :unsigned-short
  (ogre-sub-entity :pointer))

(defmethod get-num-world-transforms ((this sub-entity))
  (ogre-sub-entity-get-num-world-transforms (pointer-to this)))


;; name: "getSquaredViewDepth"
;; type: "Real"
;; args: (("const Camera*" . "cam"))
;;
(defcfun "ogre_sub_entity_get_squared_view_depth"
    okra-real
  (ogre-sub-entity :pointer)
  (cam :pointer))

(defmethod get-squared-view-depth ((this sub-entity) cam)
  (ogre-sub-entity-get-squared-view-depth (pointer-to this) cam))


;; name: "getLights"
;; type: "const LightList&"
;; args: "void"
;;
(defcfun "ogre_sub_entity_get_lights"
    :pointer
  (ogre-sub-entity :pointer))

(defmethod get-lights ((this sub-entity))
  (ogre-sub-entity-get-lights (pointer-to this)))


;; name: "getCastsShadows"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_sub_entity_get_casts_shadows"
    :boolean
  (ogre-sub-entity :pointer))

(defmethod get-casts-shadows ((this sub-entity))
  (ogre-sub-entity-get-casts-shadows (pointer-to this)))


;; name: "getVertexDataForBinding"
;; type: "VertexData*"
;; args: "void"
;;
(defcfun "ogre_sub_entity_get_vertex_data_for_binding"
    :pointer
  (ogre-sub-entity :pointer))

(defmethod get-vertex-data-for-binding ((this sub-entity))
  (ogre-sub-entity-get-vertex-data-for-binding (pointer-to this)))


;;; Overloaded Foreign Functions

;; name: "setMaterialName"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_sub_entity_set_material_name_string"
    :void
  (ogre-sub-entity :pointer)
  (name :string))


;; name: "setVisible"
;; type: "void"
;; args: (("bool" . "visible"))
;;
(defcfun "ogre_sub_entity_set_visible_bool"
    :void
  (ogre-sub-entity :pointer)
  (visible :boolean))


;; name: "isVisible"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_sub_entity_is_visible_void"
    :boolean
  (ogre-sub-entity :pointer))


;; name: "getSubMesh"
;; type: "SubMesh*"
;; args: "void"
;;
(defcfun "ogre_sub_entity_get_sub_mesh_void"
    :pointer
  (ogre-sub-entity :pointer))


;;; Methods for Overloaded Foreign Functions

(defmethod is-visible ((this sub-entity) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 'null) (typep arg1 'null))
     (ogre-sub-entity-is-visible-void (pointer-to this)))
    (t (error "Overloaded method not defined for this class."))))


(defmethod set-material-name ((this sub-entity) &optional (arg0 nil) (arg1 nil))
  (declare (ignore arg1))
  (cond
    ((and (typep arg0 'string))
     (ogre-sub-entity-set-material-name-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod set-visible ((this sub-entity) &optional (arg0 nil) (arg1 nil))
  (declare (ignore arg1))
  (cond
    ((and (typep arg0 'boolean))
     (ogre-sub-entity-set-visible-bool (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod get-sub-mesh ((this sub-entity) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'null))
     (ogre-sub-entity-get-sub-mesh-void (pointer-to this)))
    (t (error "Overloaded method not defined for this class."))))



