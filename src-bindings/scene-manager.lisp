;;;; scene-manager.lisp
;;;;
;;;; This file has been generated by the Okra Bindings Generator.
;;;; You should not edit this file unless you know what you're doing.
;;;; Any changes you've made directly to this file will not be retained
;;;; when a new instance of this file is generated.
;;;;
;;;; author: Erik Winkels (aerique@xs4all.nl)
;;;;
;;;; See the LICENSE file in the Okra root directory for more info.
;;;;
;;;; This file was generated on: 2009-08-07 15:52:10.

(in-package :okra-bindings)


;;; Class

(defclass scene-manager (ogre-object)
  ())


;;; Foreign Functions & Methods

;; name: "getName"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_name"
    :string
  (ogre-scene-manager :pointer))

(defmethod get-name ((this scene-manager))
  (ogre-scene-manager-get-name (pointer-to this)))


;; name: "getTypeName"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_type_name"
    :string
  (ogre-scene-manager :pointer))

(defmethod get-type-name ((this scene-manager))
  (ogre-scene-manager-get-type-name (pointer-to this)))


;; name: "createCamera"
;; type: "Camera*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_create_camera"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod create-camera ((this scene-manager) name)
  (ogre-scene-manager-create-camera (pointer-to this) name))


;; name: "hasCamera"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_has_camera"
    :boolean
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod has-camera ((this scene-manager) name)
  (ogre-scene-manager-has-camera (pointer-to this) name))


;; name: "destroyAllCameras"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_destroy_all_cameras"
    :void
  (ogre-scene-manager :pointer))

(defmethod destroy-all-cameras ((this scene-manager))
  (ogre-scene-manager-destroy-all-cameras (pointer-to this)))


;; name: "createLight"
;; type: "Light*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_create_light"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod create-light ((this scene-manager) name)
  (ogre-scene-manager-create-light (pointer-to this) name))


;; name: "getLight"
;; type: "Light*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_get_light"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod get-light ((this scene-manager) name)
  (ogre-scene-manager-get-light (pointer-to this) name))


;; name: "hasLight"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_has_light"
    :boolean
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod has-light ((this scene-manager) name)
  (ogre-scene-manager-has-light (pointer-to this) name))


;; name: "getLightClippingPlanes"
;; type: "const PlaneList&"
;; args: (("Light*" . "l"))
;;
(defcfun "ogre_scene_manager_get_light_clipping_planes"
    :pointer
  (ogre-scene-manager :pointer)
  (l :pointer))

(defmethod get-light-clipping-planes ((this scene-manager) l)
  (ogre-scene-manager-get-light-clipping-planes (pointer-to this) l))


;; name: "getLightScissorRect"
;; type: "const RealRect&"
;; args: (("Light*" . "l") ("const Camera*" . "cam"))
;;
(defcfun "ogre_scene_manager_get_light_scissor_rect"
    :pointer
  (ogre-scene-manager :pointer)
  (l :pointer)
  (cam :pointer))

(defmethod get-light-scissor-rect ((this scene-manager) l cam)
  (ogre-scene-manager-get-light-scissor-rect (pointer-to this) l cam))


;; name: "destroyAllLights"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_destroy_all_lights"
    :void
  (ogre-scene-manager :pointer))

(defmethod destroy-all-lights ((this scene-manager))
  (ogre-scene-manager-destroy-all-lights (pointer-to this)))


;; name: "getRootSceneNode"
;; type: "SceneNode*"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_root_scene_node"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-root-scene-node ((this scene-manager))
  (ogre-scene-manager-get-root-scene-node (pointer-to this)))


;; name: "getSceneNode"
;; type: "SceneNode*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_get_scene_node"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod get-scene-node ((this scene-manager) name)
  (ogre-scene-manager-get-scene-node (pointer-to this) name))


;; name: "hasSceneNode"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_has_scene_node"
    :boolean
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod has-scene-node ((this scene-manager) name)
  (ogre-scene-manager-has-scene-node (pointer-to this) name))


;; name: "getEntity"
;; type: "Entity*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_get_entity"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod get-entity ((this scene-manager) name)
  (ogre-scene-manager-get-entity (pointer-to this) name))


;; name: "hasEntity"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_has_entity"
    :boolean
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod has-entity ((this scene-manager) name)
  (ogre-scene-manager-has-entity (pointer-to this) name))


;; name: "destroyAllEntities"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_destroy_all_entities"
    :void
  (ogre-scene-manager :pointer))

(defmethod destroy-all-entities ((this scene-manager))
  (ogre-scene-manager-destroy-all-entities (pointer-to this)))


;; name: "createManualObject"
;; type: "ManualObject*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_create_manual_object"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod create-manual-object ((this scene-manager) name)
  (ogre-scene-manager-create-manual-object (pointer-to this) name))


;; name: "getManualObject"
;; type: "ManualObject*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_get_manual_object"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod get-manual-object ((this scene-manager) name)
  (ogre-scene-manager-get-manual-object (pointer-to this) name))


;; name: "hasManualObject"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_has_manual_object"
    :boolean
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod has-manual-object ((this scene-manager) name)
  (ogre-scene-manager-has-manual-object (pointer-to this) name))


;; name: "destroyAllManualObjects"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_destroy_all_manual_objects"
    :void
  (ogre-scene-manager :pointer))

(defmethod destroy-all-manual-objects ((this scene-manager))
  (ogre-scene-manager-destroy-all-manual-objects (pointer-to this)))


;; name: "createBillboardChain"
;; type: "BillboardChain*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_create_billboard_chain"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod create-billboard-chain ((this scene-manager) name)
  (ogre-scene-manager-create-billboard-chain (pointer-to this) name))


;; name: "getBillboardChain"
;; type: "BillboardChain*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_get_billboard_chain"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod get-billboard-chain ((this scene-manager) name)
  (ogre-scene-manager-get-billboard-chain (pointer-to this) name))


;; name: "hasBillboardChain"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_has_billboard_chain"
    :boolean
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod has-billboard-chain ((this scene-manager) name)
  (ogre-scene-manager-has-billboard-chain (pointer-to this) name))


;; name: "destroyAllBillboardChains"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_destroy_all_billboard_chains"
    :void
  (ogre-scene-manager :pointer))

(defmethod destroy-all-billboard-chains ((this scene-manager))
  (ogre-scene-manager-destroy-all-billboard-chains (pointer-to this)))


;; name: "createRibbonTrail"
;; type: "RibbonTrail*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_create_ribbon_trail"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod create-ribbon-trail ((this scene-manager) name)
  (ogre-scene-manager-create-ribbon-trail (pointer-to this) name))


;; name: "getRibbonTrail"
;; type: "RibbonTrail*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_get_ribbon_trail"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod get-ribbon-trail ((this scene-manager) name)
  (ogre-scene-manager-get-ribbon-trail (pointer-to this) name))


;; name: "hasRibbonTrail"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_has_ribbon_trail"
    :boolean
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod has-ribbon-trail ((this scene-manager) name)
  (ogre-scene-manager-has-ribbon-trail (pointer-to this) name))


;; name: "destroyAllRibbonTrails"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_destroy_all_ribbon_trails"
    :void
  (ogre-scene-manager :pointer))

(defmethod destroy-all-ribbon-trails ((this scene-manager))
  (ogre-scene-manager-destroy-all-ribbon-trails (pointer-to this)))


;; name: "getParticleSystem"
;; type: "ParticleSystem*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_get_particle_system"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod get-particle-system ((this scene-manager) name)
  (ogre-scene-manager-get-particle-system (pointer-to this) name))


;; name: "hasParticleSystem"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_has_particle_system"
    :boolean
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod has-particle-system ((this scene-manager) name)
  (ogre-scene-manager-has-particle-system (pointer-to this) name))


;; name: "destroyAllParticleSystems"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_destroy_all_particle_systems"
    :void
  (ogre-scene-manager :pointer))

(defmethod destroy-all-particle-systems ((this scene-manager))
  (ogre-scene-manager-destroy-all-particle-systems (pointer-to this)))


;; name: "clearScene"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_clear_scene"
    :void
  (ogre-scene-manager :pointer))

(defmethod clear-scene ((this scene-manager))
  (ogre-scene-manager-clear-scene (pointer-to this)))


;; name: "setAmbientLight"
;; type: "void"
;; args: (("const ColourValue&" . "colour"))
;;
(defcfun "ogre_scene_manager_set_ambient_light"
    :void
  (ogre-scene-manager :pointer)
  (colour okra-array4))

(defmethod set-ambient-light ((this scene-manager) colour)
  (ogre-scene-manager-set-ambient-light (pointer-to this) colour))


;; name: "getAmbientLight"
;; type: "const ColourValue&"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_ambient_light"
    :void
  (ogre-scene-manager :pointer)
  (array4 :pointer))

(defmethod get-ambient-light ((this scene-manager))
  (with-foreign-object (array 'okra-real 4)
    (ogre-scene-manager-get-ambient-light (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3))))


;; name: "getSuggestedViewpoint"
;; type: "ViewPoint"
;; args: (("bool" . "random"))
;;
(defcfun "ogre_scene_manager_get_suggested_viewpoint"
    :pointer
  (ogre-scene-manager :pointer)
  (random :boolean))

(defmethod get-suggested-viewpoint ((this scene-manager) random)
  (ogre-scene-manager-get-suggested-viewpoint (pointer-to this) random))


;; name: "setOption"
;; type: "bool"
;; args: (("const String&" . "strKey") ("const void*" . "pValue"))
;;
(defcfun "ogre_scene_manager_set_option"
    :boolean
  (ogre-scene-manager :pointer)
  (str-key :string)
  (pvalue :pointer))

(defmethod set-option ((this scene-manager) str-key pvalue)
  (ogre-scene-manager-set-option (pointer-to this) str-key pvalue))


;; name: "getOption"
;; type: "bool"
;; args: (("const String&" . "strKey") ("void*" . "pDestValue"))
;;
(defcfun "ogre_scene_manager_get_option"
    :boolean
  (ogre-scene-manager :pointer)
  (str-key :string)
  (pdest-value :pointer))

(defmethod get-option ((this scene-manager) str-key pdest-value)
  (ogre-scene-manager-get-option (pointer-to this) str-key pdest-value))


;; name: "hasOption"
;; type: "bool"
;; args: (("const String&" . "strKey"))
;;
(defcfun "ogre_scene_manager_has_option"
    :boolean
  (ogre-scene-manager :pointer)
  (str-key :string))

(defmethod has-option ((this scene-manager) str-key)
  (ogre-scene-manager-has-option (pointer-to this) str-key))


;; name: "getOptionValues"
;; type: "bool"
;; args: (("const String&" . "strKey") ("StringVector&" . "refValueList"))
;;
(defcfun "ogre_scene_manager_get_option_values"
    :boolean
  (ogre-scene-manager :pointer)
  (str-key :string)
  (ref-value-list :pointer))

(defmethod get-option-values ((this scene-manager) str-key ref-value-list)
  (ogre-scene-manager-get-option-values (pointer-to this) str-key ref-value-list))


;; name: "getOptionKeys"
;; type: "bool"
;; args: (("StringVector&" . "refKeys"))
;;
(defcfun "ogre_scene_manager_get_option_keys"
    :boolean
  (ogre-scene-manager :pointer)
  (ref-keys :pointer))

(defmethod get-option-keys ((this scene-manager) ref-keys)
  (ogre-scene-manager-get-option-keys (pointer-to this) ref-keys))


;; name: "setSkyPlane"
;; type: "void"
;; args: (("bool" . "enable") ("const Plane&" . "plane") ("const String&" . "materialName") ("Real" . "scale") ("Real" . "tiling") ("bool" . "drawFirst") ("Real" . "bow") ("int" . "xsegments") ("int" . "ysegments") ("const String&" . "groupName"))
;;
(defcfun "ogre_scene_manager_set_sky_plane"
    :void
  (ogre-scene-manager :pointer)
  (enable :boolean)
  (plane okra-array4)
  (material-name :string)
  (scale okra-real)
  (tiling okra-real)
  (draw-first :boolean)
  (bow okra-real)
  (xsegments :int)
  (ysegments :int)
  (group-name :string))

(defmethod set-sky-plane ((this scene-manager) enable plane material-name scale tiling draw-first bow xsegments ysegments group-name)
  (ogre-scene-manager-set-sky-plane (pointer-to this) enable plane material-name scale tiling draw-first bow xsegments ysegments group-name))


;; name: "isSkyPlaneEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_is_sky_plane_enabled"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod is-sky-plane-enabled ((this scene-manager))
  (ogre-scene-manager-is-sky-plane-enabled (pointer-to this)))


;; name: "getSkyPlaneNode"
;; type: "SceneNode*"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_sky_plane_node"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-sky-plane-node ((this scene-manager))
  (ogre-scene-manager-get-sky-plane-node (pointer-to this)))


;; name: "getSkyPlaneGenParameters"
;; type: "const SkyPlaneGenParameters&"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_sky_plane_gen_parameters"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-sky-plane-gen-parameters ((this scene-manager))
  (ogre-scene-manager-get-sky-plane-gen-parameters (pointer-to this)))


;; name: "setSkyBox"
;; type: "void"
;; args: (("bool" . "enable") ("const String&" . "materialName") ("Real" . "distance") ("bool" . "drawFirst") ("const Quaternion&" . "orientation") ("const String&" . "groupName"))
;;
(defcfun "ogre_scene_manager_set_sky_box"
    :void
  (ogre-scene-manager :pointer)
  (enable :boolean)
  (material-name :string)
  (distance okra-real)
  (draw-first :boolean)
  (orientation okra-array4)
  (group-name :string))

(defmethod set-sky-box ((this scene-manager) enable material-name distance draw-first orientation group-name)
  (ogre-scene-manager-set-sky-box (pointer-to this) enable material-name distance draw-first orientation group-name))


;; name: "isSkyBoxEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_is_sky_box_enabled"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod is-sky-box-enabled ((this scene-manager))
  (ogre-scene-manager-is-sky-box-enabled (pointer-to this)))


;; name: "getSkyBoxNode"
;; type: "SceneNode*"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_sky_box_node"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-sky-box-node ((this scene-manager))
  (ogre-scene-manager-get-sky-box-node (pointer-to this)))


;; name: "getSkyBoxGenParameters"
;; type: "const SkyBoxGenParameters&"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_sky_box_gen_parameters"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-sky-box-gen-parameters ((this scene-manager))
  (ogre-scene-manager-get-sky-box-gen-parameters (pointer-to this)))


;; name: "setSkyDome"
;; type: "void"
;; args: (("bool" . "enable") ("const String&" . "materialName") ("Real" . "curvature") ("Real" . "tiling") ("Real" . "distance") ("bool" . "drawFirst") ("const Quaternion&" . "orientation") ("int" . "xsegments") ("int" . "ysegments") ("int" . "ysegments_keep") ("const String&" . "groupName"))
;;
(defcfun "ogre_scene_manager_set_sky_dome"
    :void
  (ogre-scene-manager :pointer)
  (enable :boolean)
  (material-name :string)
  (curvature okra-real)
  (tiling okra-real)
  (distance okra-real)
  (draw-first :boolean)
  (orientation okra-array4)
  (xsegments :int)
  (ysegments :int)
  (ysegments-keep :int)
  (group-name :string))

(defmethod set-sky-dome ((this scene-manager) enable material-name curvature tiling distance draw-first orientation xsegments ysegments ysegments-keep group-name)
  (ogre-scene-manager-set-sky-dome (pointer-to this) enable material-name curvature tiling distance draw-first orientation xsegments ysegments ysegments-keep group-name))


;; name: "isSkyDomeEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_is_sky_dome_enabled"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod is-sky-dome-enabled ((this scene-manager))
  (ogre-scene-manager-is-sky-dome-enabled (pointer-to this)))


;; name: "getSkyDomeNode"
;; type: "SceneNode*"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_sky_dome_node"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-sky-dome-node ((this scene-manager))
  (ogre-scene-manager-get-sky-dome-node (pointer-to this)))


;; name: "getSkyDomeGenParameters"
;; type: "const SkyDomeGenParameters&"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_sky_dome_gen_parameters"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-sky-dome-gen-parameters ((this scene-manager))
  (ogre-scene-manager-get-sky-dome-gen-parameters (pointer-to this)))


;; name: "setFog"
;; type: "void"
;; args: (("FogMode" . "mode") ("const ColourValue&" . "colour") ("Real" . "expDensity") ("Real" . "linearStart") ("Real" . "linearEnd"))
;;
(defcfun "ogre_scene_manager_set_fog"
    :void
  (ogre-scene-manager :pointer)
  (mode fog-mode)
  (colour okra-array4)
  (exp-density okra-real)
  (linear-start okra-real)
  (linear-end okra-real))

(defmethod set-fog ((this scene-manager) mode colour exp-density linear-start linear-end)
  (ogre-scene-manager-set-fog (pointer-to this) mode colour exp-density linear-start linear-end))


;; name: "getFogMode"
;; type: "FogMode"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_fog_mode"
    fog-mode
  (ogre-scene-manager :pointer))

(defmethod get-fog-mode ((this scene-manager))
  (ogre-scene-manager-get-fog-mode (pointer-to this)))


;; name: "getFogColour"
;; type: "const ColourValue&"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_fog_colour"
    :void
  (ogre-scene-manager :pointer)
  (array4 :pointer))

(defmethod get-fog-colour ((this scene-manager))
  (with-foreign-object (array 'okra-real 4)
    (ogre-scene-manager-get-fog-colour (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3))))


;; name: "getFogStart"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_fog_start"
    okra-real
  (ogre-scene-manager :pointer))

(defmethod get-fog-start ((this scene-manager))
  (ogre-scene-manager-get-fog-start (pointer-to this)))


;; name: "getFogEnd"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_fog_end"
    okra-real
  (ogre-scene-manager :pointer))

(defmethod get-fog-end ((this scene-manager))
  (ogre-scene-manager-get-fog-end (pointer-to this)))


;; name: "getFogDensity"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_fog_density"
    okra-real
  (ogre-scene-manager :pointer))

(defmethod get-fog-density ((this scene-manager))
  (ogre-scene-manager-get-fog-density (pointer-to this)))


;; name: "createBillboardSet"
;; type: "BillboardSet*"
;; args: (("const String&" . "name") ("unsigned int" . "poolSize"))
;;
(defcfun "ogre_scene_manager_create_billboard_set"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string)
  (pool-size :unsigned-int))

(defmethod create-billboard-set ((this scene-manager) name pool-size)
  (ogre-scene-manager-create-billboard-set (pointer-to this) name pool-size))


;; name: "getBillboardSet"
;; type: "BillboardSet*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_get_billboard_set"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod get-billboard-set ((this scene-manager) name)
  (ogre-scene-manager-get-billboard-set (pointer-to this) name))


;; name: "hasBillboardSet"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_has_billboard_set"
    :boolean
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod has-billboard-set ((this scene-manager) name)
  (ogre-scene-manager-has-billboard-set (pointer-to this) name))


;; name: "destroyAllBillboardSets"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_destroy_all_billboard_sets"
    :void
  (ogre-scene-manager :pointer))

(defmethod destroy-all-billboard-sets ((this scene-manager))
  (ogre-scene-manager-destroy-all-billboard-sets (pointer-to this)))


;; name: "setDisplaySceneNodes"
;; type: "void"
;; args: (("bool" . "display"))
;;
(defcfun "ogre_scene_manager_set_display_scene_nodes"
    :void
  (ogre-scene-manager :pointer)
  (display :boolean))

(defmethod set-display-scene-nodes ((this scene-manager) display)
  (ogre-scene-manager-set-display-scene-nodes (pointer-to this) display))


;; name: "getDisplaySceneNodes"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_display_scene_nodes"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod get-display-scene-nodes ((this scene-manager))
  (ogre-scene-manager-get-display-scene-nodes (pointer-to this)))


;; name: "createAnimation"
;; type: "Animation*"
;; args: (("const String&" . "name") ("Real" . "length"))
;;
(defcfun "ogre_scene_manager_create_animation"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string)
  (length okra-real))

(defmethod create-animation ((this scene-manager) name length)
  (ogre-scene-manager-create-animation (pointer-to this) name length))


;; name: "getAnimation"
;; type: "Animation*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_get_animation"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod get-animation ((this scene-manager) name)
  (ogre-scene-manager-get-animation (pointer-to this) name))


;; name: "hasAnimation"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_has_animation"
    :boolean
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod has-animation ((this scene-manager) name)
  (ogre-scene-manager-has-animation (pointer-to this) name))


;; name: "destroyAnimation"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_destroy_animation"
    :void
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod destroy-animation ((this scene-manager) name)
  (ogre-scene-manager-destroy-animation (pointer-to this) name))


;; name: "destroyAllAnimations"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_destroy_all_animations"
    :void
  (ogre-scene-manager :pointer))

(defmethod destroy-all-animations ((this scene-manager))
  (ogre-scene-manager-destroy-all-animations (pointer-to this)))


;; name: "createAnimationState"
;; type: "AnimationState*"
;; args: (("const String&" . "animName"))
;;
(defcfun "ogre_scene_manager_create_animation_state"
    :pointer
  (ogre-scene-manager :pointer)
  (anim-name :string))

(defmethod create-animation-state ((this scene-manager) anim-name)
  (ogre-scene-manager-create-animation-state (pointer-to this) anim-name))


;; name: "getAnimationState"
;; type: "AnimationState*"
;; args: (("const String&" . "animName"))
;;
(defcfun "ogre_scene_manager_get_animation_state"
    :pointer
  (ogre-scene-manager :pointer)
  (anim-name :string))

(defmethod get-animation-state ((this scene-manager) anim-name)
  (ogre-scene-manager-get-animation-state (pointer-to this) anim-name))


;; name: "hasAnimationState"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_has_animation_state"
    :boolean
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod has-animation-state ((this scene-manager) name)
  (ogre-scene-manager-has-animation-state (pointer-to this) name))


;; name: "destroyAnimationState"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_destroy_animation_state"
    :void
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod destroy-animation-state ((this scene-manager) name)
  (ogre-scene-manager-destroy-animation-state (pointer-to this) name))


;; name: "destroyAllAnimationStates"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_destroy_all_animation_states"
    :void
  (ogre-scene-manager :pointer))

(defmethod destroy-all-animation-states ((this scene-manager))
  (ogre-scene-manager-destroy-all-animation-states (pointer-to this)))


;; name: "manualRender"
;; type: "void"
;; args: (("RenderOperation*" . "rend") ("Pass*" . "pass") ("Viewport*" . "vp") ("const Matrix4&" . "worldMatrix") ("const Matrix4&" . "viewMatrix") ("const Matrix4&" . "projMatrix") ("bool" . "doBeginEndFrame"))
;;
(defcfun "ogre_scene_manager_manual_render"
    :void
  (ogre-scene-manager :pointer)
  (rend :pointer)
  (pass :pointer)
  (vp :pointer)
  (world-matrix okra-array16)
  (view-matrix okra-array16)
  (proj-matrix okra-array16)
  (do-begin-end-frame :boolean))

(defmethod manual-render ((this scene-manager) rend pass vp world-matrix view-matrix proj-matrix do-begin-end-frame)
  (ogre-scene-manager-manual-render (pointer-to this) rend pass vp world-matrix view-matrix proj-matrix do-begin-end-frame))


;; name: "getRenderQueue"
;; type: "RenderQueue*"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_render_queue"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-render-queue ((this scene-manager))
  (ogre-scene-manager-get-render-queue (pointer-to this)))


;; name: "addRenderQueueListener"
;; type: "void"
;; args: (("RenderQueueListener*" . "newListener"))
;;
(defcfun "ogre_scene_manager_add_render_queue_listener"
    :void
  (ogre-scene-manager :pointer)
  (new-listener :pointer))

(defmethod add-render-queue-listener ((this scene-manager) new-listener)
  (ogre-scene-manager-add-render-queue-listener (pointer-to this) new-listener))


;; name: "removeRenderQueueListener"
;; type: "void"
;; args: (("RenderQueueListener*" . "delListener"))
;;
(defcfun "ogre_scene_manager_remove_render_queue_listener"
    :void
  (ogre-scene-manager :pointer)
  (del-listener :pointer))

(defmethod remove-render-queue-listener ((this scene-manager) del-listener)
  (ogre-scene-manager-remove-render-queue-listener (pointer-to this) del-listener))


;; name: "addSpecialCaseRenderQueue"
;; type: "void"
;; args: (("uint8" . "qid"))
;;
(defcfun "ogre_scene_manager_add_special_case_render_queue"
    :void
  (ogre-scene-manager :pointer)
  (qid :uint8))

(defmethod add-special-case-render-queue ((this scene-manager) qid)
  (ogre-scene-manager-add-special-case-render-queue (pointer-to this) qid))


;; name: "removeSpecialCaseRenderQueue"
;; type: "void"
;; args: (("uint8" . "qid"))
;;
(defcfun "ogre_scene_manager_remove_special_case_render_queue"
    :void
  (ogre-scene-manager :pointer)
  (qid :uint8))

(defmethod remove-special-case-render-queue ((this scene-manager) qid)
  (ogre-scene-manager-remove-special-case-render-queue (pointer-to this) qid))


;; name: "clearSpecialCaseRenderQueues"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_clear_special_case_render_queues"
    :void
  (ogre-scene-manager :pointer))

(defmethod clear-special-case-render-queues ((this scene-manager))
  (ogre-scene-manager-clear-special-case-render-queues (pointer-to this)))


;; name: "setSpecialCaseRenderQueueMode"
;; type: "void"
;; args: (("SpecialCaseRenderQueueMode" . "mode"))
;;
(defcfun "ogre_scene_manager_set_special_case_render_queue_mode"
    :void
  (ogre-scene-manager :pointer)
  (mode special-case-render-queue-mode))

(defmethod set-special-case-render-queue-mode ((this scene-manager) mode)
  (ogre-scene-manager-set-special-case-render-queue-mode (pointer-to this) mode))


;; name: "isRenderQueueToBeProcessed"
;; type: "bool"
;; args: (("uint8" . "qid"))
;;
(defcfun "ogre_scene_manager_is_render_queue_to_be_processed"
    :boolean
  (ogre-scene-manager :pointer)
  (qid :uint8))

(defmethod is-render-queue-to-be-processed ((this scene-manager) qid)
  (ogre-scene-manager-is-render-queue-to-be-processed (pointer-to this) qid))


;; name: "setWorldGeometryRenderQueue"
;; type: "void"
;; args: (("uint8" . "qid"))
;;
(defcfun "ogre_scene_manager_set_world_geometry_render_queue"
    :void
  (ogre-scene-manager :pointer)
  (qid :uint8))

(defmethod set-world-geometry-render-queue ((this scene-manager) qid)
  (ogre-scene-manager-set-world-geometry-render-queue (pointer-to this) qid))


;; name: "getWorldGeometryRenderQueue"
;; type: "uint8"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_world_geometry_render_queue"
    :uint8
  (ogre-scene-manager :pointer))

(defmethod get-world-geometry-render-queue ((this scene-manager))
  (ogre-scene-manager-get-world-geometry-render-queue (pointer-to this)))


;; name: "showBoundingBoxes"
;; type: "void"
;; args: (("bool" . "bShow"))
;;
(defcfun "ogre_scene_manager_show_bounding_boxes"
    :void
  (ogre-scene-manager :pointer)
  (bshow :boolean))

(defmethod show-bounding-boxes ((this scene-manager) bshow)
  (ogre-scene-manager-show-bounding-boxes (pointer-to this) bshow))


;; name: "getShowBoundingBoxes"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_show_bounding_boxes"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod get-show-bounding-boxes ((this scene-manager))
  (ogre-scene-manager-get-show-bounding-boxes (pointer-to this)))


;; name: "createAABBQuery"
;; type: "AxisAlignedBoxSceneQuery*"
;; args: (("const AxisAlignedBox&" . "box") ("unsigned long" . "mask"))
;;
(defcfun "ogre_scene_manager_create_aabbquery"
    :pointer
  (ogre-scene-manager :pointer)
  (box okra-array6)
  (mask :unsigned-long))

(defmethod create-aabbquery ((this scene-manager) box mask)
  (ogre-scene-manager-create-aabbquery (pointer-to this) box mask))


;; name: "createSphereQuery"
;; type: "SphereSceneQuery*"
;; args: (("const Sphere&" . "sphere") ("unsigned long" . "mask"))
;;
(defcfun "ogre_scene_manager_create_sphere_query"
    :pointer
  (ogre-scene-manager :pointer)
  (sphere okra-array4)
  (mask :unsigned-long))

(defmethod create-sphere-query ((this scene-manager) sphere mask)
  (ogre-scene-manager-create-sphere-query (pointer-to this) sphere mask))


;; name: "createPlaneBoundedVolumeQuery"
;; type: "PlaneBoundedVolumeListSceneQuery*"
;; args: (("const PlaneBoundedVolumeList&" . "volumes") ("unsigned long" . "mask"))
;;
(defcfun "ogre_scene_manager_create_plane_bounded_volume_query"
    :pointer
  (ogre-scene-manager :pointer)
  (volumes :pointer)
  (mask :unsigned-long))

(defmethod create-plane-bounded-volume-query ((this scene-manager) volumes mask)
  (ogre-scene-manager-create-plane-bounded-volume-query (pointer-to this) volumes mask))


;; name: "createRayQuery"
;; type: "RaySceneQuery*"
;; args: (("const Ray&" . "ray") ("unsigned long" . "mask"))
;;
(defcfun "ogre_scene_manager_create_ray_query"
    :pointer
  (ogre-scene-manager :pointer)
  (ray :pointer)
  (mask :unsigned-long))

(defmethod create-ray-query ((this scene-manager) ray mask)
  (ogre-scene-manager-create-ray-query (pointer-to this) ray mask))


;; name: "createIntersectionQuery"
;; type: "IntersectionSceneQuery*"
;; args: (("unsigned long" . "mask"))
;;
(defcfun "ogre_scene_manager_create_intersection_query"
    :pointer
  (ogre-scene-manager :pointer)
  (mask :unsigned-long))

(defmethod create-intersection-query ((this scene-manager) mask)
  (ogre-scene-manager-create-intersection-query (pointer-to this) mask))


;; name: "destroyQuery"
;; type: "void"
;; args: (("SceneQuery*" . "query"))
;;
(defcfun "ogre_scene_manager_destroy_query"
    :void
  (ogre-scene-manager :pointer)
  (query :pointer))

(defmethod destroy-query ((this scene-manager) query)
  (ogre-scene-manager-destroy-query (pointer-to this) query))


;; name: "getCameraIterator"
;; type: "CameraIterator"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_camera_iterator"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-camera-iterator ((this scene-manager))
  (ogre-scene-manager-get-camera-iterator (pointer-to this)))


;; name: "getAnimationIterator"
;; type: "AnimationIterator"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_animation_iterator"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-animation-iterator ((this scene-manager))
  (ogre-scene-manager-get-animation-iterator (pointer-to this)))


;; name: "getAnimationStateIterator"
;; type: "AnimationStateIterator"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_animation_state_iterator"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-animation-state-iterator ((this scene-manager))
  (ogre-scene-manager-get-animation-state-iterator (pointer-to this)))


;; name: "setShadowTechnique"
;; type: "void"
;; args: (("ShadowTechnique" . "technique"))
;;
(defcfun "ogre_scene_manager_set_shadow_technique"
    :void
  (ogre-scene-manager :pointer)
  (technique shadow-technique))

(defmethod set-shadow-technique ((this scene-manager) technique)
  (ogre-scene-manager-set-shadow-technique (pointer-to this) technique))


;; name: "getShadowTechnique"
;; type: "ShadowTechnique"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_shadow_technique"
    shadow-technique
  (ogre-scene-manager :pointer))

(defmethod get-shadow-technique ((this scene-manager))
  (ogre-scene-manager-get-shadow-technique (pointer-to this)))


;; name: "setShowDebugShadows"
;; type: "void"
;; args: (("bool" . "debug"))
;;
(defcfun "ogre_scene_manager_set_show_debug_shadows"
    :void
  (ogre-scene-manager :pointer)
  (debug :boolean))

(defmethod set-show-debug-shadows ((this scene-manager) debug)
  (ogre-scene-manager-set-show-debug-shadows (pointer-to this) debug))


;; name: "getShowDebugShadows"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_show_debug_shadows"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod get-show-debug-shadows ((this scene-manager))
  (ogre-scene-manager-get-show-debug-shadows (pointer-to this)))


;; name: "setShadowColour"
;; type: "void"
;; args: (("const ColourValue&" . "colour"))
;;
(defcfun "ogre_scene_manager_set_shadow_colour"
    :void
  (ogre-scene-manager :pointer)
  (colour okra-array4))

(defmethod set-shadow-colour ((this scene-manager) colour)
  (ogre-scene-manager-set-shadow-colour (pointer-to this) colour))


;; name: "getShadowColour"
;; type: "const ColourValue&"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_shadow_colour"
    :void
  (ogre-scene-manager :pointer)
  (array4 :pointer))

(defmethod get-shadow-colour ((this scene-manager))
  (with-foreign-object (array 'okra-real 4)
    (ogre-scene-manager-get-shadow-colour (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3))))


;; name: "setShadowDirectionalLightExtrusionDistance"
;; type: "void"
;; args: (("Real" . "dist"))
;;
(defcfun "ogre_scene_manager_set_shadow_directional_light_extrusion_distance"
    :void
  (ogre-scene-manager :pointer)
  (dist okra-real))

(defmethod set-shadow-directional-light-extrusion-distance ((this scene-manager) dist)
  (ogre-scene-manager-set-shadow-directional-light-extrusion-distance (pointer-to this) dist))


;; name: "getShadowDirectionalLightExtrusionDistance"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_shadow_directional_light_extrusion_distance"
    okra-real
  (ogre-scene-manager :pointer))

(defmethod get-shadow-directional-light-extrusion-distance ((this scene-manager))
  (ogre-scene-manager-get-shadow-directional-light-extrusion-distance (pointer-to this)))


;; name: "setShadowFarDistance"
;; type: "void"
;; args: (("Real" . "distance"))
;;
(defcfun "ogre_scene_manager_set_shadow_far_distance"
    :void
  (ogre-scene-manager :pointer)
  (distance okra-real))

(defmethod set-shadow-far-distance ((this scene-manager) distance)
  (ogre-scene-manager-set-shadow-far-distance (pointer-to this) distance))


;; name: "getShadowFarDistance"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_shadow_far_distance"
    okra-real
  (ogre-scene-manager :pointer))

(defmethod get-shadow-far-distance ((this scene-manager))
  (ogre-scene-manager-get-shadow-far-distance (pointer-to this)))


;; name: "getShadowFarDistanceSquared"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_shadow_far_distance_squared"
    okra-real
  (ogre-scene-manager :pointer))

(defmethod get-shadow-far-distance-squared ((this scene-manager))
  (ogre-scene-manager-get-shadow-far-distance-squared (pointer-to this)))


;; name: "setShadowIndexBufferSize"
;; type: "void"
;; args: (("size_t" . "size"))
;;
(defcfun "ogre_scene_manager_set_shadow_index_buffer_size"
    :void
  (ogre-scene-manager :pointer)
  (size :unsigned-int))

(defmethod set-shadow-index-buffer-size ((this scene-manager) size)
  (ogre-scene-manager-set-shadow-index-buffer-size (pointer-to this) size))


;; name: "getShadowIndexBufferSize"
;; type: "size_t"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_shadow_index_buffer_size"
    :unsigned-int
  (ogre-scene-manager :pointer))

(defmethod get-shadow-index-buffer-size ((this scene-manager))
  (ogre-scene-manager-get-shadow-index-buffer-size (pointer-to this)))


;; name: "setShadowTextureSize"
;; type: "void"
;; args: (("unsigned short" . "size"))
;;
(defcfun "ogre_scene_manager_set_shadow_texture_size"
    :void
  (ogre-scene-manager :pointer)
  (size :unsigned-short))

(defmethod set-shadow-texture-size ((this scene-manager) size)
  (ogre-scene-manager-set-shadow-texture-size (pointer-to this) size))


;; name: "getShadowTextureConfigIterator"
;; type: "ConstShadowTextureConfigIterator"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_shadow_texture_config_iterator"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-shadow-texture-config-iterator ((this scene-manager))
  (ogre-scene-manager-get-shadow-texture-config-iterator (pointer-to this)))


;; name: "setShadowTexturePixelFormat"
;; type: "void"
;; args: (("PixelFormat" . "fmt"))
;;
(defcfun "ogre_scene_manager_set_shadow_texture_pixel_format"
    :void
  (ogre-scene-manager :pointer)
  (fmt pixel-format))

(defmethod set-shadow-texture-pixel-format ((this scene-manager) fmt)
  (ogre-scene-manager-set-shadow-texture-pixel-format (pointer-to this) fmt))


;; name: "setShadowTextureCount"
;; type: "void"
;; args: (("size_t" . "count"))
;;
(defcfun "ogre_scene_manager_set_shadow_texture_count"
    :void
  (ogre-scene-manager :pointer)
  (count :unsigned-int))

(defmethod set-shadow-texture-count ((this scene-manager) count)
  (ogre-scene-manager-set-shadow-texture-count (pointer-to this) count))


;; name: "getShadowTextureCount"
;; type: "size_t"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_shadow_texture_count"
    :unsigned-int
  (ogre-scene-manager :pointer))

(defmethod get-shadow-texture-count ((this scene-manager))
  (ogre-scene-manager-get-shadow-texture-count (pointer-to this)))


;; name: "setShadowTextureCountPerLightType"
;; type: "void"
;; args: (("Light::LightTypes" . "type") ("size_t" . "count"))
;;
(defcfun "ogre_scene_manager_set_shadow_texture_count_per_light_type"
    :void
  (ogre-scene-manager :pointer)
  (type light-types)
  (count :unsigned-int))

(defmethod set-shadow-texture-count-per-light-type ((this scene-manager) type count)
  (ogre-scene-manager-set-shadow-texture-count-per-light-type (pointer-to this) type count))


;; name: "getShadowTextureCountPerLightType"
;; type: "size_t"
;; args: (("Light::LightTypes" . "type"))
;;
(defcfun "ogre_scene_manager_get_shadow_texture_count_per_light_type"
    :unsigned-int
  (ogre-scene-manager :pointer)
  (type light-types))

(defmethod get-shadow-texture-count-per-light-type ((this scene-manager) type)
  (ogre-scene-manager-get-shadow-texture-count-per-light-type (pointer-to this) type))


;; name: "setShadowTextureSettings"
;; type: "void"
;; args: (("unsigned short" . "size") ("unsigned short" . "count") ("PixelFormat" . "fmt"))
;;
(defcfun "ogre_scene_manager_set_shadow_texture_settings"
    :void
  (ogre-scene-manager :pointer)
  (size :unsigned-short)
  (count :unsigned-short)
  (fmt pixel-format))

(defmethod set-shadow-texture-settings ((this scene-manager) size count fmt)
  (ogre-scene-manager-set-shadow-texture-settings (pointer-to this) size count fmt))


;; name: "getShadowTexture"
;; type: "const TexturePtr&"
;; args: (("size_t" . "shadowIndex"))
;;
(defcfun "ogre_scene_manager_get_shadow_texture"
    :pointer
  (ogre-scene-manager :pointer)
  (shadow-index :unsigned-int))

(defmethod get-shadow-texture ((this scene-manager) shadow-index)
  (ogre-scene-manager-get-shadow-texture (pointer-to this) shadow-index))


;; name: "setShadowDirLightTextureOffset"
;; type: "void"
;; args: (("Real" . "offset"))
;;
(defcfun "ogre_scene_manager_set_shadow_dir_light_texture_offset"
    :void
  (ogre-scene-manager :pointer)
  (offset okra-real))

(defmethod set-shadow-dir-light-texture-offset ((this scene-manager) offset)
  (ogre-scene-manager-set-shadow-dir-light-texture-offset (pointer-to this) offset))


;; name: "getShadowDirLightTextureOffset"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_shadow_dir_light_texture_offset"
    okra-real
  (ogre-scene-manager :pointer))

(defmethod get-shadow-dir-light-texture-offset ((this scene-manager))
  (ogre-scene-manager-get-shadow-dir-light-texture-offset (pointer-to this)))


;; name: "setShadowTextureFadeStart"
;; type: "void"
;; args: (("Real" . "fadeStart"))
;;
(defcfun "ogre_scene_manager_set_shadow_texture_fade_start"
    :void
  (ogre-scene-manager :pointer)
  (fade-start okra-real))

(defmethod set-shadow-texture-fade-start ((this scene-manager) fade-start)
  (ogre-scene-manager-set-shadow-texture-fade-start (pointer-to this) fade-start))


;; name: "setShadowTextureFadeEnd"
;; type: "void"
;; args: (("Real" . "fadeEnd"))
;;
(defcfun "ogre_scene_manager_set_shadow_texture_fade_end"
    :void
  (ogre-scene-manager :pointer)
  (fade-end okra-real))

(defmethod set-shadow-texture-fade-end ((this scene-manager) fade-end)
  (ogre-scene-manager-set-shadow-texture-fade-end (pointer-to this) fade-end))


;; name: "setShadowTextureSelfShadow"
;; type: "void"
;; args: (("bool" . "selfShadow"))
;;
(defcfun "ogre_scene_manager_set_shadow_texture_self_shadow"
    :void
  (ogre-scene-manager :pointer)
  (self-shadow :boolean))

(defmethod set-shadow-texture-self-shadow ((this scene-manager) self-shadow)
  (ogre-scene-manager-set-shadow-texture-self-shadow (pointer-to this) self-shadow))


;; name: "getShadowTextureSelfShadow"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_shadow_texture_self_shadow"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod get-shadow-texture-self-shadow ((this scene-manager))
  (ogre-scene-manager-get-shadow-texture-self-shadow (pointer-to this)))


;; name: "setShadowTextureCasterMaterial"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_set_shadow_texture_caster_material"
    :void
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod set-shadow-texture-caster-material ((this scene-manager) name)
  (ogre-scene-manager-set-shadow-texture-caster-material (pointer-to this) name))


;; name: "setShadowTextureReceiverMaterial"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_set_shadow_texture_receiver_material"
    :void
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod set-shadow-texture-receiver-material ((this scene-manager) name)
  (ogre-scene-manager-set-shadow-texture-receiver-material (pointer-to this) name))


;; name: "setShadowCasterRenderBackFaces"
;; type: "void"
;; args: (("bool" . "bf"))
;;
(defcfun "ogre_scene_manager_set_shadow_caster_render_back_faces"
    :void
  (ogre-scene-manager :pointer)
  (bf :boolean))

(defmethod set-shadow-caster-render-back-faces ((this scene-manager) bf)
  (ogre-scene-manager-set-shadow-caster-render-back-faces (pointer-to this) bf))


;; name: "getShadowCasterRenderBackFaces"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_shadow_caster_render_back_faces"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod get-shadow-caster-render-back-faces ((this scene-manager))
  (ogre-scene-manager-get-shadow-caster-render-back-faces (pointer-to this)))


;; name: "setShadowCameraSetup"
;; type: "void"
;; args: (("const ShadowCameraSetupPtr&" . "shadowSetup"))
;;
(defcfun "ogre_scene_manager_set_shadow_camera_setup"
    :void
  (ogre-scene-manager :pointer)
  (shadow-setup :pointer))

(defmethod set-shadow-camera-setup ((this scene-manager) shadow-setup)
  (ogre-scene-manager-set-shadow-camera-setup (pointer-to this) shadow-setup))


;; name: "getShadowCameraSetup"
;; type: "const ShadowCameraSetupPtr&"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_shadow_camera_setup"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-shadow-camera-setup ((this scene-manager))
  (ogre-scene-manager-get-shadow-camera-setup (pointer-to this)))


;; name: "setShadowUseInfiniteFarPlane"
;; type: "void"
;; args: (("bool" . "enable"))
;;
(defcfun "ogre_scene_manager_set_shadow_use_infinite_far_plane"
    :void
  (ogre-scene-manager :pointer)
  (enable :boolean))

(defmethod set-shadow-use-infinite-far-plane ((this scene-manager) enable)
  (ogre-scene-manager-set-shadow-use-infinite-far-plane (pointer-to this) enable))


;; name: "isShadowTechniqueStencilBased"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_is_shadow_technique_stencil_based"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod is-shadow-technique-stencil-based ((this scene-manager))
  (ogre-scene-manager-is-shadow-technique-stencil-based (pointer-to this)))


;; name: "isShadowTechniqueTextureBased"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_is_shadow_technique_texture_based"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod is-shadow-technique-texture-based ((this scene-manager))
  (ogre-scene-manager-is-shadow-technique-texture-based (pointer-to this)))


;; name: "isShadowTechniqueModulative"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_is_shadow_technique_modulative"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod is-shadow-technique-modulative ((this scene-manager))
  (ogre-scene-manager-is-shadow-technique-modulative (pointer-to this)))


;; name: "isShadowTechniqueAdditive"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_is_shadow_technique_additive"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod is-shadow-technique-additive ((this scene-manager))
  (ogre-scene-manager-is-shadow-technique-additive (pointer-to this)))


;; name: "isShadowTechniqueIntegrated"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_is_shadow_technique_integrated"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod is-shadow-technique-integrated ((this scene-manager))
  (ogre-scene-manager-is-shadow-technique-integrated (pointer-to this)))


;; name: "isShadowTechniqueInUse"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_is_shadow_technique_in_use"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod is-shadow-technique-in-use ((this scene-manager))
  (ogre-scene-manager-is-shadow-technique-in-use (pointer-to this)))


;; name: "setShadowUseLightClipPlanes"
;; type: "void"
;; args: (("bool" . "enabled"))
;;
(defcfun "ogre_scene_manager_set_shadow_use_light_clip_planes"
    :void
  (ogre-scene-manager :pointer)
  (enabled :boolean))

(defmethod set-shadow-use-light-clip-planes ((this scene-manager) enabled)
  (ogre-scene-manager-set-shadow-use-light-clip-planes (pointer-to this) enabled))


;; name: "getShadowUseLightClipPlanes"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_shadow_use_light_clip_planes"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod get-shadow-use-light-clip-planes ((this scene-manager))
  (ogre-scene-manager-get-shadow-use-light-clip-planes (pointer-to this)))


;; name: "createStaticGeometry"
;; type: "StaticGeometry*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_create_static_geometry"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod create-static-geometry ((this scene-manager) name)
  (ogre-scene-manager-create-static-geometry (pointer-to this) name))


;; name: "getStaticGeometry"
;; type: "StaticGeometry*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_get_static_geometry"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod get-static-geometry ((this scene-manager) name)
  (ogre-scene-manager-get-static-geometry (pointer-to this) name))


;; name: "hasStaticGeometry"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_has_static_geometry"
    :boolean
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod has-static-geometry ((this scene-manager) name)
  (ogre-scene-manager-has-static-geometry (pointer-to this) name))


;; name: "destroyAllStaticGeometry"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_destroy_all_static_geometry"
    :void
  (ogre-scene-manager :pointer))

(defmethod destroy-all-static-geometry ((this scene-manager))
  (ogre-scene-manager-destroy-all-static-geometry (pointer-to this)))


;; name: "createInstancedGeometry"
;; type: "InstancedGeometry*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_create_instanced_geometry"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod create-instanced-geometry ((this scene-manager) name)
  (ogre-scene-manager-create-instanced-geometry (pointer-to this) name))


;; name: "getInstancedGeometry"
;; type: "InstancedGeometry*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_get_instanced_geometry"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))

(defmethod get-instanced-geometry ((this scene-manager) name)
  (ogre-scene-manager-get-instanced-geometry (pointer-to this) name))


;; name: "destroyAllInstancedGeometry"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_destroy_all_instanced_geometry"
    :void
  (ogre-scene-manager :pointer))

(defmethod destroy-all-instanced-geometry ((this scene-manager))
  (ogre-scene-manager-destroy-all-instanced-geometry (pointer-to this)))


;; name: "createMovableObject"
;; type: "MovableObject*"
;; args: (("const String&" . "name") ("const String&" . "typeName") ("const NameValuePairList*" . "params"))
;;
(defcfun "ogre_scene_manager_create_movable_object"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string)
  (type-name :string)
  (params :pointer))

(defmethod create-movable-object ((this scene-manager) name type-name params)
  (ogre-scene-manager-create-movable-object (pointer-to this) name type-name params))


;; name: "destroyAllMovableObjectsByType"
;; type: "void"
;; args: (("const String&" . "typeName"))
;;
(defcfun "ogre_scene_manager_destroy_all_movable_objects_by_type"
    :void
  (ogre-scene-manager :pointer)
  (type-name :string))

(defmethod destroy-all-movable-objects-by-type ((this scene-manager) type-name)
  (ogre-scene-manager-destroy-all-movable-objects-by-type (pointer-to this) type-name))


;; name: "destroyAllMovableObjects"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_scene_manager_destroy_all_movable_objects"
    :void
  (ogre-scene-manager :pointer))

(defmethod destroy-all-movable-objects ((this scene-manager))
  (ogre-scene-manager-destroy-all-movable-objects (pointer-to this)))


;; name: "getMovableObject"
;; type: "MovableObject*"
;; args: (("const String&" . "name") ("const String&" . "typeName"))
;;
(defcfun "ogre_scene_manager_get_movable_object"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string)
  (type-name :string))

(defmethod get-movable-object ((this scene-manager) name type-name)
  (ogre-scene-manager-get-movable-object (pointer-to this) name type-name))


;; name: "hasMovableObject"
;; type: "bool"
;; args: (("const String&" . "name") ("const String&" . "typeName"))
;;
(defcfun "ogre_scene_manager_has_movable_object"
    :boolean
  (ogre-scene-manager :pointer)
  (name :string)
  (type-name :string))

(defmethod has-movable-object ((this scene-manager) name type-name)
  (ogre-scene-manager-has-movable-object (pointer-to this) name type-name))


;; name: "getMovableObjectIterator"
;; type: "MovableObjectIterator"
;; args: (("const String&" . "typeName"))
;;
(defcfun "ogre_scene_manager_get_movable_object_iterator"
    :pointer
  (ogre-scene-manager :pointer)
  (type-name :string))

(defmethod get-movable-object-iterator ((this scene-manager) type-name)
  (ogre-scene-manager-get-movable-object-iterator (pointer-to this) type-name))


;; name: "injectMovableObject"
;; type: "void"
;; args: (("MovableObject*" . "m"))
;;
(defcfun "ogre_scene_manager_inject_movable_object"
    :void
  (ogre-scene-manager :pointer)
  (m :pointer))

(defmethod inject-movable-object ((this scene-manager) m)
  (ogre-scene-manager-inject-movable-object (pointer-to this) m))


;; name: "extractAllMovableObjectsByType"
;; type: "void"
;; args: (("const String&" . "typeName"))
;;
(defcfun "ogre_scene_manager_extract_all_movable_objects_by_type"
    :void
  (ogre-scene-manager :pointer)
  (type-name :string))

(defmethod extract-all-movable-objects-by-type ((this scene-manager) type-name)
  (ogre-scene-manager-extract-all-movable-objects-by-type (pointer-to this) type-name))


;; name: "setVisibilityMask"
;; type: "void"
;; args: (("uint32" . "vmask"))
;;
(defcfun "ogre_scene_manager_set_visibility_mask"
    :void
  (ogre-scene-manager :pointer)
  (vmask :uint32))

(defmethod set-visibility-mask ((this scene-manager) vmask)
  (ogre-scene-manager-set-visibility-mask (pointer-to this) vmask))


;; name: "getVisibilityMask"
;; type: "uint32"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_visibility_mask"
    :uint32
  (ogre-scene-manager :pointer))

(defmethod get-visibility-mask ((this scene-manager))
  (ogre-scene-manager-get-visibility-mask (pointer-to this)))


;; name: "setFindVisibleObjects"
;; type: "void"
;; args: (("bool" . "find"))
;;
(defcfun "ogre_scene_manager_set_find_visible_objects"
    :void
  (ogre-scene-manager :pointer)
  (find :boolean))

(defmethod set-find-visible-objects ((this scene-manager) find)
  (ogre-scene-manager-set-find-visible-objects (pointer-to this) find))


;; name: "getFindVisibleObjects"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_find_visible_objects"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod get-find-visible-objects ((this scene-manager))
  (ogre-scene-manager-get-find-visible-objects (pointer-to this)))


;; name: "setNormaliseNormalsOnScale"
;; type: "void"
;; args: (("bool" . "n"))
;;
(defcfun "ogre_scene_manager_set_normalise_normals_on_scale"
    :void
  (ogre-scene-manager :pointer)
  (n :boolean))

(defmethod set-normalise-normals-on-scale ((this scene-manager) n)
  (ogre-scene-manager-set-normalise-normals-on-scale (pointer-to this) n))


;; name: "getNormaliseNormalsOnScale"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_normalise_normals_on_scale"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod get-normalise-normals-on-scale ((this scene-manager))
  (ogre-scene-manager-get-normalise-normals-on-scale (pointer-to this)))


;; name: "setFlipCullingOnNegativeScale"
;; type: "void"
;; args: (("bool" . "n"))
;;
(defcfun "ogre_scene_manager_set_flip_culling_on_negative_scale"
    :void
  (ogre-scene-manager :pointer)
  (n :boolean))

(defmethod set-flip-culling-on-negative-scale ((this scene-manager) n)
  (ogre-scene-manager-set-flip-culling-on-negative-scale (pointer-to this) n))


;; name: "getFlipCullingOnNegativeScale"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_flip_culling_on_negative_scale"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod get-flip-culling-on-negative-scale ((this scene-manager))
  (ogre-scene-manager-get-flip-culling-on-negative-scale (pointer-to this)))


;; name: "getDestinationRenderSystem"
;; type: "RenderSystem*"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_destination_render_system"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-destination-render-system ((this scene-manager))
  (ogre-scene-manager-get-destination-render-system (pointer-to this)))


;; name: "getCurrentViewport"
;; type: "Viewport*"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_current_viewport"
    :pointer
  (ogre-scene-manager :pointer))

(defmethod get-current-viewport ((this scene-manager))
  (ogre-scene-manager-get-current-viewport (pointer-to this)))


;; name: "getVisibleObjectsBoundsInfo"
;; type: "const VisibleObjectsBoundsInfo&"
;; args: (("const Camera*" . "cam"))
;;
(defcfun "ogre_scene_manager_get_visible_objects_bounds_info"
    :pointer
  (ogre-scene-manager :pointer)
  (cam :pointer))

(defmethod get-visible-objects-bounds-info ((this scene-manager) cam)
  (ogre-scene-manager-get-visible-objects-bounds-info (pointer-to this) cam))


;; name: "getShadowCasterBoundsInfo"
;; type: "const VisibleObjectsBoundsInfo&"
;; args: (("const Light*" . "light") ("size_t" . "iteration"))
;;
(defcfun "ogre_scene_manager_get_shadow_caster_bounds_info"
    :pointer
  (ogre-scene-manager :pointer)
  (light :pointer)
  (iteration :unsigned-int))

(defmethod get-shadow-caster-bounds-info ((this scene-manager) light iteration)
  (ogre-scene-manager-get-shadow-caster-bounds-info (pointer-to this) light iteration))


;; name: "setCameraRelativeRendering"
;; type: "void"
;; args: (("bool" . "rel"))
;;
(defcfun "ogre_scene_manager_set_camera_relative_rendering"
    :void
  (ogre-scene-manager :pointer)
  (rel :boolean))

(defmethod set-camera-relative-rendering ((this scene-manager) rel)
  (ogre-scene-manager-set-camera-relative-rendering (pointer-to this) rel))


;; name: "getCameraRelativeRendering"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_scene_manager_get_camera_relative_rendering"
    :boolean
  (ogre-scene-manager :pointer))

(defmethod get-camera-relative-rendering ((this scene-manager))
  (ogre-scene-manager-get-camera-relative-rendering (pointer-to this)))


;;; Overloaded Foreign Functions

;; name: "getCamera"
;; type: "Camera*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_get_camera_string"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))


;; name: "destroyCamera"
;; type: "void"
;; args: (("Camera*" . "cam"))
;;
(defcfun "ogre_scene_manager_destroy_camera_camera"
    :void
  (ogre-scene-manager :pointer)
  (cam :pointer))


;; name: "destroyCamera"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_destroy_camera_string"
    :void
  (ogre-scene-manager :pointer)
  (name :string))


;; name: "destroyLight"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_destroy_light_string"
    :void
  (ogre-scene-manager :pointer)
  (name :string))


;; name: "destroyLight"
;; type: "void"
;; args: (("Light*" . "light"))
;;
(defcfun "ogre_scene_manager_destroy_light_light"
    :void
  (ogre-scene-manager :pointer)
  (light :pointer))


;; name: "createSceneNode"
;; type: "SceneNode*"
;; args: "void"
;;
(defcfun "ogre_scene_manager_create_scene_node_void"
    :pointer
  (ogre-scene-manager :pointer))


;; name: "createSceneNode"
;; type: "SceneNode*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_create_scene_node_string"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string))


;; name: "destroySceneNode"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_destroy_scene_node_string"
    :void
  (ogre-scene-manager :pointer)
  (name :string))


;; name: "destroySceneNode"
;; type: "void"
;; args: (("SceneNode*" . "sn"))
;;
(defcfun "ogre_scene_manager_destroy_scene_node_scenenode"
    :void
  (ogre-scene-manager :pointer)
  (sn :pointer))


;; name: "createEntity"
;; type: "Entity*"
;; args: (("const String&" . "entityName") ("const String&" . "meshName"))
;;
(defcfun "ogre_scene_manager_create_entity_string_string"
    :pointer
  (ogre-scene-manager :pointer)
  (entity-name :string)
  (mesh-name :string))


;; name: "createEntity"
;; type: "Entity*"
;; args: (("const String&" . "entityName") ("PrefabType" . "ptype"))
;;
(defcfun "ogre_scene_manager_create_entity_string_prefabtype"
    :pointer
  (ogre-scene-manager :pointer)
  (entity-name :string)
  (ptype prefab-type))


;; name: "destroyEntity"
;; type: "void"
;; args: (("Entity*" . "ent"))
;;
(defcfun "ogre_scene_manager_destroy_entity_entity"
    :void
  (ogre-scene-manager :pointer)
  (ent :pointer))


;; name: "destroyEntity"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_destroy_entity_string"
    :void
  (ogre-scene-manager :pointer)
  (name :string))


;; name: "destroyManualObject"
;; type: "void"
;; args: (("ManualObject*" . "obj"))
;;
(defcfun "ogre_scene_manager_destroy_manual_object_manualobject"
    :void
  (ogre-scene-manager :pointer)
  (obj :pointer))


;; name: "destroyManualObject"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_destroy_manual_object_string"
    :void
  (ogre-scene-manager :pointer)
  (name :string))


;; name: "destroyBillboardChain"
;; type: "void"
;; args: (("BillboardChain*" . "obj"))
;;
(defcfun "ogre_scene_manager_destroy_billboard_chain_billboardchain"
    :void
  (ogre-scene-manager :pointer)
  (obj :pointer))


;; name: "destroyBillboardChain"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_destroy_billboard_chain_string"
    :void
  (ogre-scene-manager :pointer)
  (name :string))


;; name: "destroyRibbonTrail"
;; type: "void"
;; args: (("RibbonTrail*" . "obj"))
;;
(defcfun "ogre_scene_manager_destroy_ribbon_trail_ribbontrail"
    :void
  (ogre-scene-manager :pointer)
  (obj :pointer))


;; name: "destroyRibbonTrail"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_destroy_ribbon_trail_string"
    :void
  (ogre-scene-manager :pointer)
  (name :string))


;; name: "createParticleSystem"
;; type: "ParticleSystem*"
;; args: (("const String&" . "name") ("const String&" . "templateName"))
;;
(defcfun "ogre_scene_manager_create_particle_system_string_string"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string)
  (template-name :string))


;; name: "createParticleSystem"
;; type: "ParticleSystem*"
;; args: (("const String&" . "name") ("size_t" . "quota") ("const String&" . "resourceGroup"))
;;
(defcfun "ogre_scene_manager_create_particle_system_string_size_t_string"
    :pointer
  (ogre-scene-manager :pointer)
  (name :string)
  (quota :unsigned-int)
  (resource-group :string))


;; name: "destroyParticleSystem"
;; type: "void"
;; args: (("ParticleSystem*" . "obj"))
;;
(defcfun "ogre_scene_manager_destroy_particle_system_particlesystem"
    :void
  (ogre-scene-manager :pointer)
  (obj :pointer))


;; name: "destroyParticleSystem"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_destroy_particle_system_string"
    :void
  (ogre-scene-manager :pointer)
  (name :string))


;; name: "prepareWorldGeometry"
;; type: "void"
;; args: (("const String&" . "filename"))
;;
(defcfun "ogre_scene_manager_prepare_world_geometry_string"
    :void
  (ogre-scene-manager :pointer)
  (filename :string))


;; name: "prepareWorldGeometry"
;; type: "void"
;; args: (("DataStreamPtr&" . "stream") ("const String&" . "typeName"))
;;
(defcfun "ogre_scene_manager_prepare_world_geometry_datastreamptr_string"
    :void
  (ogre-scene-manager :pointer)
  (stream :pointer)
  (type-name :string))


;; name: "setWorldGeometry"
;; type: "void"
;; args: (("const String&" . "filename"))
;;
(defcfun "ogre_scene_manager_set_world_geometry_string"
    :void
  (ogre-scene-manager :pointer)
  (filename :string))


;; name: "setWorldGeometry"
;; type: "void"
;; args: (("DataStreamPtr&" . "stream") ("const String&" . "typeName"))
;;
(defcfun "ogre_scene_manager_set_world_geometry_datastreamptr_string"
    :void
  (ogre-scene-manager :pointer)
  (stream :pointer)
  (type-name :string))


;; name: "estimateWorldGeometry"
;; type: "size_t"
;; args: (("const String&" . "filename"))
;;
(defcfun "ogre_scene_manager_estimate_world_geometry_string"
    :unsigned-int
  (ogre-scene-manager :pointer)
  (filename :string))


;; name: "estimateWorldGeometry"
;; type: "size_t"
;; args: (("DataStreamPtr&" . "stream") ("const String&" . "typeName"))
;;
(defcfun "ogre_scene_manager_estimate_world_geometry_datastreamptr_string"
    :unsigned-int
  (ogre-scene-manager :pointer)
  (stream :pointer)
  (type-name :string))


;; name: "destroyBillboardSet"
;; type: "void"
;; args: (("BillboardSet*" . "set"))
;;
(defcfun "ogre_scene_manager_destroy_billboard_set_billboardset"
    :void
  (ogre-scene-manager :pointer)
  (set :pointer))


;; name: "destroyBillboardSet"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_destroy_billboard_set_string"
    :void
  (ogre-scene-manager :pointer)
  (name :string))


;; name: "setShadowTextureConfig"
;; type: "void"
;; args: (("size_t" . "shadowIndex") ("unsigned short" . "width") ("unsigned short" . "height") ("PixelFormat" . "format"))
;;
(defcfun "ogre_scene_manager_set_shadow_texture_config_size_t_unsignedshort_unsignedshort_pixelformat"
    :void
  (ogre-scene-manager :pointer)
  (shadow-index :unsigned-int)
  (width :unsigned-short)
  (height :unsigned-short)
  (format pixel-format))


;; name: "setShadowTextureConfig"
;; type: "void"
;; args: (("size_t" . "shadowIndex") ("const ShadowTextureConfig&" . "config"))
;;
(defcfun "ogre_scene_manager_set_shadow_texture_config_size_t_shadowtextureconfig"
    :void
  (ogre-scene-manager :pointer)
  (shadow-index :unsigned-int)
  (config :pointer))


;; name: "destroyStaticGeometry"
;; type: "void"
;; args: (("StaticGeometry*" . "geom"))
;;
(defcfun "ogre_scene_manager_destroy_static_geometry_staticgeometry"
    :void
  (ogre-scene-manager :pointer)
  (geom :pointer))


;; name: "destroyStaticGeometry"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_destroy_static_geometry_string"
    :void
  (ogre-scene-manager :pointer)
  (name :string))


;; name: "destroyInstancedGeometry"
;; type: "void"
;; args: (("InstancedGeometry*" . "geom"))
;;
(defcfun "ogre_scene_manager_destroy_instanced_geometry_instancedgeometry"
    :void
  (ogre-scene-manager :pointer)
  (geom :pointer))


;; name: "destroyInstancedGeometry"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_scene_manager_destroy_instanced_geometry_string"
    :void
  (ogre-scene-manager :pointer)
  (name :string))


;; name: "destroyMovableObject"
;; type: "void"
;; args: (("const String&" . "name") ("const String&" . "typeName"))
;;
(defcfun "ogre_scene_manager_destroy_movable_object_string_string"
    :void
  (ogre-scene-manager :pointer)
  (name :string)
  (type-name :string))


;; name: "destroyMovableObject"
;; type: "void"
;; args: (("MovableObject*" . "m"))
;;
(defcfun "ogre_scene_manager_destroy_movable_object_movableobject"
    :void
  (ogre-scene-manager :pointer)
  (m :pointer))


;; name: "extractMovableObject"
;; type: "void"
;; args: (("const String&" . "name") ("const String&" . "typeName"))
;;
(defcfun "ogre_scene_manager_extract_movable_object_string_string"
    :void
  (ogre-scene-manager :pointer)
  (name :string)
  (type-name :string))


;; name: "extractMovableObject"
;; type: "void"
;; args: (("MovableObject*" . "m"))
;;
(defcfun "ogre_scene_manager_extract_movable_object_movableobject"
    :void
  (ogre-scene-manager :pointer)
  (m :pointer))


;;; Methods for Overloaded Foreign Functions

(defmethod get-camera ((this scene-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-scene-manager-get-camera-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy-camera ((this scene-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-scene-manager-destroy-camera-string (pointer-to this) arg0))
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-scene-manager-destroy-camera-camera (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy-light ((this scene-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-scene-manager-destroy-light-light (pointer-to this) arg0))
    ((and (typep arg0 'string))
     (ogre-scene-manager-destroy-light-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod create-scene-node ((this scene-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'null))
     (ogre-scene-manager-create-scene-node-void (pointer-to this)))
    ((and (typep arg0 'string))
     (ogre-scene-manager-create-scene-node-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy-scene-node ((this scene-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-scene-manager-destroy-scene-node-scenenode (pointer-to this) arg0))
    ((and (typep arg0 'string))
     (ogre-scene-manager-destroy-scene-node-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod create-entity ((this scene-manager) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 'string) (typep arg1 'keyword))
     (ogre-scene-manager-create-entity-string-prefabtype (pointer-to this) arg0 arg1))
    ((and (typep arg0 'string) (typep arg1 'string))
     (ogre-scene-manager-create-entity-string-string (pointer-to this) arg0 arg1))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy-entity ((this scene-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-scene-manager-destroy-entity-string (pointer-to this) arg0))
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-scene-manager-destroy-entity-entity (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy-manual-object ((this scene-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-scene-manager-destroy-manual-object-string (pointer-to this) arg0))
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-scene-manager-destroy-manual-object-manualobject (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy-billboard-chain ((this scene-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-scene-manager-destroy-billboard-chain-string (pointer-to this) arg0))
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-scene-manager-destroy-billboard-chain-billboardchain (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy-ribbon-trail ((this scene-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-scene-manager-destroy-ribbon-trail-string (pointer-to this) arg0))
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-scene-manager-destroy-ribbon-trail-ribbontrail (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod create-particle-system ((this scene-manager) &optional (arg0 nil) (arg1 nil) (arg2 nil))
  (cond
    ((and (typep arg0 'string) (typep arg1 'integer) (typep arg2 'string))
     (ogre-scene-manager-create-particle-system-string-size-t-string (pointer-to this) arg0 arg1 arg2))
    ((and (typep arg0 'string) (typep arg1 'string))
     (ogre-scene-manager-create-particle-system-string-string (pointer-to this) arg0 arg1))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy-particle-system ((this scene-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-scene-manager-destroy-particle-system-string (pointer-to this) arg0))
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-scene-manager-destroy-particle-system-particlesystem (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod prepare-world-geometry ((this scene-manager) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 'cffi:foreign-pointer) (typep arg1 'string))
     (ogre-scene-manager-prepare-world-geometry-datastreamptr-string (pointer-to this) arg0 arg1))
    ((and (typep arg0 'string))
     (ogre-scene-manager-prepare-world-geometry-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod set-world-geometry ((this scene-manager) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 'cffi:foreign-pointer) (typep arg1 'string))
     (ogre-scene-manager-set-world-geometry-datastreamptr-string (pointer-to this) arg0 arg1))
    ((and (typep arg0 'string))
     (ogre-scene-manager-set-world-geometry-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod estimate-world-geometry ((this scene-manager) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 'cffi:foreign-pointer) (typep arg1 'string))
     (ogre-scene-manager-estimate-world-geometry-datastreamptr-string (pointer-to this) arg0 arg1))
    ((and (typep arg0 'string))
     (ogre-scene-manager-estimate-world-geometry-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy-billboard-set ((this scene-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-scene-manager-destroy-billboard-set-string (pointer-to this) arg0))
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-scene-manager-destroy-billboard-set-billboardset (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod set-shadow-texture-config ((this scene-manager) &optional (arg0 nil) (arg1 nil) (arg2 nil) (arg3 nil))
  (cond
    ((and (typep arg0 'integer) (typep arg1 'integer) (typep arg2 'integer) (typep arg3 'keyword))
     (ogre-scene-manager-set-shadow-texture-config-size-t-unsignedshort-unsignedshort-pixelformat (pointer-to this) arg0 arg1 arg2 arg3))
    ((and (typep arg0 'integer) (typep arg1 'cffi:foreign-pointer))
     (ogre-scene-manager-set-shadow-texture-config-size-t-shadowtextureconfig (pointer-to this) arg0 arg1))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy-static-geometry ((this scene-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-scene-manager-destroy-static-geometry-string (pointer-to this) arg0))
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-scene-manager-destroy-static-geometry-staticgeometry (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy-instanced-geometry ((this scene-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-scene-manager-destroy-instanced-geometry-string (pointer-to this) arg0))
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-scene-manager-destroy-instanced-geometry-instancedgeometry (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy-movable-object ((this scene-manager) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 'string) (typep arg1 'string))
     (ogre-scene-manager-destroy-movable-object-string-string (pointer-to this) arg0 arg1))
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-scene-manager-destroy-movable-object-movableobject (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod extract-movable-object ((this scene-manager) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 'string) (typep arg1 'string))
     (ogre-scene-manager-extract-movable-object-string-string (pointer-to this) arg0 arg1))
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-scene-manager-extract-movable-object-movableobject (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))



