;;;; overlay-manager.lisp
;;;;
;;;; This file has been generated by the Okra Bindings Generator.
;;;; You should not edit this file unless you know what you're doing.
;;;; Any changes you've made directly to this file will not be retained
;;;; when a new instance of this file is generated.
;;;;
;;;; author: Erik Winkels (aerique@xs4all.nl)
;;;;
;;;; See the LICENSE file in the Okra root directory for more info.
;;;;
;;;; This file was generated on: 2009-08-07 15:52:10.

(in-package :okra-bindings)


;;; Class

(defclass overlay-manager (ogre-object)
  ())


;;; Foreign Functions & Methods

;; name: "getScriptPatterns"
;; type: "const StringVector&"
;; args: "void"
;;
(defcfun "ogre_overlay_manager_get_script_patterns"
    :pointer
  (ogre-overlay-manager :pointer))

(defmethod get-script-patterns ((this overlay-manager))
  (ogre-overlay-manager-get-script-patterns (pointer-to this)))


;; name: "parseScript"
;; type: "void"
;; args: (("DataStreamPtr&" . "stream") ("const String&" . "groupName"))
;;
(defcfun "ogre_overlay_manager_parse_script"
    :void
  (ogre-overlay-manager :pointer)
  (stream :pointer)
  (group-name :string))

(defmethod parse-script ((this overlay-manager) stream group-name)
  (ogre-overlay-manager-parse-script (pointer-to this) stream group-name))


;; name: "getLoadingOrder"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_overlay_manager_get_loading_order"
    okra-real
  (ogre-overlay-manager :pointer))

(defmethod get-loading-order ((this overlay-manager))
  (ogre-overlay-manager-get-loading-order (pointer-to this)))


;; name: "getByName"
;; type: "Overlay*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_overlay_manager_get_by_name"
    :pointer
  (ogre-overlay-manager :pointer)
  (name :string))

(defmethod get-by-name ((this overlay-manager) name)
  (ogre-overlay-manager-get-by-name (pointer-to this) name))


;; name: "destroyAll"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_overlay_manager_destroy_all"
    :void
  (ogre-overlay-manager :pointer))

(defmethod destroy-all ((this overlay-manager))
  (ogre-overlay-manager-destroy-all (pointer-to this)))


;; name: "getOverlayIterator"
;; type: "OverlayMapIterator"
;; args: "void"
;;
(defcfun "ogre_overlay_manager_get_overlay_iterator"
    :pointer
  (ogre-overlay-manager :pointer))

(defmethod get-overlay-iterator ((this overlay-manager))
  (ogre-overlay-manager-get-overlay-iterator (pointer-to this)))


;; name: "hasViewportChanged"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_overlay_manager_has_viewport_changed"
    :boolean
  (ogre-overlay-manager :pointer))

(defmethod has-viewport-changed ((this overlay-manager))
  (ogre-overlay-manager-has-viewport-changed (pointer-to this)))


;; name: "getViewportHeight"
;; type: "int"
;; args: "void"
;;
(defcfun "ogre_overlay_manager_get_viewport_height"
    :int
  (ogre-overlay-manager :pointer))

(defmethod get-viewport-height ((this overlay-manager))
  (ogre-overlay-manager-get-viewport-height (pointer-to this)))


;; name: "getViewportWidth"
;; type: "int"
;; args: "void"
;;
(defcfun "ogre_overlay_manager_get_viewport_width"
    :int
  (ogre-overlay-manager :pointer))

(defmethod get-viewport-width ((this overlay-manager))
  (ogre-overlay-manager-get-viewport-width (pointer-to this)))


;; name: "getViewportAspectRatio"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_overlay_manager_get_viewport_aspect_ratio"
    okra-real
  (ogre-overlay-manager :pointer))

(defmethod get-viewport-aspect-ratio ((this overlay-manager))
  (ogre-overlay-manager-get-viewport-aspect-ratio (pointer-to this)))


;; name: "createOverlayElement"
;; type: "OverlayElement*"
;; args: (("const String&" . "typeName") ("const String&" . "instanceName") ("bool" . "isTemplate"))
;;
(defcfun "ogre_overlay_manager_create_overlay_element"
    :pointer
  (ogre-overlay-manager :pointer)
  (type-name :string)
  (instance-name :string)
  (is-template :boolean))

(defmethod create-overlay-element ((this overlay-manager) type-name instance-name is-template)
  (ogre-overlay-manager-create-overlay-element (pointer-to this) type-name instance-name is-template))


;; name: "getOverlayElement"
;; type: "OverlayElement*"
;; args: (("const String&" . "name") ("bool" . "isTemplate"))
;;
(defcfun "ogre_overlay_manager_get_overlay_element"
    :pointer
  (ogre-overlay-manager :pointer)
  (name :string)
  (is-template :boolean))

(defmethod get-overlay-element ((this overlay-manager) name is-template)
  (ogre-overlay-manager-get-overlay-element (pointer-to this) name is-template))


;; name: "destroyAllOverlayElements"
;; type: "void"
;; args: (("bool" . "isTemplate"))
;;
(defcfun "ogre_overlay_manager_destroy_all_overlay_elements"
    :void
  (ogre-overlay-manager :pointer)
  (is-template :boolean))

(defmethod destroy-all-overlay-elements ((this overlay-manager) is-template)
  (ogre-overlay-manager-destroy-all-overlay-elements (pointer-to this) is-template))


;; name: "addOverlayElementFactory"
;; type: "void"
;; args: (("OverlayElementFactory*" . "elemFactory"))
;;
(defcfun "ogre_overlay_manager_add_overlay_element_factory"
    :void
  (ogre-overlay-manager :pointer)
  (elem-factory :pointer))

(defmethod add-overlay-element-factory ((this overlay-manager) elem-factory)
  (ogre-overlay-manager-add-overlay-element-factory (pointer-to this) elem-factory))


;; name: "getOverlayElementFactoryMap"
;; type: "const FactoryMap&"
;; args: "void"
;;
(defcfun "ogre_overlay_manager_get_overlay_element_factory_map"
    :pointer
  (ogre-overlay-manager :pointer))

(defmethod get-overlay-element-factory-map ((this overlay-manager))
  (ogre-overlay-manager-get-overlay-element-factory-map (pointer-to this)))


;; name: "createOverlayElementFromTemplate"
;; type: "OverlayElement*"
;; args: (("const String&" . "templateName") ("const String&" . "typeName") ("const String&" . "instanceName") ("bool" . "isTemplate"))
;;
(defcfun "ogre_overlay_manager_create_overlay_element_from_template"
    :pointer
  (ogre-overlay-manager :pointer)
  (template-name :string)
  (type-name :string)
  (instance-name :string)
  (is-template :boolean))

(defmethod create-overlay-element-from-template ((this overlay-manager) template-name type-name instance-name is-template)
  (ogre-overlay-manager-create-overlay-element-from-template (pointer-to this) template-name type-name instance-name is-template))


;; name: "cloneOverlayElementFromTemplate"
;; type: "OverlayElement*"
;; args: (("const String&" . "templateName") ("const String&" . "instanceName"))
;;
(defcfun "ogre_overlay_manager_clone_overlay_element_from_template"
    :pointer
  (ogre-overlay-manager :pointer)
  (template-name :string)
  (instance-name :string))

(defmethod clone-overlay-element-from-template ((this overlay-manager) template-name instance-name)
  (ogre-overlay-manager-clone-overlay-element-from-template (pointer-to this) template-name instance-name))


;; name: "createOverlayElementFromFactory"
;; type: "OverlayElement*"
;; args: (("const String&" . "typeName") ("const String&" . "instanceName"))
;;
(defcfun "ogre_overlay_manager_create_overlay_element_from_factory"
    :pointer
  (ogre-overlay-manager :pointer)
  (type-name :string)
  (instance-name :string))

(defmethod create-overlay-element-from-factory ((this overlay-manager) type-name instance-name)
  (ogre-overlay-manager-create-overlay-element-from-factory (pointer-to this) type-name instance-name))


;; name: "getTemplateIterator"
;; type: "TemplateIterator"
;; args: "void"
;;
(defcfun "ogre_overlay_manager_get_template_iterator"
    :pointer
  (ogre-overlay-manager :pointer))

(defmethod get-template-iterator ((this overlay-manager))
  (ogre-overlay-manager-get-template-iterator (pointer-to this)))


;; name: "isTemplate"
;; type: "bool"
;; args: (("String" . "strName"))
;;
(defcfun "ogre_overlay_manager_is_template"
    :boolean
  (ogre-overlay-manager :pointer)
  (str-name :string))

(defmethod is-template ((this overlay-manager) str-name)
  (ogre-overlay-manager-is-template (pointer-to this) str-name))


;;; Overloaded Foreign Functions

;; name: "create"
;; type: "Overlay*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_overlay_manager_create_string"
    :pointer
  (ogre-overlay-manager :pointer)
  (name :string))


;; name: "destroy"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_overlay_manager_destroy_string"
    :void
  (ogre-overlay-manager :pointer)
  (name :string))


;; name: "destroy"
;; type: "void"
;; args: (("Overlay*" . "overlay"))
;;
(defcfun "ogre_overlay_manager_destroy_overlay"
    :void
  (ogre-overlay-manager :pointer)
  (overlay :pointer))


;; name: "destroyOverlayElement"
;; type: "void"
;; args: (("const String&" . "instanceName") ("bool" . "isTemplate"))
;;
(defcfun "ogre_overlay_manager_destroy_overlay_element_string_bool"
    :void
  (ogre-overlay-manager :pointer)
  (instance-name :string)
  (is-template :boolean))


;; name: "destroyOverlayElement"
;; type: "void"
;; args: (("OverlayElement*" . "pInstance") ("bool" . "isTemplate"))
;;
(defcfun "ogre_overlay_manager_destroy_overlay_element_overlayelement_bool"
    :void
  (ogre-overlay-manager :pointer)
  (pinstance :pointer)
  (is-template :boolean))


;;; Methods for Overloaded Foreign Functions

(defmethod create ((this overlay-manager) &optional (arg0 nil) (arg1 nil) (arg2 nil) (arg3 nil) (arg4 nil))
  (declare (ignore arg1 arg2 arg3 arg4))
  (cond
    ((and (typep arg0 'string))
     (ogre-overlay-manager-create-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy ((this overlay-manager) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-overlay-manager-destroy-overlay (pointer-to this) arg0))
    ((and (typep arg0 'string))
     (ogre-overlay-manager-destroy-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod destroy-overlay-element ((this overlay-manager) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 'cffi:foreign-pointer) (typep arg1 'boolean))
     (ogre-overlay-manager-destroy-overlay-element-overlayelement-bool (pointer-to this) arg0 arg1))
    ((and (typep arg0 'string) (typep arg1 'boolean))
     (ogre-overlay-manager-destroy-overlay-element-string-bool (pointer-to this) arg0 arg1))
    (t (error "Overloaded method not defined for this class."))))



