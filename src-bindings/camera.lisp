;;;; camera.lisp
;;;;
;;;; This file has been generated by the Okra Bindings Generator.
;;;; You should not edit this file unless you know what you're doing.
;;;; Any changes you've made directly to this file will not be retained
;;;; when a new instance of this file is generated.
;;;;
;;;; author: Erik Winkels (aerique@xs4all.nl)
;;;;
;;;; See the LICENSE file in the Okra root directory for more info.
;;;;
;;;; This file was generated on: 2009-06-19 15:01:31.

(in-package :okra-bindings)


;;; Class

(defclass camera (frustum)
  ())


;;; Foreign Functions & Methods

;; name: "getName"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_camera_get_name"
    :string
  (ogre-camera :pointer))

(defmethod get-name ((this camera))
  (ogre-camera-get-name (pointer-to this)))


;; name: "setPolygonMode"
;; type: "void"
;; args: (("PolygonMode" . "sd"))
;;
(defcfun "ogre_camera_set_polygon_mode"
    :void
  (ogre-camera :pointer)
  (sd polygon-mode))

(defmethod set-polygon-mode ((this camera) sd)
  (ogre-camera-set-polygon-mode (pointer-to this) sd))


;; name: "getPolygonMode"
;; type: "PolygonMode"
;; args: "void"
;;
(defcfun "ogre_camera_get_polygon_mode"
    polygon-mode
  (ogre-camera :pointer))

(defmethod get-polygon-mode ((this camera))
  (ogre-camera-get-polygon-mode (pointer-to this)))


;; name: "setPosition"
;; type: "void"
;; args: (("const Vector3&" . "vec"))
;;
(defcfun "ogre_camera_set_position"
    :void
  (ogre-camera :pointer)
  (vec okra-array3))

(defmethod set-position ((this camera) vec)
  (ogre-camera-set-position (pointer-to this) vec))


;; name: "getPosition"
;; type: "const Vector3&"
;; args: "void"
;;
(defcfun "ogre_camera_get_position"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-position ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-position (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "move"
;; type: "void"
;; args: (("const Vector3&" . "vec"))
;;
(defcfun "ogre_camera_move"
    :void
  (ogre-camera :pointer)
  (vec okra-array3))

(defmethod move ((this camera) vec)
  (ogre-camera-move (pointer-to this) vec))


;; name: "moveRelative"
;; type: "void"
;; args: (("const Vector3&" . "vec"))
;;
(defcfun "ogre_camera_move_relative"
    :void
  (ogre-camera :pointer)
  (vec okra-array3))

(defmethod move-relative ((this camera) vec)
  (ogre-camera-move-relative (pointer-to this) vec))


;; name: "setDirection"
;; type: "void"
;; args: (("const Vector3&" . "vec"))
;;
(defcfun "ogre_camera_set_direction"
    :void
  (ogre-camera :pointer)
  (vec okra-array3))

(defmethod set-direction ((this camera) vec)
  (ogre-camera-set-direction (pointer-to this) vec))


;; name: "getDirection"
;; type: "Vector3"
;; args: "void"
;;
(defcfun "ogre_camera_get_direction"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-direction ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-direction (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "getUp"
;; type: "Vector3"
;; args: "void"
;;
(defcfun "ogre_camera_get_up"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-up ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-up (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "getRight"
;; type: "Vector3"
;; args: "void"
;;
(defcfun "ogre_camera_get_right"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-right ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-right (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "lookAt"
;; type: "void"
;; args: (("const Vector3&" . "targetPoint"))
;;
(defcfun "ogre_camera_look_at"
    :void
  (ogre-camera :pointer)
  (target-point okra-array3))

(defmethod look-at ((this camera) target-point)
  (ogre-camera-look-at (pointer-to this) target-point))


;; name: "roll"
;; type: "void"
;; args: (("const Radian&" . "angle"))
;;
(defcfun "ogre_camera_roll"
    :void
  (ogre-camera :pointer)
  (angle okra-real))

(defmethod roll ((this camera) angle)
  (ogre-camera-roll (pointer-to this) angle))


;; name: "yaw"
;; type: "void"
;; args: (("const Radian&" . "angle"))
;;
(defcfun "ogre_camera_yaw"
    :void
  (ogre-camera :pointer)
  (angle okra-real))

(defmethod yaw ((this camera) angle)
  (ogre-camera-yaw (pointer-to this) angle))


;; name: "pitch"
;; type: "void"
;; args: (("const Radian&" . "angle"))
;;
(defcfun "ogre_camera_pitch"
    :void
  (ogre-camera :pointer)
  (angle okra-real))

(defmethod pitch ((this camera) angle)
  (ogre-camera-pitch (pointer-to this) angle))


;; name: "rotate"
;; type: "void"
;; args: (("const Quaternion&" . "q"))
;;
(defcfun "ogre_camera_rotate"
    :void
  (ogre-camera :pointer)
  (q okra-array4))

(defmethod rotate ((this camera) q)
  (ogre-camera-rotate (pointer-to this) q))


;; name: "setFixedYawAxis"
;; type: "void"
;; args: (("bool" . "useFixed") ("const Vector3&" . "fixedAxis"))
;;
(defcfun "ogre_camera_set_fixed_yaw_axis"
    :void
  (ogre-camera :pointer)
  (use-fixed :boolean)
  (fixed-axis okra-array3))

(defmethod set-fixed-yaw-axis ((this camera) use-fixed fixed-axis)
  (ogre-camera-set-fixed-yaw-axis (pointer-to this) use-fixed fixed-axis))


;; name: "getOrientation"
;; type: "const Quaternion&"
;; args: "void"
;;
(defcfun "ogre_camera_get_orientation"
    :void
  (ogre-camera :pointer)
  (array4 :pointer))

(defmethod get-orientation ((this camera))
  (with-foreign-object (array 'okra-real 4)
    (ogre-camera-get-orientation (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3))))


;; name: "setOrientation"
;; type: "void"
;; args: (("const Quaternion&" . "q"))
;;
(defcfun "ogre_camera_set_orientation"
    :void
  (ogre-camera :pointer)
  (q okra-array4))

(defmethod set-orientation ((this camera) q)
  (ogre-camera-set-orientation (pointer-to this) q))


;; name: "getDerivedOrientation"
;; type: "const Quaternion&"
;; args: "void"
;;
(defcfun "ogre_camera_get_derived_orientation"
    :void
  (ogre-camera :pointer)
  (array4 :pointer))

(defmethod get-derived-orientation ((this camera))
  (with-foreign-object (array 'okra-real 4)
    (ogre-camera-get-derived-orientation (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3))))


;; name: "getDerivedPosition"
;; type: "const Vector3&"
;; args: "void"
;;
(defcfun "ogre_camera_get_derived_position"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-derived-position ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-derived-position (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "getDerivedDirection"
;; type: "Vector3"
;; args: "void"
;;
(defcfun "ogre_camera_get_derived_direction"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-derived-direction ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-derived-direction (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "getDerivedUp"
;; type: "Vector3"
;; args: "void"
;;
(defcfun "ogre_camera_get_derived_up"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-derived-up ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-derived-up (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "getDerivedRight"
;; type: "Vector3"
;; args: "void"
;;
(defcfun "ogre_camera_get_derived_right"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-derived-right ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-derived-right (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "getRealOrientation"
;; type: "const Quaternion&"
;; args: "void"
;;
(defcfun "ogre_camera_get_real_orientation"
    :void
  (ogre-camera :pointer)
  (array4 :pointer))

(defmethod get-real-orientation ((this camera))
  (with-foreign-object (array 'okra-real 4)
    (ogre-camera-get-real-orientation (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3))))


;; name: "getRealPosition"
;; type: "const Vector3&"
;; args: "void"
;;
(defcfun "ogre_camera_get_real_position"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-real-position ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-real-position (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "getRealDirection"
;; type: "Vector3"
;; args: "void"
;;
(defcfun "ogre_camera_get_real_direction"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-real-direction ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-real-direction (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "getRealUp"
;; type: "Vector3"
;; args: "void"
;;
(defcfun "ogre_camera_get_real_up"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-real-up ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-real-up (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "getRealRight"
;; type: "Vector3"
;; args: "void"
;;
(defcfun "ogre_camera_get_real_right"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-real-right ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-real-right (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "getMovableType"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_camera_get_movable_type"
    :string
  (ogre-camera :pointer))

(defmethod get-movable-type ((this camera))
  (ogre-camera-get-movable-type (pointer-to this)))


;; name: "setAutoTracking"
;; type: "void"
;; args: (("bool" . "enabled") ("SceneNode*" . "target") ("const Vector3&" . "offset"))
;;
(defcfun "ogre_camera_set_auto_tracking"
    :void
  (ogre-camera :pointer)
  (enabled :boolean)
  (target :pointer)
  (offset okra-array3))

(defmethod set-auto-tracking ((this camera) enabled target offset)
  (ogre-camera-set-auto-tracking (pointer-to this) enabled target offset))


;; name: "setLodBias"
;; type: "void"
;; args: (("Real" . "factor"))
;;
(defcfun "ogre_camera_set_lod_bias"
    :void
  (ogre-camera :pointer)
  (factor okra-real))

(defmethod set-lod-bias ((this camera) factor)
  (ogre-camera-set-lod-bias (pointer-to this) factor))


;; name: "getLodBias"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_camera_get_lod_bias"
    okra-real
  (ogre-camera :pointer))

(defmethod get-lod-bias ((this camera))
  (ogre-camera-get-lod-bias (pointer-to this)))


;; name: "setLodCamera"
;; type: "void"
;; args: (("const Camera*" . "lodCam"))
;;
(defcfun "ogre_camera_set_lod_camera"
    :void
  (ogre-camera :pointer)
  (lod-cam :pointer))

(defmethod set-lod-camera ((this camera) lod-cam)
  (ogre-camera-set-lod-camera (pointer-to this) lod-cam))


;; name: "getLodCamera"
;; type: "const Camera*"
;; args: NIL
;;
(defcfun "ogre_camera_get_lod_camera"
    :pointer
  (ogre-camera :pointer))

(defmethod get-lod-camera ((this camera))
  (ogre-camera-get-lod-camera (pointer-to this)))


;; name: "getCameraToViewportRay"
;; type: "Ray"
;; args: (("Real" . "screenx") ("Real" . "screeny"))
;;
(defcfun "ogre_camera_get_camera_to_viewport_ray"
    :void
  (ogre-camera :pointer)
  (array6 :pointer)
  (screenx okra-real)
  (screeny okra-real))

(defmethod get-camera-to-viewport-ray ((this camera) screenx screeny)
  (with-foreign-object (array 'okra-real 6)
    (ogre-camera-get-camera-to-viewport-ray (pointer-to this) array screenx screeny)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3)
            (mem-aref array 'okra-real 4) (mem-aref array 'okra-real 5))))


;; name: "getCameraToViewportBoxVolume"
;; type: "PlaneBoundedVolume"
;; args: (("Real" . "screenLeft") ("Real" . "screenTop") ("Real" . "screenRight") ("Real" . "screenBottom") ("bool" . "includeFarPlane"))
;;
(defcfun "ogre_camera_get_camera_to_viewport_box_volume"
    :pointer
  (ogre-camera :pointer)
  (screen-left okra-real)
  (screen-top okra-real)
  (screen-right okra-real)
  (screen-bottom okra-real)
  (include-far-plane :boolean))

(defmethod get-camera-to-viewport-box-volume ((this camera) screen-left screen-top screen-right screen-bottom include-far-plane)
  (ogre-camera-get-camera-to-viewport-box-volume (pointer-to this) screen-left screen-top screen-right screen-bottom include-far-plane))


;; name: "setWindow"
;; type: "void"
;; args: (("Real" . "Left") ("Real" . "Top") ("Real" . "Right") ("Real" . "Bottom"))
;;
(defcfun "ogre_camera_set_window"
    :void
  (ogre-camera :pointer)
  (left okra-real)
  (top okra-real)
  (right okra-real)
  (bottom okra-real))

(defmethod set-window ((this camera) left top right bottom)
  (ogre-camera-set-window (pointer-to this) left top right bottom))


;; name: "resetWindow"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_camera_reset_window"
    :void
  (ogre-camera :pointer))

(defmethod reset-window ((this camera))
  (ogre-camera-reset-window (pointer-to this)))


;; name: "isWindowSet"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_camera_is_window_set"
    :boolean
  (ogre-camera :pointer))

(defmethod is-window-set ((this camera))
  (ogre-camera-is-window-set (pointer-to this)))


;; name: "getBoundingRadius"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_camera_get_bounding_radius"
    okra-real
  (ogre-camera :pointer))

(defmethod get-bounding-radius ((this camera))
  (ogre-camera-get-bounding-radius (pointer-to this)))


;; name: "getAutoTrackTarget"
;; type: "SceneNode*"
;; args: "void"
;;
(defcfun "ogre_camera_get_auto_track_target"
    :pointer
  (ogre-camera :pointer))

(defmethod get-auto-track-target ((this camera))
  (ogre-camera-get-auto-track-target (pointer-to this)))


;; name: "getAutoTrackOffset"
;; type: "const Vector3&"
;; args: "void"
;;
(defcfun "ogre_camera_get_auto_track_offset"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-auto-track-offset ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-auto-track-offset (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "setAutoAspectRatio"
;; type: "void"
;; args: (("bool" . "autoratio"))
;;
(defcfun "ogre_camera_set_auto_aspect_ratio"
    :void
  (ogre-camera :pointer)
  (autoratio :boolean))

(defmethod set-auto-aspect-ratio ((this camera) autoratio)
  (ogre-camera-set-auto-aspect-ratio (pointer-to this) autoratio))


;; name: "getAutoAspectRatio"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_camera_get_auto_aspect_ratio"
    :boolean
  (ogre-camera :pointer))

(defmethod get-auto-aspect-ratio ((this camera))
  (ogre-camera-get-auto-aspect-ratio (pointer-to this)))


;; name: "setCullingFrustum"
;; type: "void"
;; args: (("Frustum*" . "frustum"))
;;
(defcfun "ogre_camera_set_culling_frustum"
    :void
  (ogre-camera :pointer)
  (frustum :pointer))

(defmethod set-culling-frustum ((this camera) frustum)
  (ogre-camera-set-culling-frustum (pointer-to this) frustum))


;; name: "getCullingFrustum"
;; type: "Frustum*"
;; args: "void"
;;
(defcfun "ogre_camera_get_culling_frustum"
    :pointer
  (ogre-camera :pointer))

(defmethod get-culling-frustum ((this camera))
  (ogre-camera-get-culling-frustum (pointer-to this)))


;; name: "isVisible"
;; type: "bool"
;; args: (("const Vector3&" . "vert") ("FrustumPlane*" . "culledBy"))
;;
(defcfun "ogre_camera_is_visible"
    :boolean
  (ogre-camera :pointer)
  (vert okra-array3)
  (culled-by :pointer))

(defmethod is-visible ((this camera) vert culled-by)
  (ogre-camera-is-visible (pointer-to this) vert culled-by))


;; name: "getWorldSpaceCorners"
;; type: "const Vector3*"
;; args: "void"
;;
(defcfun "ogre_camera_get_world_space_corners"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-world-space-corners ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-world-space-corners (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "getFrustumPlane"
;; type: "const Plane&"
;; args: (("unsigned short" . "plane"))
;;
(defcfun "ogre_camera_get_frustum_plane"
    :pointer
  (ogre-camera :pointer)
  (plane :unsigned-short))

(defmethod get-frustum-plane ((this camera) plane)
  (ogre-camera-get-frustum-plane (pointer-to this) plane))


;; name: "getNearClipDistance"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_camera_get_near_clip_distance"
    okra-real
  (ogre-camera :pointer))

(defmethod get-near-clip-distance ((this camera))
  (ogre-camera-get-near-clip-distance (pointer-to this)))


;; name: "getFarClipDistance"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_camera_get_far_clip_distance"
    okra-real
  (ogre-camera :pointer))

(defmethod get-far-clip-distance ((this camera))
  (ogre-camera-get-far-clip-distance (pointer-to this)))


;; name: "getViewMatrix"
;; type: "const Matrix4&"
;; args: (("bool" . "ownFrustumOnly"))
;;
(defcfun "ogre_camera_get_view_matrix"
    :void
  (ogre-camera :pointer)
  (array16 :pointer)
  (own-frustum-only :boolean))

(defmethod get-view-matrix ((this camera) own-frustum-only)
  (with-foreign-object (array 'okra-real 16)
    (ogre-camera-get-view-matrix (pointer-to this) array own-frustum-only)
    (vector (mem-aref array 'okra-real  0) (mem-aref array 'okra-real  1)
            (mem-aref array 'okra-real  2) (mem-aref array 'okra-real  3)
            (mem-aref array 'okra-real  4) (mem-aref array 'okra-real  5)
            (mem-aref array 'okra-real  6) (mem-aref array 'okra-real  7)
            (mem-aref array 'okra-real  8) (mem-aref array 'okra-real  9)
            (mem-aref array 'okra-real 10) (mem-aref array 'okra-real 11)
            (mem-aref array 'okra-real 12) (mem-aref array 'okra-real 13)
            (mem-aref array 'okra-real 14) (mem-aref array 'okra-real 15))))


;; name: "setUseRenderingDistance"
;; type: "void"
;; args: (("bool" . "use"))
;;
(defcfun "ogre_camera_set_use_rendering_distance"
    :void
  (ogre-camera :pointer)
  (use :boolean))

(defmethod set-use-rendering-distance ((this camera) use)
  (ogre-camera-set-use-rendering-distance (pointer-to this) use))


;; name: "getUseRenderingDistance"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_camera_get_use_rendering_distance"
    :boolean
  (ogre-camera :pointer))

(defmethod get-use-rendering-distance ((this camera))
  (ogre-camera-get-use-rendering-distance (pointer-to this)))


;; name: "synchroniseBaseSettingsWith"
;; type: "void"
;; args: (("const Camera*" . "cam"))
;;
(defcfun "ogre_camera_synchronise_base_settings_with"
    :void
  (ogre-camera :pointer)
  (cam :pointer))

(defmethod synchronise-base-settings-with ((this camera) cam)
  (ogre-camera-synchronise-base-settings-with (pointer-to this) cam))


;; name: "getPositionForViewUpdate"
;; type: "const Vector3&"
;; args: "void"
;;
(defcfun "ogre_camera_get_position_for_view_update"
    :void
  (ogre-camera :pointer)
  (array3 :pointer))

(defmethod get-position-for-view-update ((this camera))
  (with-foreign-object (array 'okra-real 3)
    (ogre-camera-get-position-for-view-update (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "getOrientationForViewUpdate"
;; type: "const Quaternion&"
;; args: "void"
;;
(defcfun "ogre_camera_get_orientation_for_view_update"
    :void
  (ogre-camera :pointer)
  (array4 :pointer))

(defmethod get-orientation-for-view-update ((this camera))
  (with-foreign-object (array 'okra-real 4)
    (ogre-camera-get-orientation-for-view-update (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3))))



