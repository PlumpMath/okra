;;;; movable-object.lisp
;;;;
;;;; This file has been generated by the Okra Bindings Generator.
;;;; You should not edit this file unless you know what you're doing.
;;;; Any changes you've made directly to this file will not be retained
;;;; when a new instance of this file is generated.
;;;;
;;;; author: Erik Winkels (aerique@xs4all.nl)
;;;;
;;;; See the LICENSE file in the Okra root directory for more info.
;;;;
;;;; This file was generated on: 2009-10-29 09:55:21.

(in-package :okra-bindings)


;;; Class

(defclass movable-object (ogre-object)
  ())


;;; Foreign Functions & Methods

;; name: "getName"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_name"
    :string
  (ogre-movable-object :pointer))

(defmethod get-name ((this movable-object))
  (ogre-movable-object-get-name (pointer-to this)))


;; name: "getMovableType"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_movable_type"
    :string
  (ogre-movable-object :pointer))

(defmethod get-movable-type ((this movable-object))
  (ogre-movable-object-get-movable-type (pointer-to this)))


;; name: "getParentNode"
;; type: "Node*"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_parent_node"
    :pointer
  (ogre-movable-object :pointer))

(defmethod get-parent-node ((this movable-object))
  (ogre-movable-object-get-parent-node (pointer-to this)))


;; name: "getParentSceneNode"
;; type: "SceneNode*"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_parent_scene_node"
    :pointer
  (ogre-movable-object :pointer))

(defmethod get-parent-scene-node ((this movable-object))
  (ogre-movable-object-get-parent-scene-node (pointer-to this)))


;; name: "isAttached"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_movable_object_is_attached"
    :boolean
  (ogre-movable-object :pointer))

(defmethod is-attached ((this movable-object))
  (ogre-movable-object-is-attached (pointer-to this)))


;; name: "detatchFromParent"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_movable_object_detatch_from_parent"
    :void
  (ogre-movable-object :pointer))

(defmethod detatch-from-parent ((this movable-object))
  (ogre-movable-object-detatch-from-parent (pointer-to this)))


;; name: "isInScene"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_movable_object_is_in_scene"
    :boolean
  (ogre-movable-object :pointer))

(defmethod is-in-scene ((this movable-object))
  (ogre-movable-object-is-in-scene (pointer-to this)))


;; name: "getBoundingBox"
;; type: "const AxisAlignedBox&"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_bounding_box"
    :void
  (ogre-movable-object :pointer)
  (array6 :pointer))

(defmethod get-bounding-box ((this movable-object))
  (with-foreign-object (array 'okra-real 6)
    (ogre-movable-object-get-bounding-box (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3)
            (mem-aref array 'okra-real 4) (mem-aref array 'okra-real 5))))


;; name: "getBoundingRadius"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_bounding_radius"
    okra-real
  (ogre-movable-object :pointer))

(defmethod get-bounding-radius ((this movable-object))
  (ogre-movable-object-get-bounding-radius (pointer-to this)))


;; name: "getWorldBoundingBox"
;; type: "const AxisAlignedBox&"
;; args: (("bool" . "derive"))
;;
(defcfun "ogre_movable_object_get_world_bounding_box"
    :void
  (ogre-movable-object :pointer)
  (array6 :pointer)
  (derive :boolean))

(defmethod get-world-bounding-box ((this movable-object) derive)
  (with-foreign-object (array 'okra-real 6)
    (ogre-movable-object-get-world-bounding-box (pointer-to this) array derive)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3)
            (mem-aref array 'okra-real 4) (mem-aref array 'okra-real 5))))


;; name: "getWorldBoundingSphere"
;; type: "const Sphere&"
;; args: (("bool" . "derive"))
;;
(defcfun "ogre_movable_object_get_world_bounding_sphere"
    :pointer
  (ogre-movable-object :pointer)
  (derive :boolean))

(defmethod get-world-bounding-sphere ((this movable-object) derive)
  (ogre-movable-object-get-world-bounding-sphere (pointer-to this) derive))


;; name: "getVisible"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_visible"
    :boolean
  (ogre-movable-object :pointer))

(defmethod get-visible ((this movable-object))
  (ogre-movable-object-get-visible (pointer-to this)))


;; name: "setRenderingDistance"
;; type: "void"
;; args: (("Real" . "dist"))
;;
(defcfun "ogre_movable_object_set_rendering_distance"
    :void
  (ogre-movable-object :pointer)
  (dist okra-real))

(defmethod set-rendering-distance ((this movable-object) dist)
  (ogre-movable-object-set-rendering-distance (pointer-to this) dist))


;; name: "getRenderingDistance"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_rendering_distance"
    okra-real
  (ogre-movable-object :pointer))

(defmethod get-rendering-distance ((this movable-object))
  (ogre-movable-object-get-rendering-distance (pointer-to this)))


;; name: "setUserObject"
;; type: "void"
;; args: (("UserDefinedObject*" . "obj"))
;;
(defcfun "ogre_movable_object_set_user_object"
    :void
  (ogre-movable-object :pointer)
  (obj :pointer))

(defmethod set-user-object ((this movable-object) obj)
  (ogre-movable-object-set-user-object (pointer-to this) obj))


;; name: "getUserObject"
;; type: "UserDefinedObject*"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_user_object"
    :pointer
  (ogre-movable-object :pointer))

(defmethod get-user-object ((this movable-object))
  (ogre-movable-object-get-user-object (pointer-to this)))


;; name: "setUserAny"
;; type: "void"
;; args: (("const Any&" . "anything"))
;;
(defcfun "ogre_movable_object_set_user_any"
    :void
  (ogre-movable-object :pointer)
  (anything :pointer))

(defmethod set-user-any ((this movable-object) anything)
  (ogre-movable-object-set-user-any (pointer-to this) anything))


;; name: "getUserAny"
;; type: "const Any&"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_user_any"
    :pointer
  (ogre-movable-object :pointer))

(defmethod get-user-any ((this movable-object))
  (ogre-movable-object-get-user-any (pointer-to this)))


;; name: "setRenderQueueGroup"
;; type: "void"
;; args: (("uint8" . "queueID"))
;;
(defcfun "ogre_movable_object_set_render_queue_group"
    :void
  (ogre-movable-object :pointer)
  (queue-id :uint8))

(defmethod set-render-queue-group ((this movable-object) queue-id)
  (ogre-movable-object-set-render-queue-group (pointer-to this) queue-id))


;; name: "getRenderQueueGroup"
;; type: "uint8"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_render_queue_group"
    :uint8
  (ogre-movable-object :pointer))

(defmethod get-render-queue-group ((this movable-object))
  (ogre-movable-object-get-render-queue-group (pointer-to this)))


;; name: "setQueryFlags"
;; type: "void"
;; args: (("uint32" . "flags"))
;;
(defcfun "ogre_movable_object_set_query_flags"
    :void
  (ogre-movable-object :pointer)
  (flags :uint32))

(defmethod set-query-flags ((this movable-object) flags)
  (ogre-movable-object-set-query-flags (pointer-to this) flags))


;; name: "addQueryFlags"
;; type: "void"
;; args: (("uint32" . "flags"))
;;
(defcfun "ogre_movable_object_add_query_flags"
    :void
  (ogre-movable-object :pointer)
  (flags :uint32))

(defmethod add-query-flags ((this movable-object) flags)
  (ogre-movable-object-add-query-flags (pointer-to this) flags))


;; name: "removeQueryFlags"
;; type: "void"
;; args: (("unsigned long" . "flags"))
;;
(defcfun "ogre_movable_object_remove_query_flags"
    :void
  (ogre-movable-object :pointer)
  (flags :unsigned-long))

(defmethod remove-query-flags ((this movable-object) flags)
  (ogre-movable-object-remove-query-flags (pointer-to this) flags))


;; name: "getQueryFlags"
;; type: "uint32"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_query_flags"
    :uint32
  (ogre-movable-object :pointer))

(defmethod get-query-flags ((this movable-object))
  (ogre-movable-object-get-query-flags (pointer-to this)))


;; name: "setVisibilityFlags"
;; type: "void"
;; args: (("uint32" . "flags"))
;;
(defcfun "ogre_movable_object_set_visibility_flags"
    :void
  (ogre-movable-object :pointer)
  (flags :uint32))

(defmethod set-visibility-flags ((this movable-object) flags)
  (ogre-movable-object-set-visibility-flags (pointer-to this) flags))


;; name: "addVisibilityFlags"
;; type: "void"
;; args: (("uint32" . "flags"))
;;
(defcfun "ogre_movable_object_add_visibility_flags"
    :void
  (ogre-movable-object :pointer)
  (flags :uint32))

(defmethod add-visibility-flags ((this movable-object) flags)
  (ogre-movable-object-add-visibility-flags (pointer-to this) flags))


;; name: "removeVisibilityFlags"
;; type: "void"
;; args: (("uint32" . "flags"))
;;
(defcfun "ogre_movable_object_remove_visibility_flags"
    :void
  (ogre-movable-object :pointer)
  (flags :uint32))

(defmethod remove-visibility-flags ((this movable-object) flags)
  (ogre-movable-object-remove-visibility-flags (pointer-to this) flags))


;; name: "getVisibilityFlags"
;; type: "uint32"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_visibility_flags"
    :uint32
  (ogre-movable-object :pointer))

(defmethod get-visibility-flags ((this movable-object))
  (ogre-movable-object-get-visibility-flags (pointer-to this)))


;; name: "queryLights"
;; type: "const LightList&"
;; args: "void"
;;
(defcfun "ogre_movable_object_query_lights"
    :pointer
  (ogre-movable-object :pointer))

(defmethod query-lights ((this movable-object))
  (ogre-movable-object-query-lights (pointer-to this)))


;; name: "hasEdgeList"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_movable_object_has_edge_list"
    :boolean
  (ogre-movable-object :pointer))

(defmethod has-edge-list ((this movable-object))
  (ogre-movable-object-has-edge-list (pointer-to this)))


;; name: "getShadowVolumeRenderableIterator"
;; type: "ShadowRenderableListIterator"
;; args: (("ShadowTechnique" . "shadowTechnique") ("const Light*" . "light") ("HardwareIndexBufferSharedPtr*" . "indexBuffer") ("bool" . "extrudeVertices") ("Real" . "extrusionDist") ("unsigned long" . "flags"))
;;
(defcfun "ogre_movable_object_get_shadow_volume_renderable_iterator"
    :pointer
  (ogre-movable-object :pointer)
  (shadow-technique shadow-technique)
  (light :pointer)
  (index-buffer :pointer)
  (extrude-vertices :boolean)
  (extrusion-dist okra-real)
  (flags :unsigned-long))

(defmethod get-shadow-volume-renderable-iterator ((this movable-object) shadow-technique light index-buffer extrude-vertices extrusion-dist flags)
  (ogre-movable-object-get-shadow-volume-renderable-iterator (pointer-to this) shadow-technique light index-buffer extrude-vertices extrusion-dist flags))


;; name: "getLightCapBounds"
;; type: "const AxisAlignedBox&"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_light_cap_bounds"
    :void
  (ogre-movable-object :pointer)
  (array6 :pointer))

(defmethod get-light-cap-bounds ((this movable-object))
  (with-foreign-object (array 'okra-real 6)
    (ogre-movable-object-get-light-cap-bounds (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3)
            (mem-aref array 'okra-real 4) (mem-aref array 'okra-real 5))))


;; name: "getDarkCapBounds"
;; type: "const AxisAlignedBox&"
;; args: (("const Light&" . "light") ("Real" . "dirLightExtrusionDist"))
;;
(defcfun "ogre_movable_object_get_dark_cap_bounds"
    :void
  (ogre-movable-object :pointer)
  (array6 :pointer)
  (light :pointer)
  (dir-light-extrusion-dist okra-real))

(defmethod get-dark-cap-bounds ((this movable-object) light dir-light-extrusion-dist)
  (with-foreign-object (array 'okra-real 6)
    (ogre-movable-object-get-dark-cap-bounds (pointer-to this) array light dir-light-extrusion-dist)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3)
            (mem-aref array 'okra-real 4) (mem-aref array 'okra-real 5))))


;; name: "setCastShadows"
;; type: "void"
;; args: (("bool" . "enabled"))
;;
(defcfun "ogre_movable_object_set_cast_shadows"
    :void
  (ogre-movable-object :pointer)
  (enabled :boolean))

(defmethod set-cast-shadows ((this movable-object) enabled)
  (ogre-movable-object-set-cast-shadows (pointer-to this) enabled))


;; name: "getCastShadows"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_cast_shadows"
    :boolean
  (ogre-movable-object :pointer))

(defmethod get-cast-shadows ((this movable-object))
  (ogre-movable-object-get-cast-shadows (pointer-to this)))


;; name: "getPointExtrusionDistance"
;; type: "Real"
;; args: (("const Light*" . "l"))
;;
(defcfun "ogre_movable_object_get_point_extrusion_distance"
    okra-real
  (ogre-movable-object :pointer)
  (l :pointer))

(defmethod get-point-extrusion-distance ((this movable-object) l)
  (ogre-movable-object-get-point-extrusion-distance (pointer-to this) l))


;; name: "getTypeFlags"
;; type: "uint32"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_type_flags"
    :uint32
  (ogre-movable-object :pointer))

(defmethod get-type-flags ((this movable-object))
  (ogre-movable-object-get-type-flags (pointer-to this)))


;; name: "visitRenderables"
;; type: "void"
;; args: (("Renderable::Visitor*" . "visitor") ("bool" . "debugRenderables"))
;;
(defcfun "ogre_movable_object_visit_renderables"
    :void
  (ogre-movable-object :pointer)
  (visitor :pointer)
  (debug-renderables :boolean))

(defmethod visit-renderables ((this movable-object) visitor debug-renderables)
  (ogre-movable-object-visit-renderables (pointer-to this) visitor debug-renderables))


;; name: "isDebugDisplayEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_movable_object_is_debug_display_enabled"
    :boolean
  (ogre-movable-object :pointer))

(defmethod is-debug-display-enabled ((this movable-object))
  (ogre-movable-object-is-debug-display-enabled (pointer-to this)))


;;; Overloaded Foreign Functions

;; name: "setVisible"
;; type: "void"
;; args: (("bool" . "visible"))
;;
(defcfun "ogre_movable_object_set_visible_bool"
    :void
  (ogre-movable-object :pointer)
  (visible :boolean))


;; name: "isVisible"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_movable_object_is_visible_void"
    :boolean
  (ogre-movable-object :pointer))


;; name: "getEdgeList"
;; type: "EdgeData*"
;; args: "void"
;;
(defcfun "ogre_movable_object_get_edge_list_void"
    :pointer
  (ogre-movable-object :pointer))


;; name: "setDebugDisplayEnabled"
;; type: "void"
;; args: (("bool" . "enabled"))
;;
(defcfun "ogre_movable_object_set_debug_display_enabled_bool"
    :void
  (ogre-movable-object :pointer)
  (enabled :boolean))


;;; Methods for Overloaded Foreign Functions

(defmethod is-visible ((this movable-object) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 'null) (typep arg1 'null))
     (ogre-movable-object-is-visible-void (pointer-to this)))
    (t (error "Overloaded method not defined for this class."))))


(defmethod get-edge-list ((this movable-object) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'null))
     (ogre-movable-object-get-edge-list-void (pointer-to this)))
    (t (error "Overloaded method not defined for this class."))))


(defmethod set-visible ((this movable-object) &optional (arg0 nil) (arg1 nil))
  (declare (ignore arg1))
  (cond
    ((and (typep arg0 'boolean))
     (ogre-movable-object-set-visible-bool (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod set-debug-display-enabled ((this movable-object) &optional (arg0 nil) (arg1 nil))
  (declare (ignore arg1))
  (cond
    ((and (typep arg0 'boolean))
     (ogre-movable-object-set-debug-display-enabled-bool (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))



