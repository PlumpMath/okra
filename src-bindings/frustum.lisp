;;;; frustum.lisp
;;;;
;;;; This file has been generated by the Okra Bindings Generator.
;;;; You should not edit this file unless you know what you're doing.
;;;; Any changes you've made directly to this file will not be retained
;;;; when a new instance of this file is generated.
;;;;
;;;; author: Erik Winkels (aerique@xs4all.nl)
;;;;
;;;; See the LICENSE file in the Okra root directory for more info.
;;;;
;;;; This file was generated on: 2009-09-24 13:29:03.

(in-package :okra-bindings)


;;; Class

(defclass frustum (movable-object)
  ())


;;; Foreign Functions & Methods

;; name: "setFOVy"
;; type: "void"
;; args: (("const Radian&" . "fovy"))
;;
(defcfun "ogre_frustum_set_fovy"
    :void
  (ogre-frustum :pointer)
  (fovy okra-real))

(defmethod set-fovy ((this frustum) fovy)
  (ogre-frustum-set-fovy (pointer-to this) fovy))


;; name: "getFOVy"
;; type: "const Radian&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_fovy"
    okra-real
  (ogre-frustum :pointer))

(defmethod get-fovy ((this frustum))
  (ogre-frustum-get-fovy (pointer-to this)))


;; name: "setNearClipDistance"
;; type: "void"
;; args: (("Real" . "nearDist"))
;;
(defcfun "ogre_frustum_set_near_clip_distance"
    :void
  (ogre-frustum :pointer)
  (near-dist okra-real))

(defmethod set-near-clip-distance ((this frustum) near-dist)
  (ogre-frustum-set-near-clip-distance (pointer-to this) near-dist))


;; name: "getNearClipDistance"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_frustum_get_near_clip_distance"
    okra-real
  (ogre-frustum :pointer))

(defmethod get-near-clip-distance ((this frustum))
  (ogre-frustum-get-near-clip-distance (pointer-to this)))


;; name: "setFarClipDistance"
;; type: "void"
;; args: (("Real" . "farDist"))
;;
(defcfun "ogre_frustum_set_far_clip_distance"
    :void
  (ogre-frustum :pointer)
  (far-dist okra-real))

(defmethod set-far-clip-distance ((this frustum) far-dist)
  (ogre-frustum-set-far-clip-distance (pointer-to this) far-dist))


;; name: "getFarClipDistance"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_frustum_get_far_clip_distance"
    okra-real
  (ogre-frustum :pointer))

(defmethod get-far-clip-distance ((this frustum))
  (ogre-frustum-get-far-clip-distance (pointer-to this)))


;; name: "setAspectRatio"
;; type: "void"
;; args: (("Real" . "ratio"))
;;
(defcfun "ogre_frustum_set_aspect_ratio"
    :void
  (ogre-frustum :pointer)
  (ratio okra-real))

(defmethod set-aspect-ratio ((this frustum) ratio)
  (ogre-frustum-set-aspect-ratio (pointer-to this) ratio))


;; name: "getAspectRatio"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_frustum_get_aspect_ratio"
    okra-real
  (ogre-frustum :pointer))

(defmethod get-aspect-ratio ((this frustum))
  (ogre-frustum-get-aspect-ratio (pointer-to this)))


;; name: "getFrustumOffset"
;; type: "const Vector2&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_frustum_offset"
    :void
  (ogre-frustum :pointer)
  (array2 :pointer))

(defmethod get-frustum-offset ((this frustum))
  (with-foreign-object (array 'okra-real 2)
    (ogre-frustum-get-frustum-offset (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1))))


;; name: "setFocalLength"
;; type: "void"
;; args: (("Real" . "focalLength"))
;;
(defcfun "ogre_frustum_set_focal_length"
    :void
  (ogre-frustum :pointer)
  (focal-length okra-real))

(defmethod set-focal-length ((this frustum) focal-length)
  (ogre-frustum-set-focal-length (pointer-to this) focal-length))


;; name: "getFocalLength"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_frustum_get_focal_length"
    okra-real
  (ogre-frustum :pointer))

(defmethod get-focal-length ((this frustum))
  (ogre-frustum-get-focal-length (pointer-to this)))


;; name: "setFrustumExtents"
;; type: "void"
;; args: (("Real" . "left") ("Real" . "right") ("Real" . "top") ("Real" . "bottom"))
;;
(defcfun "ogre_frustum_set_frustum_extents"
    :void
  (ogre-frustum :pointer)
  (left okra-real)
  (right okra-real)
  (top okra-real)
  (bottom okra-real))

(defmethod set-frustum-extents ((this frustum) left right top bottom)
  (ogre-frustum-set-frustum-extents (pointer-to this) left right top bottom))


;; name: "resetFrustumExtents"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_frustum_reset_frustum_extents"
    :void
  (ogre-frustum :pointer))

(defmethod reset-frustum-extents ((this frustum))
  (ogre-frustum-reset-frustum-extents (pointer-to this)))


;; name: "getFrustumExtents"
;; type: "void"
;; args: (("Real&" . "outleft") ("Real&" . "outright") ("Real&" . "outtop") ("Real&" . "outbottom"))
;;
(defcfun "ogre_frustum_get_frustum_extents"
    :void
  (ogre-frustum :pointer)
  (outleft :pointer)
  (outright :pointer)
  (outtop :pointer)
  (outbottom :pointer))

(defmethod get-frustum-extents ((this frustum) outleft outright outtop outbottom)
  (ogre-frustum-get-frustum-extents (pointer-to this) outleft outright outtop outbottom))


;; name: "getProjectionMatrixRS"
;; type: "const Matrix4&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_projection_matrix_rs"
    :void
  (ogre-frustum :pointer)
  (array16 :pointer))

(defmethod get-projection-matrix-rs ((this frustum))
  (with-foreign-object (array 'okra-real 16)
    (ogre-frustum-get-projection-matrix-rs (pointer-to this) array)
    (vector (mem-aref array 'okra-real  0) (mem-aref array 'okra-real  1)
            (mem-aref array 'okra-real  2) (mem-aref array 'okra-real  3)
            (mem-aref array 'okra-real  4) (mem-aref array 'okra-real  5)
            (mem-aref array 'okra-real  6) (mem-aref array 'okra-real  7)
            (mem-aref array 'okra-real  8) (mem-aref array 'okra-real  9)
            (mem-aref array 'okra-real 10) (mem-aref array 'okra-real 11)
            (mem-aref array 'okra-real 12) (mem-aref array 'okra-real 13)
            (mem-aref array 'okra-real 14) (mem-aref array 'okra-real 15))))


;; name: "getProjectionMatrixWithRSDepth"
;; type: "const Matrix4&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_projection_matrix_with_rsdepth"
    :void
  (ogre-frustum :pointer)
  (array16 :pointer))

(defmethod get-projection-matrix-with-rsdepth ((this frustum))
  (with-foreign-object (array 'okra-real 16)
    (ogre-frustum-get-projection-matrix-with-rsdepth (pointer-to this) array)
    (vector (mem-aref array 'okra-real  0) (mem-aref array 'okra-real  1)
            (mem-aref array 'okra-real  2) (mem-aref array 'okra-real  3)
            (mem-aref array 'okra-real  4) (mem-aref array 'okra-real  5)
            (mem-aref array 'okra-real  6) (mem-aref array 'okra-real  7)
            (mem-aref array 'okra-real  8) (mem-aref array 'okra-real  9)
            (mem-aref array 'okra-real 10) (mem-aref array 'okra-real 11)
            (mem-aref array 'okra-real 12) (mem-aref array 'okra-real 13)
            (mem-aref array 'okra-real 14) (mem-aref array 'okra-real 15))))


;; name: "getProjectionMatrix"
;; type: "const Matrix4&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_projection_matrix"
    :void
  (ogre-frustum :pointer)
  (array16 :pointer))

(defmethod get-projection-matrix ((this frustum))
  (with-foreign-object (array 'okra-real 16)
    (ogre-frustum-get-projection-matrix (pointer-to this) array)
    (vector (mem-aref array 'okra-real  0) (mem-aref array 'okra-real  1)
            (mem-aref array 'okra-real  2) (mem-aref array 'okra-real  3)
            (mem-aref array 'okra-real  4) (mem-aref array 'okra-real  5)
            (mem-aref array 'okra-real  6) (mem-aref array 'okra-real  7)
            (mem-aref array 'okra-real  8) (mem-aref array 'okra-real  9)
            (mem-aref array 'okra-real 10) (mem-aref array 'okra-real 11)
            (mem-aref array 'okra-real 12) (mem-aref array 'okra-real 13)
            (mem-aref array 'okra-real 14) (mem-aref array 'okra-real 15))))


;; name: "calcViewMatrixRelative"
;; type: "void"
;; args: (("const Vector3&" . "relPos") ("Matrix4&" . "matToUpdate"))
;;
(defcfun "ogre_frustum_calc_view_matrix_relative"
    :void
  (ogre-frustum :pointer)
  (rel-pos okra-array3)
  (mat-to-update :pointer))

(defmethod calc-view-matrix-relative ((this frustum) rel-pos mat-to-update)
  (ogre-frustum-calc-view-matrix-relative (pointer-to this) rel-pos mat-to-update))


;; name: "setCustomViewMatrix"
;; type: "void"
;; args: (("bool" . "enable") ("const Matrix4&" . "viewMatrix"))
;;
(defcfun "ogre_frustum_set_custom_view_matrix"
    :void
  (ogre-frustum :pointer)
  (enable :boolean)
  (view-matrix okra-array16))

(defmethod set-custom-view-matrix ((this frustum) enable view-matrix)
  (ogre-frustum-set-custom-view-matrix (pointer-to this) enable view-matrix))


;; name: "isCustomViewMatrixEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_frustum_is_custom_view_matrix_enabled"
    :boolean
  (ogre-frustum :pointer))

(defmethod is-custom-view-matrix-enabled ((this frustum))
  (ogre-frustum-is-custom-view-matrix-enabled (pointer-to this)))


;; name: "setCustomProjectionMatrix"
;; type: "void"
;; args: (("bool" . "enable") ("const Matrix4&" . "projectionMatrix"))
;;
(defcfun "ogre_frustum_set_custom_projection_matrix"
    :void
  (ogre-frustum :pointer)
  (enable :boolean)
  (projection-matrix okra-array16))

(defmethod set-custom-projection-matrix ((this frustum) enable projection-matrix)
  (ogre-frustum-set-custom-projection-matrix (pointer-to this) enable projection-matrix))


;; name: "isCustomProjectionMatrixEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_frustum_is_custom_projection_matrix_enabled"
    :boolean
  (ogre-frustum :pointer))

(defmethod is-custom-projection-matrix-enabled ((this frustum))
  (ogre-frustum-is-custom-projection-matrix-enabled (pointer-to this)))


;; name: "getFrustumPlanes"
;; type: "const Plane*"
;; args: "void"
;;
(defcfun "ogre_frustum_get_frustum_planes"
    :pointer
  (ogre-frustum :pointer))

(defmethod get-frustum-planes ((this frustum))
  (ogre-frustum-get-frustum-planes (pointer-to this)))


;; name: "getFrustumPlane"
;; type: "const Plane&"
;; args: (("unsigned short" . "plane"))
;;
(defcfun "ogre_frustum_get_frustum_plane"
    :pointer
  (ogre-frustum :pointer)
  (plane :unsigned-short))

(defmethod get-frustum-plane ((this frustum) plane)
  (ogre-frustum-get-frustum-plane (pointer-to this) plane))


;; name: "getTypeFlags"
;; type: "uint32"
;; args: "void"
;;
(defcfun "ogre_frustum_get_type_flags"
    :uint32
  (ogre-frustum :pointer))

(defmethod get-type-flags ((this frustum))
  (ogre-frustum-get-type-flags (pointer-to this)))


;; name: "getBoundingBox"
;; type: "const AxisAlignedBox&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_bounding_box"
    :void
  (ogre-frustum :pointer)
  (array6 :pointer))

(defmethod get-bounding-box ((this frustum))
  (with-foreign-object (array 'okra-real 6)
    (ogre-frustum-get-bounding-box (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3)
            (mem-aref array 'okra-real 4) (mem-aref array 'okra-real 5))))


;; name: "getBoundingRadius"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_frustum_get_bounding_radius"
    okra-real
  (ogre-frustum :pointer))

(defmethod get-bounding-radius ((this frustum))
  (ogre-frustum-get-bounding-radius (pointer-to this)))


;; name: "getMovableType"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_movable_type"
    :string
  (ogre-frustum :pointer))

(defmethod get-movable-type ((this frustum))
  (ogre-frustum-get-movable-type (pointer-to this)))


;; name: "getMaterial"
;; type: "const MaterialPtr&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_material"
    :pointer
  (ogre-frustum :pointer))

(defmethod get-material ((this frustum))
  (ogre-frustum-get-material (pointer-to this)))


;; name: "getRenderOperation"
;; type: "void"
;; args: (("RenderOperation&" . "op"))
;;
(defcfun "ogre_frustum_get_render_operation"
    :void
  (ogre-frustum :pointer)
  (op :pointer))

(defmethod get-render-operation ((this frustum) op)
  (ogre-frustum-get-render-operation (pointer-to this) op))


;; name: "getWorldTransforms"
;; type: "void"
;; args: (("Matrix4*" . "xform"))
;;
(defcfun "ogre_frustum_get_world_transforms"
    :void
  (ogre-frustum :pointer)
  (xform :pointer))

(defmethod get-world-transforms ((this frustum) xform)
  (ogre-frustum-get-world-transforms (pointer-to this) xform))


;; name: "getSquaredViewDepth"
;; type: "Real"
;; args: (("const Camera*" . "cam"))
;;
(defcfun "ogre_frustum_get_squared_view_depth"
    okra-real
  (ogre-frustum :pointer)
  (cam :pointer))

(defmethod get-squared-view-depth ((this frustum) cam)
  (ogre-frustum-get-squared-view-depth (pointer-to this) cam))


;; name: "getLights"
;; type: "const LightList&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_lights"
    :pointer
  (ogre-frustum :pointer))

(defmethod get-lights ((this frustum))
  (ogre-frustum-get-lights (pointer-to this)))


;; name: "getWorldSpaceCorners"
;; type: "const Vector3*"
;; args: "void"
;;
(defcfun "ogre_frustum_get_world_space_corners"
    :void
  (ogre-frustum :pointer)
  (array3 :pointer))

(defmethod get-world-space-corners ((this frustum))
  (with-foreign-object (array 'okra-real 3)
    (ogre-frustum-get-world-space-corners (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "setProjectionType"
;; type: "void"
;; args: (("ProjectionType" . "pt"))
;;
(defcfun "ogre_frustum_set_projection_type"
    :void
  (ogre-frustum :pointer)
  (pt projection-type))

(defmethod set-projection-type ((this frustum) pt)
  (ogre-frustum-set-projection-type (pointer-to this) pt))


;; name: "getProjectionType"
;; type: "ProjectionType"
;; args: "void"
;;
(defcfun "ogre_frustum_get_projection_type"
    projection-type
  (ogre-frustum :pointer))

(defmethod get-projection-type ((this frustum))
  (ogre-frustum-get-projection-type (pointer-to this)))


;; name: "setOrthoWindow"
;; type: "void"
;; args: (("Real" . "w") ("Real" . "h"))
;;
(defcfun "ogre_frustum_set_ortho_window"
    :void
  (ogre-frustum :pointer)
  (w okra-real)
  (h okra-real))

(defmethod set-ortho-window ((this frustum) w h)
  (ogre-frustum-set-ortho-window (pointer-to this) w h))


;; name: "setOrthoWindowHeight"
;; type: "void"
;; args: (("Real" . "h"))
;;
(defcfun "ogre_frustum_set_ortho_window_height"
    :void
  (ogre-frustum :pointer)
  (h okra-real))

(defmethod set-ortho-window-height ((this frustum) h)
  (ogre-frustum-set-ortho-window-height (pointer-to this) h))


;; name: "setOrthoWindowWidth"
;; type: "void"
;; args: (("Real" . "w"))
;;
(defcfun "ogre_frustum_set_ortho_window_width"
    :void
  (ogre-frustum :pointer)
  (w okra-real))

(defmethod set-ortho-window-width ((this frustum) w)
  (ogre-frustum-set-ortho-window-width (pointer-to this) w))


;; name: "getOrthoWindowHeight"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_frustum_get_ortho_window_height"
    okra-real
  (ogre-frustum :pointer))

(defmethod get-ortho-window-height ((this frustum))
  (ogre-frustum-get-ortho-window-height (pointer-to this)))


;; name: "getOrthoWindowWidth"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_frustum_get_ortho_window_width"
    okra-real
  (ogre-frustum :pointer))

(defmethod get-ortho-window-width ((this frustum))
  (ogre-frustum-get-ortho-window-width (pointer-to this)))


;; name: "enableReflection"
;; type: "void"
;; args: (("const MovablePlane*" . "p"))
;;
(defcfun "ogre_frustum_enable_reflection"
    :void
  (ogre-frustum :pointer)
  (p :pointer))

(defmethod enable-reflection ((this frustum) p)
  (ogre-frustum-enable-reflection (pointer-to this) p))


;; name: "disableReflection"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_frustum_disable_reflection"
    :void
  (ogre-frustum :pointer))

(defmethod disable-reflection ((this frustum))
  (ogre-frustum-disable-reflection (pointer-to this)))


;; name: "isReflected"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_frustum_is_reflected"
    :boolean
  (ogre-frustum :pointer))

(defmethod is-reflected ((this frustum))
  (ogre-frustum-is-reflected (pointer-to this)))


;; name: "getReflectionMatrix"
;; type: "const Matrix4&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_reflection_matrix"
    :void
  (ogre-frustum :pointer)
  (array16 :pointer))

(defmethod get-reflection-matrix ((this frustum))
  (with-foreign-object (array 'okra-real 16)
    (ogre-frustum-get-reflection-matrix (pointer-to this) array)
    (vector (mem-aref array 'okra-real  0) (mem-aref array 'okra-real  1)
            (mem-aref array 'okra-real  2) (mem-aref array 'okra-real  3)
            (mem-aref array 'okra-real  4) (mem-aref array 'okra-real  5)
            (mem-aref array 'okra-real  6) (mem-aref array 'okra-real  7)
            (mem-aref array 'okra-real  8) (mem-aref array 'okra-real  9)
            (mem-aref array 'okra-real 10) (mem-aref array 'okra-real 11)
            (mem-aref array 'okra-real 12) (mem-aref array 'okra-real 13)
            (mem-aref array 'okra-real 14) (mem-aref array 'okra-real 15))))


;; name: "getReflectionPlane"
;; type: "const Plane&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_reflection_plane"
    :pointer
  (ogre-frustum :pointer))

(defmethod get-reflection-plane ((this frustum))
  (ogre-frustum-get-reflection-plane (pointer-to this)))


;; name: "enableCustomNearClipPlane"
;; type: "void"
;; args: (("const MovablePlane*" . "plane"))
;;
(defcfun "ogre_frustum_enable_custom_near_clip_plane"
    :void
  (ogre-frustum :pointer)
  (plane :pointer))

(defmethod enable-custom-near-clip-plane ((this frustum) plane)
  (ogre-frustum-enable-custom-near-clip-plane (pointer-to this) plane))


;; name: "disableCustomNearClipPlane"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_frustum_disable_custom_near_clip_plane"
    :void
  (ogre-frustum :pointer))

(defmethod disable-custom-near-clip-plane ((this frustum))
  (ogre-frustum-disable-custom-near-clip-plane (pointer-to this)))


;; name: "isCustomNearClipPlaneEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_frustum_is_custom_near_clip_plane_enabled"
    :boolean
  (ogre-frustum :pointer))

(defmethod is-custom-near-clip-plane-enabled ((this frustum))
  (ogre-frustum-is-custom-near-clip-plane-enabled (pointer-to this)))


;; name: "visitRenderables"
;; type: "void"
;; args: (("Renderable::Visitor*" . "visitor") ("bool" . "debugRenderables"))
;;
(defcfun "ogre_frustum_visit_renderables"
    :void
  (ogre-frustum :pointer)
  (visitor :pointer)
  (debug-renderables :boolean))

(defmethod visit-renderables ((this frustum) visitor debug-renderables)
  (ogre-frustum-visit-renderables (pointer-to this) visitor debug-renderables))


;; name: "getPositionForViewUpdate"
;; type: "const Vector3&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_position_for_view_update"
    :void
  (ogre-frustum :pointer)
  (array3 :pointer))

(defmethod get-position-for-view-update ((this frustum))
  (with-foreign-object (array 'okra-real 3)
    (ogre-frustum-get-position-for-view-update (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2))))


;; name: "getOrientationForViewUpdate"
;; type: "const Quaternion&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_orientation_for_view_update"
    :void
  (ogre-frustum :pointer)
  (array4 :pointer))

(defmethod get-orientation-for-view-update ((this frustum))
  (with-foreign-object (array 'okra-real 4)
    (ogre-frustum-get-orientation-for-view-update (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3))))


;;; Overloaded Foreign Functions

;; name: "setFrustumOffset"
;; type: "void"
;; args: (("const Vector2&" . "offset"))
;;
(defcfun "ogre_frustum_set_frustum_offset_vector2"
    :void
  (ogre-frustum :pointer)
  (offset okra-array2))


;; name: "setFrustumOffset"
;; type: "void"
;; args: (("Real" . "horizontal") ("Real" . "vertical"))
;;
(defcfun "ogre_frustum_set_frustum_offset_real_real"
    :void
  (ogre-frustum :pointer)
  (horizontal okra-real)
  (vertical okra-real))


;; name: "getViewMatrix"
;; type: "const Matrix4&"
;; args: "void"
;;
(defcfun "ogre_frustum_get_view_matrix_void"
    :void
  (ogre-frustum :pointer)
  (array16 :pointer))


;; name: "isVisible"
;; type: "bool"
;; args: (("const AxisAlignedBox&" . "bound") ("FrustumPlane*" . "culledBy"))
;;
(defcfun "ogre_frustum_is_visible_axisalignedbox_frustumplane"
    :boolean
  (ogre-frustum :pointer)
  (bound okra-array6)
  (culled-by :pointer))


;; name: "isVisible"
;; type: "bool"
;; args: (("const Sphere&" . "bound") ("FrustumPlane*" . "culledBy"))
;;
(defcfun "ogre_frustum_is_visible_sphere_frustumplane"
    :boolean
  (ogre-frustum :pointer)
  (bound okra-array4)
  (culled-by :pointer))


;; name: "isVisible"
;; type: "bool"
;; args: (("const Vector3&" . "vert") ("FrustumPlane*" . "culledBy"))
;;
(defcfun "ogre_frustum_is_visible_vector3_frustumplane"
    :boolean
  (ogre-frustum :pointer)
  (vert okra-array3)
  (culled-by :pointer))


;;; Methods for Overloaded Foreign Functions

(defmethod is-visible ((this frustum) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 '(simple-vector 3)) (typep arg1 'cffi:foreign-pointer))
     (ogre-frustum-is-visible-vector3-frustumplane (pointer-to this) arg0 arg1))
    ((and (typep arg0 '(simple-vector 4)) (typep arg1 'cffi:foreign-pointer))
     (ogre-frustum-is-visible-sphere-frustumplane (pointer-to this) arg0 arg1))
    ((and (typep arg0 '(simple-vector 6)) (typep arg1 'cffi:foreign-pointer))
     (ogre-frustum-is-visible-axisalignedbox-frustumplane (pointer-to this) arg0 arg1))
    (t (error "Overloaded method not defined for this class."))))


(defmethod get-view-matrix ((this frustum) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'null))
  (with-foreign-object (array 'okra-real 16)
       (ogre-frustum-get-view-matrix-void (pointer-to this) array)
    (vector (mem-aref array 'okra-real  0) (mem-aref array 'okra-real  1)
            (mem-aref array 'okra-real  2) (mem-aref array 'okra-real  3)
            (mem-aref array 'okra-real  4) (mem-aref array 'okra-real  5)
            (mem-aref array 'okra-real  6) (mem-aref array 'okra-real  7)
            (mem-aref array 'okra-real  8) (mem-aref array 'okra-real  9)
            (mem-aref array 'okra-real 10) (mem-aref array 'okra-real 11)
            (mem-aref array 'okra-real 12) (mem-aref array 'okra-real 13)
            (mem-aref array 'okra-real 14) (mem-aref array 'okra-real 15))))
    (t (error "Overloaded method not defined for this class."))))


(defmethod set-frustum-offset ((this frustum) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 'real) (typep arg1 'real))
     (ogre-frustum-set-frustum-offset-real-real (pointer-to this) arg0 arg1))
    ((and (typep arg0 '(simple-vector 2)))
     (ogre-frustum-set-frustum-offset-vector2 (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))



