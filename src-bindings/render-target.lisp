;;;; render-target.lisp
;;;;
;;;; This file has been generated by the Okra Bindings Generator.
;;;; You should not edit this file unless you know what you're doing.
;;;; Any changes you've made directly to this file will not be retained
;;;; when a new instance of this file is generated.
;;;;
;;;; author: Erik Winkels (aerique@xs4all.nl)
;;;;
;;;; See the LICENSE file in the Okra root directory for more info.
;;;;
;;;; This file was generated on: 2009-08-07 15:52:10.

(in-package :okra-bindings)


;;; Class

(defclass render-target (ogre-object)
  ())


;;; Foreign Functions & Methods

;; name: "getName"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_render_target_get_name"
    :string
  (ogre-render-target :pointer))

(defmethod get-name ((this render-target))
  (ogre-render-target-get-name (pointer-to this)))


;; name: "getMetrics"
;; type: "void"
;; args: (("unsigned int&" . "width") ("unsigned int&" . "height") ("unsigned int&" . "colourDepth"))
;;
(defcfun "ogre_render_target_get_metrics"
    :void
  (ogre-render-target :pointer)
  (width :pointer)
  (height :pointer)
  (colour-depth :pointer))

(defmethod get-metrics ((this render-target) width height colour-depth)
  (ogre-render-target-get-metrics (pointer-to this) width height colour-depth))


;; name: "getWidth"
;; type: "unsigned int"
;; args: "void"
;;
(defcfun "ogre_render_target_get_width"
    :unsigned-int
  (ogre-render-target :pointer))

(defmethod get-width ((this render-target))
  (ogre-render-target-get-width (pointer-to this)))


;; name: "getHeight"
;; type: "unsigned int"
;; args: "void"
;;
(defcfun "ogre_render_target_get_height"
    :unsigned-int
  (ogre-render-target :pointer))

(defmethod get-height ((this render-target))
  (ogre-render-target-get-height (pointer-to this)))


;; name: "getColourDepth"
;; type: "unsigned int"
;; args: "void"
;;
(defcfun "ogre_render_target_get_colour_depth"
    :unsigned-int
  (ogre-render-target :pointer))

(defmethod get-colour-depth ((this render-target))
  (ogre-render-target-get-colour-depth (pointer-to this)))


;; name: "swapBuffers"
;; type: "void"
;; args: (("bool" . "waitForVSync"))
;;
(defcfun "ogre_render_target_swap_buffers"
    :void
  (ogre-render-target :pointer)
  (wait-for-vsync :boolean))

(defmethod swap-buffers ((this render-target) wait-for-vsync)
  (ogre-render-target-swap-buffers (pointer-to this) wait-for-vsync))


;; name: "addViewport"
;; type: "Viewport*"
;; args: (("Camera*" . "cam") ("int" . "ZOrder") ("float" . "left") ("float" . "top") ("float" . "width") ("float" . "height"))
;;
(defcfun "ogre_render_target_add_viewport"
    :pointer
  (ogre-render-target :pointer)
  (cam :pointer)
  (zorder :int)
  (left :float)
  (top :float)
  (width :float)
  (height :float))

(defmethod add-viewport ((this render-target) cam zorder left top width height)
  (ogre-render-target-add-viewport (pointer-to this) cam zorder left top width height))


;; name: "getNumViewports"
;; type: "unsigned short"
;; args: "void"
;;
(defcfun "ogre_render_target_get_num_viewports"
    :unsigned-short
  (ogre-render-target :pointer))

(defmethod get-num-viewports ((this render-target))
  (ogre-render-target-get-num-viewports (pointer-to this)))


;; name: "removeViewport"
;; type: "void"
;; args: (("int" . "ZOrder"))
;;
(defcfun "ogre_render_target_remove_viewport"
    :void
  (ogre-render-target :pointer)
  (zorder :int))

(defmethod remove-viewport ((this render-target) zorder)
  (ogre-render-target-remove-viewport (pointer-to this) zorder))


;; name: "removeAllViewports"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_render_target_remove_all_viewports"
    :void
  (ogre-render-target :pointer))

(defmethod remove-all-viewports ((this render-target))
  (ogre-render-target-remove-all-viewports (pointer-to this)))


;; name: "getLastFPS"
;; type: "float"
;; args: "void"
;;
(defcfun "ogre_render_target_get_last_fps"
    :float
  (ogre-render-target :pointer))

(defmethod get-last-fps ((this render-target))
  (ogre-render-target-get-last-fps (pointer-to this)))


;; name: "getAverageFPS"
;; type: "float"
;; args: "void"
;;
(defcfun "ogre_render_target_get_average_fps"
    :float
  (ogre-render-target :pointer))

(defmethod get-average-fps ((this render-target))
  (ogre-render-target-get-average-fps (pointer-to this)))


;; name: "getBestFPS"
;; type: "float"
;; args: "void"
;;
(defcfun "ogre_render_target_get_best_fps"
    :float
  (ogre-render-target :pointer))

(defmethod get-best-fps ((this render-target))
  (ogre-render-target-get-best-fps (pointer-to this)))


;; name: "getWorstFPS"
;; type: "float"
;; args: "void"
;;
(defcfun "ogre_render_target_get_worst_fps"
    :float
  (ogre-render-target :pointer))

(defmethod get-worst-fps ((this render-target))
  (ogre-render-target-get-worst-fps (pointer-to this)))


;; name: "getBestFrameTime"
;; type: "float"
;; args: "void"
;;
(defcfun "ogre_render_target_get_best_frame_time"
    :float
  (ogre-render-target :pointer))

(defmethod get-best-frame-time ((this render-target))
  (ogre-render-target-get-best-frame-time (pointer-to this)))


;; name: "getWorstFrameTime"
;; type: "float"
;; args: "void"
;;
(defcfun "ogre_render_target_get_worst_frame_time"
    :float
  (ogre-render-target :pointer))

(defmethod get-worst-frame-time ((this render-target))
  (ogre-render-target-get-worst-frame-time (pointer-to this)))


;; name: "resetStatistics"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_render_target_reset_statistics"
    :void
  (ogre-render-target :pointer))

(defmethod reset-statistics ((this render-target))
  (ogre-render-target-reset-statistics (pointer-to this)))


;; name: "getCustomAttribute"
;; type: "void"
;; args: (("const String&" . "name") ("void*" . "pData"))
;;
(defcfun "ogre_render_target_get_custom_attribute"
    :void
  (ogre-render-target :pointer)
  (name :string)
  (pdata :pointer))

(defmethod get-custom-attribute ((this render-target) name pdata)
  (ogre-render-target-get-custom-attribute (pointer-to this) name pdata))


;; name: "addListener"
;; type: "void"
;; args: (("RenderTargetListener*" . "listener"))
;;
(defcfun "ogre_render_target_add_listener"
    :void
  (ogre-render-target :pointer)
  (listener :pointer))

(defmethod add-listener ((this render-target) listener)
  (ogre-render-target-add-listener (pointer-to this) listener))


;; name: "removeListener"
;; type: "void"
;; args: (("RenderTargetListener*" . "listener"))
;;
(defcfun "ogre_render_target_remove_listener"
    :void
  (ogre-render-target :pointer)
  (listener :pointer))

(defmethod remove-listener ((this render-target) listener)
  (ogre-render-target-remove-listener (pointer-to this) listener))


;; name: "removeAllListeners"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_render_target_remove_all_listeners"
    :void
  (ogre-render-target :pointer))

(defmethod remove-all-listeners ((this render-target))
  (ogre-render-target-remove-all-listeners (pointer-to this)))


;; name: "setPriority"
;; type: "void"
;; args: (("uchar" . "priority"))
;;
(defcfun "ogre_render_target_set_priority"
    :void
  (ogre-render-target :pointer)
  (priority :uchar))

(defmethod set-priority ((this render-target) priority)
  (ogre-render-target-set-priority (pointer-to this) priority))


;; name: "getPriority"
;; type: "uchar"
;; args: "void"
;;
(defcfun "ogre_render_target_get_priority"
    :uchar
  (ogre-render-target :pointer))

(defmethod get-priority ((this render-target))
  (ogre-render-target-get-priority (pointer-to this)))


;; name: "isActive"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_render_target_is_active"
    :boolean
  (ogre-render-target :pointer))

(defmethod is-active ((this render-target))
  (ogre-render-target-is-active (pointer-to this)))


;; name: "setActive"
;; type: "void"
;; args: (("bool" . "state"))
;;
(defcfun "ogre_render_target_set_active"
    :void
  (ogre-render-target :pointer)
  (state :boolean))

(defmethod set-active ((this render-target) state)
  (ogre-render-target-set-active (pointer-to this) state))


;; name: "setAutoUpdated"
;; type: "void"
;; args: (("bool" . "autoupdate"))
;;
(defcfun "ogre_render_target_set_auto_updated"
    :void
  (ogre-render-target :pointer)
  (autoupdate :boolean))

(defmethod set-auto-updated ((this render-target) autoupdate)
  (ogre-render-target-set-auto-updated (pointer-to this) autoupdate))


;; name: "isAutoUpdated"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_render_target_is_auto_updated"
    :boolean
  (ogre-render-target :pointer))

(defmethod is-auto-updated ((this render-target))
  (ogre-render-target-is-auto-updated (pointer-to this)))


;; name: "suggestPixelFormat"
;; type: "PixelFormat"
;; args: "void"
;;
(defcfun "ogre_render_target_suggest_pixel_format"
    pixel-format
  (ogre-render-target :pointer))

(defmethod suggest-pixel-format ((this render-target))
  (ogre-render-target-suggest-pixel-format (pointer-to this)))


;; name: "writeContentsToFile"
;; type: "void"
;; args: (("const String&" . "filename"))
;;
(defcfun "ogre_render_target_write_contents_to_file"
    :void
  (ogre-render-target :pointer)
  (filename :string))

(defmethod write-contents-to-file ((this render-target) filename)
  (ogre-render-target-write-contents-to-file (pointer-to this) filename))


;; name: "writeContentsToTimestampedFile"
;; type: "String"
;; args: (("const String&" . "filenamePrefix") ("const String&" . "filenameSuffix"))
;;
(defcfun "ogre_render_target_write_contents_to_timestamped_file"
    :string
  (ogre-render-target :pointer)
  (filename-prefix :string)
  (filename-suffix :string))

(defmethod write-contents-to-timestamped-file ((this render-target) filename-prefix filename-suffix)
  (ogre-render-target-write-contents-to-timestamped-file (pointer-to this) filename-prefix filename-suffix))


;; name: "requiresTextureFlipping"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_render_target_requires_texture_flipping"
    :boolean
  (ogre-render-target :pointer))

(defmethod requires-texture-flipping ((this render-target))
  (ogre-render-target-requires-texture-flipping (pointer-to this)))


;; name: "getTriangleCount"
;; type: "size_t"
;; args: "void"
;;
(defcfun "ogre_render_target_get_triangle_count"
    :unsigned-int
  (ogre-render-target :pointer))

(defmethod get-triangle-count ((this render-target))
  (ogre-render-target-get-triangle-count (pointer-to this)))


;; name: "getBatchCount"
;; type: "size_t"
;; args: "void"
;;
(defcfun "ogre_render_target_get_batch_count"
    :unsigned-int
  (ogre-render-target :pointer))

(defmethod get-batch-count ((this render-target))
  (ogre-render-target-get-batch-count (pointer-to this)))


;; name: "isPrimary"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_render_target_is_primary"
    :boolean
  (ogre-render-target :pointer))

(defmethod is-primary ((this render-target))
  (ogre-render-target-is-primary (pointer-to this)))


;; name: "isHardwareGammaEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_render_target_is_hardware_gamma_enabled"
    :boolean
  (ogre-render-target :pointer))

(defmethod is-hardware-gamma-enabled ((this render-target))
  (ogre-render-target-is-hardware-gamma-enabled (pointer-to this)))


;; name: "getFSAA"
;; type: "uint"
;; args: "void"
;;
(defcfun "ogre_render_target_get_fsaa"
    :uint
  (ogre-render-target :pointer))

(defmethod get-fsaa ((this render-target))
  (ogre-render-target-get-fsaa (pointer-to this)))


;;; Overloaded Foreign Functions

;; name: "update"
;; type: "void"
;; args: (("bool" . "swapBuffers"))
;;
(defcfun "ogre_render_target_update_bool"
    :void
  (ogre-render-target :pointer)
  (swap-buffers :boolean))


;; name: "getViewport"
;; type: "Viewport*"
;; args: (("unsigned short" . "index"))
;;
(defcfun "ogre_render_target_get_viewport_unsignedshort"
    :pointer
  (ogre-render-target :pointer)
  (index :unsigned-short))


;; name: "getStatistics"
;; type: "void"
;; args: (("float&" . "lastFPS") ("float&" . "avgFPS") ("float&" . "bestFPS") ("float&" . "worstFPS"))
;;
(defcfun "ogre_render_target_get_statistics_float_float_float_float"
    :void
  (ogre-render-target :pointer)
  (last-fps :pointer)
  (avg-fps :pointer)
  (best-fps :pointer)
  (worst-fps :pointer))


;; name: "getStatistics"
;; type: "const FrameStats&"
;; args: "void"
;;
(defcfun "ogre_render_target_get_statistics_void"
    :pointer
  (ogre-render-target :pointer))


;;; Methods for Overloaded Foreign Functions

(defmethod get-viewport ((this render-target) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'integer))
     (ogre-render-target-get-viewport-unsignedshort (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod update ((this render-target) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'boolean))
     (ogre-render-target-update-bool (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod get-statistics ((this render-target) &optional (arg0 nil) (arg1 nil) (arg2 nil) (arg3 nil))
  (cond
    ((and (typep arg0 'null) (typep arg1 'null) (typep arg2 'null) (typep arg3 'null))
     (ogre-render-target-get-statistics-void (pointer-to this)))
    ((and (typep arg0 'cffi:foreign-pointer) (typep arg1 'cffi:foreign-pointer) (typep arg2 'cffi:foreign-pointer) (typep arg3 'cffi:foreign-pointer))
     (ogre-render-target-get-statistics-float-float-float-float (pointer-to this) arg0 arg1 arg2 arg3))
    (t (error "Overloaded method not defined for this class."))))



