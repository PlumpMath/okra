;;;; resource-group-manager.lisp
;;;;
;;;; This file has been generated by the Okra Bindings Generator.
;;;; You should not edit this file unless you know what you're doing.
;;;; Any changes you've made directly to this file will not be retained
;;;; when a new instance of this file is generated.
;;;;
;;;; author: Erik Winkels (aerique@xs4all.nl)
;;;;
;;;; See the LICENSE file in the Okra root directory for more info.
;;;;
;;;; This file was generated on: 2009-09-15 10:46:20.

(in-package :okra-bindings)


;;; Class

(defclass resource-group-manager (ogre-object)
  ())


;;; Foreign Functions & Methods

;; name: "createResourceGroup"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_resource_group_manager_create_resource_group"
    :void
  (ogre-resource-group-manager :pointer)
  (name :string))

(defmethod create-resource-group ((this resource-group-manager) name)
  (ogre-resource-group-manager-create-resource-group (pointer-to this) name))


;; name: "initialiseResourceGroup"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_resource_group_manager_initialise_resource_group"
    :void
  (ogre-resource-group-manager :pointer)
  (name :string))

(defmethod initialise-resource-group ((this resource-group-manager) name)
  (ogre-resource-group-manager-initialise-resource-group (pointer-to this) name))


;; name: "initialiseAllResourceGroups"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_resource_group_manager_initialise_all_resource_groups"
    :void
  (ogre-resource-group-manager :pointer))

(defmethod initialise-all-resource-groups ((this resource-group-manager))
  (ogre-resource-group-manager-initialise-all-resource-groups (pointer-to this)))


;; name: "prepareResourceGroup"
;; type: "void"
;; args: (("const String&" . "name") ("bool" . "prepareMainResources") ("bool" . "prepareWorldGeom"))
;;
(defcfun "ogre_resource_group_manager_prepare_resource_group"
    :void
  (ogre-resource-group-manager :pointer)
  (name :string)
  (prepare-main-resources :boolean)
  (prepare-world-geom :boolean))

(defmethod prepare-resource-group ((this resource-group-manager) name prepare-main-resources prepare-world-geom)
  (ogre-resource-group-manager-prepare-resource-group (pointer-to this) name prepare-main-resources prepare-world-geom))


;; name: "loadResourceGroup"
;; type: "void"
;; args: (("const String&" . "name") ("bool" . "loadMainResources") ("bool" . "loadWorldGeom"))
;;
(defcfun "ogre_resource_group_manager_load_resource_group"
    :void
  (ogre-resource-group-manager :pointer)
  (name :string)
  (load-main-resources :boolean)
  (load-world-geom :boolean))

(defmethod load-resource-group ((this resource-group-manager) name load-main-resources load-world-geom)
  (ogre-resource-group-manager-load-resource-group (pointer-to this) name load-main-resources load-world-geom))


;; name: "unloadResourceGroup"
;; type: "void"
;; args: (("const String&" . "name") ("bool" . "reloadableOnly"))
;;
(defcfun "ogre_resource_group_manager_unload_resource_group"
    :void
  (ogre-resource-group-manager :pointer)
  (name :string)
  (reloadable-only :boolean))

(defmethod unload-resource-group ((this resource-group-manager) name reloadable-only)
  (ogre-resource-group-manager-unload-resource-group (pointer-to this) name reloadable-only))


;; name: "unloadUnreferencedResourcesInGroup"
;; type: "void"
;; args: (("const String&" . "name") ("bool" . "reloadableOnly"))
;;
(defcfun "ogre_resource_group_manager_unload_unreferenced_resources_in_group"
    :void
  (ogre-resource-group-manager :pointer)
  (name :string)
  (reloadable-only :boolean))

(defmethod unload-unreferenced-resources-in-group ((this resource-group-manager) name reloadable-only)
  (ogre-resource-group-manager-unload-unreferenced-resources-in-group (pointer-to this) name reloadable-only))


;; name: "clearResourceGroup"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_resource_group_manager_clear_resource_group"
    :void
  (ogre-resource-group-manager :pointer)
  (name :string))

(defmethod clear-resource-group ((this resource-group-manager) name)
  (ogre-resource-group-manager-clear-resource-group (pointer-to this) name))


;; name: "destroyResourceGroup"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_resource_group_manager_destroy_resource_group"
    :void
  (ogre-resource-group-manager :pointer)
  (name :string))

(defmethod destroy-resource-group ((this resource-group-manager) name)
  (ogre-resource-group-manager-destroy-resource-group (pointer-to this) name))


;; name: "isResourceGroupInitialised"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_resource_group_manager_is_resource_group_initialised"
    :boolean
  (ogre-resource-group-manager :pointer)
  (name :string))

(defmethod is-resource-group-initialised ((this resource-group-manager) name)
  (ogre-resource-group-manager-is-resource-group-initialised (pointer-to this) name))


;; name: "isResourceGroupLoaded"
;; type: "bool"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_resource_group_manager_is_resource_group_loaded"
    :boolean
  (ogre-resource-group-manager :pointer)
  (name :string))

(defmethod is-resource-group-loaded ((this resource-group-manager) name)
  (ogre-resource-group-manager-is-resource-group-loaded (pointer-to this) name))


;; name: "addResourceLocation"
;; type: "void"
;; args: (("const String&" . "name") ("const String&" . "locType") ("const String&" . "resGroup") ("bool" . "recursive"))
;;
(defcfun "ogre_resource_group_manager_add_resource_location"
    :void
  (ogre-resource-group-manager :pointer)
  (name :string)
  (loc-type :string)
  (res-group :string)
  (recursive :boolean))

(defmethod add-resource-location ((this resource-group-manager) name loc-type res-group recursive)
  (ogre-resource-group-manager-add-resource-location (pointer-to this) name loc-type res-group recursive))


;; name: "removeResourceLocation"
;; type: "void"
;; args: (("const String&" . "name") ("const String&" . "resGroup"))
;;
(defcfun "ogre_resource_group_manager_remove_resource_location"
    :void
  (ogre-resource-group-manager :pointer)
  (name :string)
  (res-group :string))

(defmethod remove-resource-location ((this resource-group-manager) name res-group)
  (ogre-resource-group-manager-remove-resource-location (pointer-to this) name res-group))


;; name: "undeclareResource"
;; type: "void"
;; args: (("const String&" . "name") ("const String&" . "groupName"))
;;
(defcfun "ogre_resource_group_manager_undeclare_resource"
    :void
  (ogre-resource-group-manager :pointer)
  (name :string)
  (group-name :string))

(defmethod undeclare-resource ((this resource-group-manager) name group-name)
  (ogre-resource-group-manager-undeclare-resource (pointer-to this) name group-name))


;; name: "openResource"
;; type: "DataStreamPtr"
;; args: (("const String&" . "resourceName") ("const String&" . "groupName") ("bool" . "searchGroupsIfNotFound") ("Resource*" . "resourceBeingLoaded"))
;;
(defcfun "ogre_resource_group_manager_open_resource"
    :pointer
  (ogre-resource-group-manager :pointer)
  (resource-name :string)
  (group-name :string)
  (search-groups-if-not-found :boolean)
  (resource-being-loaded :pointer))

(defmethod open-resource ((this resource-group-manager) resource-name group-name search-groups-if-not-found resource-being-loaded)
  (ogre-resource-group-manager-open-resource (pointer-to this) resource-name group-name search-groups-if-not-found resource-being-loaded))


;; name: "openResources"
;; type: "DataStreamListPtr"
;; args: (("const String&" . "pattern") ("const String&" . "groupName"))
;;
(defcfun "ogre_resource_group_manager_open_resources"
    :pointer
  (ogre-resource-group-manager :pointer)
  (pattern :string)
  (group-name :string))

(defmethod open-resources ((this resource-group-manager) pattern group-name)
  (ogre-resource-group-manager-open-resources (pointer-to this) pattern group-name))


;; name: "listResourceNames"
;; type: "StringVectorPtr"
;; args: (("const String&" . "groupName") ("bool" . "dirs"))
;;
(defcfun "ogre_resource_group_manager_list_resource_names"
    :pointer
  (ogre-resource-group-manager :pointer)
  (group-name :string)
  (dirs :boolean))

(defmethod list-resource-names ((this resource-group-manager) group-name dirs)
  (ogre-resource-group-manager-list-resource-names (pointer-to this) group-name dirs))


;; name: "listResourceFileInfo"
;; type: "FileInfoListPtr"
;; args: (("const String&" . "groupName") ("bool" . "dirs"))
;;
(defcfun "ogre_resource_group_manager_list_resource_file_info"
    :pointer
  (ogre-resource-group-manager :pointer)
  (group-name :string)
  (dirs :boolean))

(defmethod list-resource-file-info ((this resource-group-manager) group-name dirs)
  (ogre-resource-group-manager-list-resource-file-info (pointer-to this) group-name dirs))


;; name: "findResourceNames"
;; type: "StringVectorPtr"
;; args: (("const String&" . "groupName") ("const String&" . "pattern") ("bool" . "dirs"))
;;
(defcfun "ogre_resource_group_manager_find_resource_names"
    :pointer
  (ogre-resource-group-manager :pointer)
  (group-name :string)
  (pattern :string)
  (dirs :boolean))

(defmethod find-resource-names ((this resource-group-manager) group-name pattern dirs)
  (ogre-resource-group-manager-find-resource-names (pointer-to this) group-name pattern dirs))


;; name: "resourceExists"
;; type: "bool"
;; args: (("const String&" . "group") ("const String&" . "filename"))
;;
(defcfun "ogre_resource_group_manager_resource_exists"
    :boolean
  (ogre-resource-group-manager :pointer)
  (group :string)
  (filename :string))

(defmethod resource-exists ((this resource-group-manager) group filename)
  (ogre-resource-group-manager-resource-exists (pointer-to this) group filename))


;; name: "findGroupContainingResource"
;; type: "const String&"
;; args: (("const String&" . "filename"))
;;
(defcfun "ogre_resource_group_manager_find_group_containing_resource"
    :string
  (ogre-resource-group-manager :pointer)
  (filename :string))

(defmethod find-group-containing-resource ((this resource-group-manager) filename)
  (ogre-resource-group-manager-find-group-containing-resource (pointer-to this) filename))


;; name: "findResourceFileInfo"
;; type: "FileInfoListPtr"
;; args: (("const String&" . "group") ("const String&" . "pattern") ("bool" . "dirs"))
;;
(defcfun "ogre_resource_group_manager_find_resource_file_info"
    :pointer
  (ogre-resource-group-manager :pointer)
  (group :string)
  (pattern :string)
  (dirs :boolean))

(defmethod find-resource-file-info ((this resource-group-manager) group pattern dirs)
  (ogre-resource-group-manager-find-resource-file-info (pointer-to this) group pattern dirs))


;; name: "resourceModifiedTime"
;; type: "time_t"
;; args: (("const String&" . "group") ("const String&" . "filename"))
;;
(defcfun "ogre_resource_group_manager_resource_modified_time"
    :long
  (ogre-resource-group-manager :pointer)
  (group :string)
  (filename :string))

(defmethod resource-modified-time ((this resource-group-manager) group filename)
  (ogre-resource-group-manager-resource-modified-time (pointer-to this) group filename))


;; name: "addResourceGroupListener"
;; type: "void"
;; args: (("ResourceGroupListener*" . "l"))
;;
(defcfun "ogre_resource_group_manager_add_resource_group_listener"
    :void
  (ogre-resource-group-manager :pointer)
  (l :pointer))

(defmethod add-resource-group-listener ((this resource-group-manager) l)
  (ogre-resource-group-manager-add-resource-group-listener (pointer-to this) l))


;; name: "removeResourceGroupListener"
;; type: "void"
;; args: (("ResourceGroupListener*" . "l"))
;;
(defcfun "ogre_resource_group_manager_remove_resource_group_listener"
    :void
  (ogre-resource-group-manager :pointer)
  (l :pointer))

(defmethod remove-resource-group-listener ((this resource-group-manager) l)
  (ogre-resource-group-manager-remove-resource-group-listener (pointer-to this) l))


;; name: "setWorldResourceGroupName"
;; type: "void"
;; args: (("const String&" . "groupName"))
;;
(defcfun "ogre_resource_group_manager_set_world_resource_group_name"
    :void
  (ogre-resource-group-manager :pointer)
  (group-name :string))

(defmethod set-world-resource-group-name ((this resource-group-manager) group-name)
  (ogre-resource-group-manager-set-world-resource-group-name (pointer-to this) group-name))


;; name: "getWorldResourceGroupName"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_resource_group_manager_get_world_resource_group_name"
    :string
  (ogre-resource-group-manager :pointer))

(defmethod get-world-resource-group-name ((this resource-group-manager))
  (ogre-resource-group-manager-get-world-resource-group-name (pointer-to this)))


;; name: "linkWorldGeometryToResourceGroup"
;; type: "void"
;; args: (("const String&" . "group") ("const String&" . "worldGeometry") ("SceneManager*" . "sceneManager"))
;;
(defcfun "ogre_resource_group_manager_link_world_geometry_to_resource_group"
    :void
  (ogre-resource-group-manager :pointer)
  (group :string)
  (world-geometry :string)
  (scene-manager :pointer))

(defmethod link-world-geometry-to-resource-group ((this resource-group-manager) group world-geometry scene-manager)
  (ogre-resource-group-manager-link-world-geometry-to-resource-group (pointer-to this) group world-geometry scene-manager))


;; name: "unlinkWorldGeometryFromResourceGroup"
;; type: "void"
;; args: (("const String&" . "group"))
;;
(defcfun "ogre_resource_group_manager_unlink_world_geometry_from_resource_group"
    :void
  (ogre-resource-group-manager :pointer)
  (group :string))

(defmethod unlink-world-geometry-from-resource-group ((this resource-group-manager) group)
  (ogre-resource-group-manager-unlink-world-geometry-from-resource-group (pointer-to this) group))


;; name: "shutdownAll"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_resource_group_manager_shutdown_all"
    :void
  (ogre-resource-group-manager :pointer))

(defmethod shutdown-all ((this resource-group-manager))
  (ogre-resource-group-manager-shutdown-all (pointer-to this)))


;; name: "getResourceManagerIterator"
;; type: "ResourceManagerIterator"
;; args: "void"
;;
(defcfun "ogre_resource_group_manager_get_resource_manager_iterator"
    :pointer
  (ogre-resource-group-manager :pointer))

(defmethod get-resource-manager-iterator ((this resource-group-manager))
  (ogre-resource-group-manager-get-resource-manager-iterator (pointer-to this)))


;; name: "getResourceGroups"
;; type: "StringVector"
;; args: "void"
;;
(defcfun "ogre_resource_group_manager_get_resource_groups"
    :pointer
  (ogre-resource-group-manager :pointer))

(defmethod get-resource-groups ((this resource-group-manager))
  (ogre-resource-group-manager-get-resource-groups (pointer-to this)))


;; name: "getResourceDeclarationList"
;; type: "ResourceDeclarationList"
;; args: (("const String&" . "groupName"))
;;
(defcfun "ogre_resource_group_manager_get_resource_declaration_list"
    :pointer
  (ogre-resource-group-manager :pointer)
  (group-name :string))

(defmethod get-resource-declaration-list ((this resource-group-manager) group-name)
  (ogre-resource-group-manager-get-resource-declaration-list (pointer-to this) group-name))


;; name: "setLoadingListener"
;; type: "void"
;; args: (("ResourceLoadingListener*" . "listener"))
;;
(defcfun "ogre_resource_group_manager_set_loading_listener"
    :void
  (ogre-resource-group-manager :pointer)
  (listener :pointer))

(defmethod set-loading-listener ((this resource-group-manager) listener)
  (ogre-resource-group-manager-set-loading-listener (pointer-to this) listener))


;; name: "getLoadingListener"
;; type: "ResourceLoadingListener*"
;; args: "void"
;;
(defcfun "ogre_resource_group_manager_get_loading_listener"
    :pointer
  (ogre-resource-group-manager :pointer))

(defmethod get-loading-listener ((this resource-group-manager))
  (ogre-resource-group-manager-get-loading-listener (pointer-to this)))


;;; Overloaded Foreign Functions

;; name: "declareResource"
;; type: "void"
;; args: (("const String&" . "name") ("const String&" . "resourceType") ("const String&" . "groupName") ("const NameValuePairList&" . "loadParameters"))
;;
(defcfun "ogre_resource_group_manager_declare_resource_string_string_string_namevaluepairlist"
    :void
  (ogre-resource-group-manager :pointer)
  (name :string)
  (resource-type :string)
  (group-name :string)
  (load-parameters :pointer))


;; name: "declareResource"
;; type: "void"
;; args: (("const String&" . "name") ("const String&" . "resourceType") ("const String&" . "groupName") ("ManualResourceLoader*" . "loader") ("const NameValuePairList&" . "loadParameters"))
;;
(defcfun "ogre_resource_group_manager_declare_resource_string_string_string_manualresourceloader_namevaluepairlist"
    :void
  (ogre-resource-group-manager :pointer)
  (name :string)
  (resource-type :string)
  (group-name :string)
  (loader :pointer)
  (load-parameters :pointer))


;;; Methods for Overloaded Foreign Functions

(defmethod declare-resource ((this resource-group-manager) &optional (arg0 nil) (arg1 nil) (arg2 nil) (arg3 nil) (arg4 nil))
  (cond
    ((and (typep arg0 'string) (typep arg1 'string) (typep arg2 'string) (typep arg3 'cffi:foreign-pointer) (typep arg4 'cffi:foreign-pointer))
     (ogre-resource-group-manager-declare-resource-string-string-string-manualresourceloader-namevaluepairlist (pointer-to this) arg0 arg1 arg2 arg3 arg4))
    ((and (typep arg0 'string) (typep arg1 'string) (typep arg2 'string) (typep arg3 'cffi:foreign-pointer))
     (ogre-resource-group-manager-declare-resource-string-string-string-namevaluepairlist (pointer-to this) arg0 arg1 arg2 arg3))
    (t (error "Overloaded method not defined for this class."))))



