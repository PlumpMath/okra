;;;; root.lisp
;;;;
;;;; This file has been generated by the Okra Bindings Generator.
;;;; You should not edit this file unless you know what you're doing.
;;;; Any changes you've made directly to this file will not be retained
;;;; when a new instance of this file is generated.
;;;;
;;;; author: Erik Winkels (aerique@xs4all.nl)
;;;;
;;;; See the LICENSE file in the Okra root directory for more info.
;;;;
;;;; This file was generated on: 2009-09-29 16:00:40.

(in-package :okra-bindings)


;;; Class

(defclass root (ogre-object)
  ())


;;; Foreign Functions & Methods

;; name: "saveConfig"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_root_save_config"
    :void
  (ogre-root :pointer))

(defmethod save-config ((this root))
  (ogre-root-save-config (pointer-to this)))


;; name: "restoreConfig"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_root_restore_config"
    :boolean
  (ogre-root :pointer))

(defmethod restore-config ((this root))
  (ogre-root-restore-config (pointer-to this)))


;; name: "showConfigDialog"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_root_show_config_dialog"
    :boolean
  (ogre-root :pointer))

(defmethod show-config-dialog ((this root))
  (ogre-root-show-config-dialog (pointer-to this)))


;; name: "addRenderSystem"
;; type: "void"
;; args: (("RenderSystem*" . "newRend"))
;;
(defcfun "ogre_root_add_render_system"
    :void
  (ogre-root :pointer)
  (new-rend :pointer))

(defmethod add-render-system ((this root) new-rend)
  (ogre-root-add-render-system (pointer-to this) new-rend))


;; name: "getAvailableRenderers"
;; type: "RenderSystemList*"
;; args: "void"
;;
(defcfun "ogre_root_get_available_renderers"
    :pointer
  (ogre-root :pointer))

(defmethod get-available-renderers ((this root))
  (loop with rs-list =
    (ogre-root-get-available-renderers (pointer-to this))
    for i from 1 to (parse-integer (mem-aref rs-list :string 0))
        collect (mem-aref rs-list :string i)
        finally (foreign-free rs-list)))


;; name: "getRenderSystemByName"
;; type: "RenderSystem*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_root_get_render_system_by_name"
    :pointer
  (ogre-root :pointer)
  (name :string))

(defmethod get-render-system-by-name ((this root) name)
  (ogre-root-get-render-system-by-name (pointer-to this) name))


;; name: "setRenderSystem"
;; type: "void"
;; args: (("RenderSystem*" . "system"))
;;
(defcfun "ogre_root_set_render_system"
    :void
  (ogre-root :pointer)
  (system :pointer))

(defmethod set-render-system ((this root) system)
  (ogre-root-set-render-system (pointer-to this) system))


;; name: "getRenderSystem"
;; type: "RenderSystem*"
;; args: "void"
;;
(defcfun "ogre_root_get_render_system"
    :pointer
  (ogre-root :pointer))

(defmethod get-render-system ((this root))
  (ogre-root-get-render-system (pointer-to this)))


;; name: "isInitialised"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_root_is_initialised"
    :boolean
  (ogre-root :pointer))

(defmethod is-initialised ((this root))
  (ogre-root-is-initialised (pointer-to this)))


;; name: "useCustomRenderSystemCapabilities"
;; type: "void"
;; args: (("RenderSystemCapabilities*" . "capabilities"))
;;
(defcfun "ogre_root_use_custom_render_system_capabilities"
    :void
  (ogre-root :pointer)
  (capabilities :pointer))

(defmethod use-custom-render-system-capabilities ((this root) capabilities)
  (ogre-root-use-custom-render-system-capabilities (pointer-to this) capabilities))


;; name: "addSceneManagerFactory"
;; type: "void"
;; args: (("SceneManagerFactory*" . "fact"))
;;
(defcfun "ogre_root_add_scene_manager_factory"
    :void
  (ogre-root :pointer)
  (fact :pointer))

(defmethod add-scene-manager-factory ((this root) fact)
  (ogre-root-add-scene-manager-factory (pointer-to this) fact))


;; name: "removeSceneManagerFactory"
;; type: "void"
;; args: (("SceneManagerFactory*" . "fact"))
;;
(defcfun "ogre_root_remove_scene_manager_factory"
    :void
  (ogre-root :pointer)
  (fact :pointer))

(defmethod remove-scene-manager-factory ((this root) fact)
  (ogre-root-remove-scene-manager-factory (pointer-to this) fact))


;; name: "getSceneManagerMetaData"
;; type: "const SceneManagerMetaData*"
;; args: (("const String&" . "typeName"))
;;
(defcfun "ogre_root_get_scene_manager_meta_data"
    :pointer
  (ogre-root :pointer)
  (type-name :string))

(defmethod get-scene-manager-meta-data ((this root) type-name)
  (ogre-root-get-scene-manager-meta-data (pointer-to this) type-name))


;; name: "getSceneManagerMetaDataIterator"
;; type: "SceneManagerEnumerator::MetaDataIterator"
;; args: "void"
;;
(defcfun "ogre_root_get_scene_manager_meta_data_iterator"
    :pointer
  (ogre-root :pointer))

(defmethod get-scene-manager-meta-data-iterator ((this root))
  (ogre-root-get-scene-manager-meta-data-iterator (pointer-to this)))


;; name: "destroySceneManager"
;; type: "void"
;; args: (("SceneManager*" . "sm"))
;;
(defcfun "ogre_root_destroy_scene_manager"
    :void
  (ogre-root :pointer)
  (sm :pointer))

(defmethod destroy-scene-manager ((this root) sm)
  (ogre-root-destroy-scene-manager (pointer-to this) sm))


;; name: "getSceneManagerIterator"
;; type: "SceneManagerEnumerator::SceneManagerIterator"
;; args: "void"
;;
(defcfun "ogre_root_get_scene_manager_iterator"
    :pointer
  (ogre-root :pointer))

(defmethod get-scene-manager-iterator ((this root))
  (ogre-root-get-scene-manager-iterator (pointer-to this)))


;; name: "getTextureManager"
;; type: "TextureManager*"
;; args: "void"
;;
(defcfun "ogre_root_get_texture_manager"
    :pointer
  (ogre-root :pointer))

(defmethod get-texture-manager ((this root))
  (ogre-root-get-texture-manager (pointer-to this)))


;; name: "getMeshManager"
;; type: "MeshManager*"
;; args: "void"
;;
(defcfun "ogre_root_get_mesh_manager"
    :pointer
  (ogre-root :pointer))

(defmethod get-mesh-manager ((this root))
  (ogre-root-get-mesh-manager (pointer-to this)))


;; name: "getErrorDescription"
;; type: "String"
;; args: (("long" . "errorNumber"))
;;
(defcfun "ogre_root_get_error_description"
    :string
  (ogre-root :pointer)
  (error-number :long))

(defmethod get-error-description ((this root) error-number)
  (ogre-root-get-error-description (pointer-to this) error-number))


;; name: "addFrameListener"
;; type: "void"
;; args: (("FrameListener*" . "newListener"))
;;
(defcfun "ogre_root_add_frame_listener"
    :void
  (ogre-root :pointer)
  (new-listener :pointer))

(defmethod add-frame-listener ((this root) new-listener)
  (ogre-root-add-frame-listener (pointer-to this) new-listener))


;; name: "removeFrameListener"
;; type: "void"
;; args: (("FrameListener*" . "oldListener"))
;;
(defcfun "ogre_root_remove_frame_listener"
    :void
  (ogre-root :pointer)
  (old-listener :pointer))

(defmethod remove-frame-listener ((this root) old-listener)
  (ogre-root-remove-frame-listener (pointer-to this) old-listener))


;; name: "queueEndRendering"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_root_queue_end_rendering"
    :void
  (ogre-root :pointer))

(defmethod queue-end-rendering ((this root))
  (ogre-root-queue-end-rendering (pointer-to this)))


;; name: "startRendering"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_root_start_rendering"
    :void
  (ogre-root :pointer))

(defmethod start-rendering ((this root))
  (ogre-root-start-rendering (pointer-to this)))


;; name: "renderOneFrame"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_root_render_one_frame"
    :boolean
  (ogre-root :pointer))

(defmethod render-one-frame ((this root))
  (ogre-root-render-one-frame (pointer-to this)))


;; name: "shutdown"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_root_shutdown"
    :void
  (ogre-root :pointer))

(defmethod shutdown ((this root))
  (ogre-root-shutdown (pointer-to this)))


;; name: "addResourceLocation"
;; type: "void"
;; args: (("const String&" . "name") ("const String&" . "locType") ("const String&" . "groupName") ("bool" . "recursive"))
;;
(defcfun "ogre_root_add_resource_location"
    :void
  (ogre-root :pointer)
  (name :string)
  (loc-type :string)
  (group-name :string)
  (recursive :boolean))

(defmethod add-resource-location ((this root) name loc-type group-name recursive)
  (ogre-root-add-resource-location (pointer-to this) name loc-type group-name recursive))


;; name: "removeResourceLocation"
;; type: "void"
;; args: (("const String&" . "name") ("const String&" . "groupName"))
;;
(defcfun "ogre_root_remove_resource_location"
    :void
  (ogre-root :pointer)
  (name :string)
  (group-name :string))

(defmethod remove-resource-location ((this root) name group-name)
  (ogre-root-remove-resource-location (pointer-to this) name group-name))


;; name: "convertColourValue"
;; type: "void"
;; args: (("const ColourValue&" . "colour") ("uint32*" . "pDest"))
;;
(defcfun "ogre_root_convert_colour_value"
    :void
  (ogre-root :pointer)
  (colour okra-array4)
  (pdest :pointer))

(defmethod convert-colour-value ((this root) colour pdest)
  (ogre-root-convert-colour-value (pointer-to this) colour pdest))


;; name: "getAutoCreatedWindow"
;; type: "RenderWindow*"
;; args: "void"
;;
(defcfun "ogre_root_get_auto_created_window"
    :pointer
  (ogre-root :pointer))

(defmethod get-auto-created-window ((this root))
  (ogre-root-get-auto-created-window (pointer-to this)))


;; name: "createRenderWindow"
;; type: "RenderWindow*"
;; args: (("const String&" . "name") ("unsigned int" . "width") ("unsigned int" . "height") ("bool" . "fullScreen") ("const NameValuePairList*" . "miscParams"))
;;
(defcfun "ogre_root_create_render_window"
    :pointer
  (ogre-root :pointer)
  (name :string)
  (width :unsigned-int)
  (height :unsigned-int)
  (full-screen :boolean)
  (misc-params :pointer))

(defmethod create-render-window ((this root) name width height full-screen misc-params)
  (ogre-root-create-render-window (pointer-to this) name width height full-screen misc-params))


;; name: "getRenderTarget"
;; type: "RenderTarget*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_root_get_render_target"
    :pointer
  (ogre-root :pointer)
  (name :string))

(defmethod get-render-target ((this root) name)
  (ogre-root-get-render-target (pointer-to this) name))


;; name: "loadPlugin"
;; type: "void"
;; args: (("const String&" . "pluginName"))
;;
(defcfun "ogre_root_load_plugin"
    :void
  (ogre-root :pointer)
  (plugin-name :string))

(defmethod load-plugin ((this root) plugin-name)
  (ogre-root-load-plugin (pointer-to this) plugin-name))


;; name: "unloadPlugin"
;; type: "void"
;; args: (("const String&" . "pluginName"))
;;
(defcfun "ogre_root_unload_plugin"
    :void
  (ogre-root :pointer)
  (plugin-name :string))

(defmethod unload-plugin ((this root) plugin-name)
  (ogre-root-unload-plugin (pointer-to this) plugin-name))


;; name: "installPlugin"
;; type: "void"
;; args: (("Plugin*" . "plugin"))
;;
(defcfun "ogre_root_install_plugin"
    :void
  (ogre-root :pointer)
  (plugin :pointer))

(defmethod install-plugin ((this root) plugin)
  (ogre-root-install-plugin (pointer-to this) plugin))


;; name: "uninstallPlugin"
;; type: "void"
;; args: (("Plugin*" . "plugin"))
;;
(defcfun "ogre_root_uninstall_plugin"
    :void
  (ogre-root :pointer)
  (plugin :pointer))

(defmethod uninstall-plugin ((this root) plugin)
  (ogre-root-uninstall-plugin (pointer-to this) plugin))


;; name: "getInstalledPlugins"
;; type: "const PluginInstanceList&"
;; args: "void"
;;
(defcfun "ogre_root_get_installed_plugins"
    :pointer
  (ogre-root :pointer))

(defmethod get-installed-plugins ((this root))
  (ogre-root-get-installed-plugins (pointer-to this)))


;; name: "getTimer"
;; type: "Timer*"
;; args: "void"
;;
(defcfun "ogre_root_get_timer"
    :pointer
  (ogre-root :pointer))

(defmethod get-timer ((this root))
  (ogre-root-get-timer (pointer-to this)))


;; name: "getNextFrameNumber"
;; type: "unsigned long"
;; args: "void"
;;
(defcfun "ogre_root_get_next_frame_number"
    :unsigned-long
  (ogre-root :pointer))

(defmethod get-next-frame-number ((this root))
  (ogre-root-get-next-frame-number (pointer-to this)))


;; name: "createRenderQueueInvocationSequence"
;; type: "RenderQueueInvocationSequence*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_root_create_render_queue_invocation_sequence"
    :pointer
  (ogre-root :pointer)
  (name :string))

(defmethod create-render-queue-invocation-sequence ((this root) name)
  (ogre-root-create-render-queue-invocation-sequence (pointer-to this) name))


;; name: "getRenderQueueInvocationSequence"
;; type: "RenderQueueInvocationSequence*"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_root_get_render_queue_invocation_sequence"
    :pointer
  (ogre-root :pointer)
  (name :string))

(defmethod get-render-queue-invocation-sequence ((this root) name)
  (ogre-root-get-render-queue-invocation-sequence (pointer-to this) name))


;; name: "destroyRenderQueueInvocationSequence"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_root_destroy_render_queue_invocation_sequence"
    :void
  (ogre-root :pointer)
  (name :string))

(defmethod destroy-render-queue-invocation-sequence ((this root) name)
  (ogre-root-destroy-render-queue-invocation-sequence (pointer-to this) name))


;; name: "destroyAllRenderQueueInvocationSequences"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_root_destroy_all_render_queue_invocation_sequences"
    :void
  (ogre-root :pointer))

(defmethod destroy-all-render-queue-invocation-sequences ((this root))
  (ogre-root-destroy-all-render-queue-invocation-sequences (pointer-to this)))


;; name: "clearEventTimes"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_root_clear_event_times"
    :void
  (ogre-root :pointer))

(defmethod clear-event-times ((this root))
  (ogre-root-clear-event-times (pointer-to this)))


;; name: "setFrameSmoothingPeriod"
;; type: "void"
;; args: (("Real" . "period"))
;;
(defcfun "ogre_root_set_frame_smoothing_period"
    :void
  (ogre-root :pointer)
  (period okra-real))

(defmethod set-frame-smoothing-period ((this root) period)
  (ogre-root-set-frame-smoothing-period (pointer-to this) period))


;; name: "getFrameSmoothingPeriod"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_root_get_frame_smoothing_period"
    okra-real
  (ogre-root :pointer))

(defmethod get-frame-smoothing-period ((this root))
  (ogre-root-get-frame-smoothing-period (pointer-to this)))


;; name: "addMovableObjectFactory"
;; type: "void"
;; args: (("MovableObjectFactory*" . "fact") ("bool" . "overrideExisting"))
;;
(defcfun "ogre_root_add_movable_object_factory"
    :void
  (ogre-root :pointer)
  (fact :pointer)
  (override-existing :boolean))

(defmethod add-movable-object-factory ((this root) fact override-existing)
  (ogre-root-add-movable-object-factory (pointer-to this) fact override-existing))


;; name: "removeMovableObjectFactory"
;; type: "void"
;; args: (("MovableObjectFactory*" . "fact"))
;;
(defcfun "ogre_root_remove_movable_object_factory"
    :void
  (ogre-root :pointer)
  (fact :pointer))

(defmethod remove-movable-object-factory ((this root) fact)
  (ogre-root-remove-movable-object-factory (pointer-to this) fact))


;; name: "hasMovableObjectFactory"
;; type: "bool"
;; args: (("const String&" . "typeName"))
;;
(defcfun "ogre_root_has_movable_object_factory"
    :boolean
  (ogre-root :pointer)
  (type-name :string))

(defmethod has-movable-object-factory ((this root) type-name)
  (ogre-root-has-movable-object-factory (pointer-to this) type-name))


;; name: "getMovableObjectFactory"
;; type: "MovableObjectFactory*"
;; args: (("const String&" . "typeName"))
;;
(defcfun "ogre_root_get_movable_object_factory"
    :pointer
  (ogre-root :pointer)
  (type-name :string))

(defmethod get-movable-object-factory ((this root) type-name)
  (ogre-root-get-movable-object-factory (pointer-to this) type-name))


;; name: "getMovableObjectFactoryIterator"
;; type: "MovableObjectFactoryIterator"
;; args: "void"
;;
(defcfun "ogre_root_get_movable_object_factory_iterator"
    :pointer
  (ogre-root :pointer))

(defmethod get-movable-object-factory-iterator ((this root))
  (ogre-root-get-movable-object-factory-iterator (pointer-to this)))


;;; Overloaded Foreign Functions

;; name: "initialise"
;; type: "RenderWindow*"
;; args: (("bool" . "autoCreateWindow") ("const String&" . "windowTitle") ("const String&" . "customCapabilitiesConfig"))
;;
(defcfun "ogre_root_initialise_bool_string_string"
    :pointer
  (ogre-root :pointer)
  (auto-create-window :boolean)
  (window-title :string)
  (custom-capabilities-config :string))


;; name: "createSceneManager"
;; type: "SceneManager*"
;; args: (("const String&" . "typeName") ("const String&" . "instanceName"))
;;
(defcfun "ogre_root_create_scene_manager_string_string"
    :pointer
  (ogre-root :pointer)
  (type-name :string)
  (instance-name :string))


;; name: "createSceneManager"
;; type: "SceneManager*"
;; args: (("SceneTypeMask" . "typeMask") ("const String&" . "instanceName"))
;;
(defcfun "ogre_root_create_scene_manager_scenetypemask_string"
    :pointer
  (ogre-root :pointer)
  (type-mask :uint16)
  (instance-name :string))


;; name: "getSceneManager"
;; type: "SceneManager*"
;; args: (("const String&" . "instanceName"))
;;
(defcfun "ogre_root_get_scene_manager_string"
    :pointer
  (ogre-root :pointer)
  (instance-name :string))


;; name: "detachRenderTarget"
;; type: "void"
;; args: (("RenderTarget*" . "pWin"))
;;
(defcfun "ogre_root_detach_render_target_rendertarget"
    :void
  (ogre-root :pointer)
  (pwin :pointer))


;; name: "detachRenderTarget"
;; type: "void"
;; args: (("const String&" . "name"))
;;
(defcfun "ogre_root_detach_render_target_string"
    :void
  (ogre-root :pointer)
  (name :string))


;;; Methods for Overloaded Foreign Functions

(defmethod get-scene-manager ((this root) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-root-get-scene-manager-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod initialise ((this root) &optional (arg0 nil) (arg1 nil) (arg2 nil))
  (cond
    ((and (typep arg0 'boolean) (typep arg1 'string) (typep arg2 'string))
     (ogre-root-initialise-bool-string-string (pointer-to this) arg0 arg1 arg2))
    (t (error "Overloaded method not defined for this class."))))


(defmethod create-scene-manager ((this root) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 'integer) (typep arg1 'string))
     (ogre-root-create-scene-manager-scenetypemask-string (pointer-to this) arg0 arg1))
    ((and (typep arg0 'string) (typep arg1 'string))
     (ogre-root-create-scene-manager-string-string (pointer-to this) arg0 arg1))
    (t (error "Overloaded method not defined for this class."))))


(defmethod detach-render-target ((this root) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'string))
     (ogre-root-detach-render-target-string (pointer-to this) arg0))
    ((and (typep arg0 'cffi:foreign-pointer))
     (ogre-root-detach-render-target-rendertarget (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))



