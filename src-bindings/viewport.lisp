;;;; viewport.lisp
;;;;
;;;; This file has been generated by the Okra Bindings Generator.
;;;; You should not edit this file unless you know what you're doing.
;;;; Any changes you've made directly to this file will not be retained
;;;; when a new instance of this file is generated.
;;;;
;;;; author: Erik Winkels (aerique@xs4all.nl)
;;;;
;;;; See the LICENSE file in the Okra root directory for more info.
;;;;
;;;; This file was generated on: 2009-09-15 10:46:20.

(in-package :okra-bindings)


;;; Class

(defclass viewport (ogre-object)
  ())


;;; Foreign Functions & Methods

;; name: "getTarget"
;; type: "RenderTarget*"
;; args: "void"
;;
(defcfun "ogre_viewport_get_target"
    :pointer
  (ogre-viewport :pointer))

(defmethod get-target ((this viewport))
  (ogre-viewport-get-target (pointer-to this)))


;; name: "setCamera"
;; type: "void"
;; args: (("Camera*" . "cam"))
;;
(defcfun "ogre_viewport_set_camera"
    :void
  (ogre-viewport :pointer)
  (cam :pointer))

(defmethod set-camera ((this viewport) cam)
  (ogre-viewport-set-camera (pointer-to this) cam))


;; name: "getZOrder"
;; type: "int"
;; args: "void"
;;
(defcfun "ogre_viewport_get_zorder"
    :int
  (ogre-viewport :pointer))

(defmethod get-zorder ((this viewport))
  (ogre-viewport-get-zorder (pointer-to this)))


;; name: "getLeft"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_viewport_get_left"
    okra-real
  (ogre-viewport :pointer))

(defmethod get-left ((this viewport))
  (ogre-viewport-get-left (pointer-to this)))


;; name: "getTop"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_viewport_get_top"
    okra-real
  (ogre-viewport :pointer))

(defmethod get-top ((this viewport))
  (ogre-viewport-get-top (pointer-to this)))


;; name: "getWidth"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_viewport_get_width"
    okra-real
  (ogre-viewport :pointer))

(defmethod get-width ((this viewport))
  (ogre-viewport-get-width (pointer-to this)))


;; name: "getHeight"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_viewport_get_height"
    okra-real
  (ogre-viewport :pointer))

(defmethod get-height ((this viewport))
  (ogre-viewport-get-height (pointer-to this)))


;; name: "getActualLeft"
;; type: "int"
;; args: "void"
;;
(defcfun "ogre_viewport_get_actual_left"
    :int
  (ogre-viewport :pointer))

(defmethod get-actual-left ((this viewport))
  (ogre-viewport-get-actual-left (pointer-to this)))


;; name: "getActualTop"
;; type: "int"
;; args: "void"
;;
(defcfun "ogre_viewport_get_actual_top"
    :int
  (ogre-viewport :pointer))

(defmethod get-actual-top ((this viewport))
  (ogre-viewport-get-actual-top (pointer-to this)))


;; name: "getActualWidth"
;; type: "int"
;; args: "void"
;;
(defcfun "ogre_viewport_get_actual_width"
    :int
  (ogre-viewport :pointer))

(defmethod get-actual-width ((this viewport))
  (ogre-viewport-get-actual-width (pointer-to this)))


;; name: "getActualHeight"
;; type: "int"
;; args: "void"
;;
(defcfun "ogre_viewport_get_actual_height"
    :int
  (ogre-viewport :pointer))

(defmethod get-actual-height ((this viewport))
  (ogre-viewport-get-actual-height (pointer-to this)))


;; name: "setBackgroundColour"
;; type: "void"
;; args: (("const ColourValue&" . "colour"))
;;
(defcfun "ogre_viewport_set_background_colour"
    :void
  (ogre-viewport :pointer)
  (colour okra-array4))

(defmethod set-background-colour ((this viewport) colour)
  (ogre-viewport-set-background-colour (pointer-to this) colour))


;; name: "getBackgroundColour"
;; type: "const ColourValue&"
;; args: "void"
;;
(defcfun "ogre_viewport_get_background_colour"
    :void
  (ogre-viewport :pointer)
  (array4 :pointer))

(defmethod get-background-colour ((this viewport))
  (with-foreign-object (array 'okra-real 4)
    (ogre-viewport-get-background-colour (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3))))


;; name: "setClearEveryFrame"
;; type: "void"
;; args: (("bool" . "clear") ("unsigned int" . "buffers"))
;;
(defcfun "ogre_viewport_set_clear_every_frame"
    :void
  (ogre-viewport :pointer)
  (clear :boolean)
  (buffers :unsigned-int))

(defmethod set-clear-every-frame ((this viewport) clear buffers)
  (ogre-viewport-set-clear-every-frame (pointer-to this) clear buffers))


;; name: "getClearEveryFrame"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_viewport_get_clear_every_frame"
    :boolean
  (ogre-viewport :pointer))

(defmethod get-clear-every-frame ((this viewport))
  (ogre-viewport-get-clear-every-frame (pointer-to this)))


;; name: "getClearBuffers"
;; type: "unsigned int"
;; args: "void"
;;
(defcfun "ogre_viewport_get_clear_buffers"
    :unsigned-int
  (ogre-viewport :pointer))

(defmethod get-clear-buffers ((this viewport))
  (ogre-viewport-get-clear-buffers (pointer-to this)))


;; name: "setMaterialScheme"
;; type: "void"
;; args: (("const String&" . "schemeName"))
;;
(defcfun "ogre_viewport_set_material_scheme"
    :void
  (ogre-viewport :pointer)
  (scheme-name :string))

(defmethod set-material-scheme ((this viewport) scheme-name)
  (ogre-viewport-set-material-scheme (pointer-to this) scheme-name))


;; name: "getMaterialScheme"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_viewport_get_material_scheme"
    :string
  (ogre-viewport :pointer))

(defmethod get-material-scheme ((this viewport))
  (ogre-viewport-get-material-scheme (pointer-to this)))


;; name: "getActualDimensions"
;; type: "void"
;; args: (("int&" . "left") ("int&" . "top") ("int&" . "width") ("int&" . "height"))
;;
(defcfun "ogre_viewport_get_actual_dimensions"
    :void
  (ogre-viewport :pointer)
  (left :pointer)
  (top :pointer)
  (width :pointer)
  (height :pointer))

(defmethod get-actual-dimensions ((this viewport) left top width height)
  (ogre-viewport-get-actual-dimensions (pointer-to this) left top width height))


;; name: "setOverlaysEnabled"
;; type: "void"
;; args: (("bool" . "enabled"))
;;
(defcfun "ogre_viewport_set_overlays_enabled"
    :void
  (ogre-viewport :pointer)
  (enabled :boolean))

(defmethod set-overlays-enabled ((this viewport) enabled)
  (ogre-viewport-set-overlays-enabled (pointer-to this) enabled))


;; name: "getOverlaysEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_viewport_get_overlays_enabled"
    :boolean
  (ogre-viewport :pointer))

(defmethod get-overlays-enabled ((this viewport))
  (ogre-viewport-get-overlays-enabled (pointer-to this)))


;; name: "setSkiesEnabled"
;; type: "void"
;; args: (("bool" . "enabled"))
;;
(defcfun "ogre_viewport_set_skies_enabled"
    :void
  (ogre-viewport :pointer)
  (enabled :boolean))

(defmethod set-skies-enabled ((this viewport) enabled)
  (ogre-viewport-set-skies-enabled (pointer-to this) enabled))


;; name: "getSkiesEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_viewport_get_skies_enabled"
    :boolean
  (ogre-viewport :pointer))

(defmethod get-skies-enabled ((this viewport))
  (ogre-viewport-get-skies-enabled (pointer-to this)))


;; name: "setShadowsEnabled"
;; type: "void"
;; args: (("bool" . "enabled"))
;;
(defcfun "ogre_viewport_set_shadows_enabled"
    :void
  (ogre-viewport :pointer)
  (enabled :boolean))

(defmethod set-shadows-enabled ((this viewport) enabled)
  (ogre-viewport-set-shadows-enabled (pointer-to this) enabled))


;; name: "getShadowsEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_viewport_get_shadows_enabled"
    :boolean
  (ogre-viewport :pointer))

(defmethod get-shadows-enabled ((this viewport))
  (ogre-viewport-get-shadows-enabled (pointer-to this)))


;; name: "setVisibilityMask"
;; type: "void"
;; args: (("uint32" . "mask"))
;;
(defcfun "ogre_viewport_set_visibility_mask"
    :void
  (ogre-viewport :pointer)
  (mask :uint32))

(defmethod set-visibility-mask ((this viewport) mask)
  (ogre-viewport-set-visibility-mask (pointer-to this) mask))


;; name: "getVisibilityMask"
;; type: "uint"
;; args: "void"
;;
(defcfun "ogre_viewport_get_visibility_mask"
    :uint
  (ogre-viewport :pointer))

(defmethod get-visibility-mask ((this viewport))
  (ogre-viewport-get-visibility-mask (pointer-to this)))


;; name: "setRenderQueueInvocationSequenceName"
;; type: "void"
;; args: (("const String&" . "sequenceName"))
;;
(defcfun "ogre_viewport_set_render_queue_invocation_sequence_name"
    :void
  (ogre-viewport :pointer)
  (sequence-name :string))

(defmethod set-render-queue-invocation-sequence-name ((this viewport) sequence-name)
  (ogre-viewport-set-render-queue-invocation-sequence-name (pointer-to this) sequence-name))


;; name: "getRenderQueueInvocationSequenceName"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_viewport_get_render_queue_invocation_sequence_name"
    :string
  (ogre-viewport :pointer))

(defmethod get-render-queue-invocation-sequence-name ((this viewport))
  (ogre-viewport-get-render-queue-invocation-sequence-name (pointer-to this)))


;;; Overloaded Foreign Functions

;; name: "update"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_viewport_update_void"
    :void
  (ogre-viewport :pointer))


;; name: "getCamera"
;; type: "Camera*"
;; args: "void"
;;
(defcfun "ogre_viewport_get_camera_void"
    :pointer
  (ogre-viewport :pointer))


;; name: "setDimensions"
;; type: "void"
;; args: (("Real" . "left") ("Real" . "top") ("Real" . "width") ("Real" . "height"))
;;
(defcfun "ogre_viewport_set_dimensions_real_real_real_real"
    :void
  (ogre-viewport :pointer)
  (left okra-real)
  (top okra-real)
  (width okra-real)
  (height okra-real))


;;; Methods for Overloaded Foreign Functions

(defmethod set-dimensions ((this viewport) &optional (arg0 nil) (arg1 nil) (arg2 nil) (arg3 nil))
  (cond
    ((and (typep arg0 'real) (typep arg1 'real) (typep arg2 'real) (typep arg3 'real))
     (ogre-viewport-set-dimensions-real-real-real-real (pointer-to this) arg0 arg1 arg2 arg3))
    (t (error "Overloaded method not defined for this class."))))


(defmethod update ((this viewport) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'null))
     (ogre-viewport-update-void (pointer-to this)))
    (t (error "Overloaded method not defined for this class."))))


(defmethod get-camera ((this viewport) &optional (arg0 nil))
  (cond
    ((and (typep arg0 'null))
     (ogre-viewport-get-camera-void (pointer-to this)))
    (t (error "Overloaded method not defined for this class."))))



