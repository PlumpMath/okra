;;;; overlay-element.lisp
;;;;
;;;; This file has been generated by the Okra Bindings Generator.
;;;; You should not edit this file unless you know what you're doing.
;;;; Any changes you've made directly to this file will not be retained
;;;; when a new instance of this file is generated.
;;;;
;;;; author: Erik Winkels (aerique@xs4all.nl)
;;;;
;;;; See the LICENSE file in the Okra root directory for more info.
;;;;
;;;; This file was generated on: 2009-09-24 13:29:03.

(in-package :okra-bindings)


;;; Class

(defclass overlay-element (ogre-object)
  ())


;;; Foreign Functions & Methods

;; name: "getName"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_name"
    :string
  (ogre-overlay-element :pointer))

(defmethod get-name ((this overlay-element))
  (ogre-overlay-element-get-name (pointer-to this)))


;; name: "show"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_overlay_element_show"
    :void
  (ogre-overlay-element :pointer))

(defmethod show ((this overlay-element))
  (ogre-overlay-element-show (pointer-to this)))


;; name: "hide"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_overlay_element_hide"
    :void
  (ogre-overlay-element :pointer))

(defmethod hide ((this overlay-element))
  (ogre-overlay-element-hide (pointer-to this)))


;; name: "isEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_overlay_element_is_enabled"
    :boolean
  (ogre-overlay-element :pointer))

(defmethod is-enabled ((this overlay-element))
  (ogre-overlay-element-is-enabled (pointer-to this)))


;; name: "setEnabled"
;; type: "void"
;; args: (("bool" . "b"))
;;
(defcfun "ogre_overlay_element_set_enabled"
    :void
  (ogre-overlay-element :pointer)
  (b :boolean))

(defmethod set-enabled ((this overlay-element) b)
  (ogre-overlay-element-set-enabled (pointer-to this) b))


;; name: "setWidth"
;; type: "void"
;; args: (("Real" . "width"))
;;
(defcfun "ogre_overlay_element_set_width"
    :void
  (ogre-overlay-element :pointer)
  (width okra-real))

(defmethod set-width ((this overlay-element) width)
  (ogre-overlay-element-set-width (pointer-to this) width))


;; name: "getWidth"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_width"
    okra-real
  (ogre-overlay-element :pointer))

(defmethod get-width ((this overlay-element))
  (ogre-overlay-element-get-width (pointer-to this)))


;; name: "setHeight"
;; type: "void"
;; args: (("Real" . "height"))
;;
(defcfun "ogre_overlay_element_set_height"
    :void
  (ogre-overlay-element :pointer)
  (height okra-real))

(defmethod set-height ((this overlay-element) height)
  (ogre-overlay-element-set-height (pointer-to this) height))


;; name: "getHeight"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_height"
    okra-real
  (ogre-overlay-element :pointer))

(defmethod get-height ((this overlay-element))
  (ogre-overlay-element-get-height (pointer-to this)))


;; name: "setLeft"
;; type: "void"
;; args: (("Real" . "left"))
;;
(defcfun "ogre_overlay_element_set_left"
    :void
  (ogre-overlay-element :pointer)
  (left okra-real))

(defmethod set-left ((this overlay-element) left)
  (ogre-overlay-element-set-left (pointer-to this) left))


;; name: "getLeft"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_left"
    okra-real
  (ogre-overlay-element :pointer))

(defmethod get-left ((this overlay-element))
  (ogre-overlay-element-get-left (pointer-to this)))


;; name: "setTop"
;; type: "void"
;; args: (("Real" . "Top"))
;;
(defcfun "ogre_overlay_element_set_top"
    :void
  (ogre-overlay-element :pointer)
  (top okra-real))

(defmethod set-top ((this overlay-element) top)
  (ogre-overlay-element-set-top (pointer-to this) top))


;; name: "getTop"
;; type: "Real"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_top"
    okra-real
  (ogre-overlay-element :pointer))

(defmethod get-top ((this overlay-element))
  (ogre-overlay-element-get-top (pointer-to this)))


;; name: "getMaterialName"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_material_name"
    :string
  (ogre-overlay-element :pointer))

(defmethod get-material-name ((this overlay-element))
  (ogre-overlay-element-get-material-name (pointer-to this)))


;; name: "getMaterial"
;; type: "const MaterialPtr&"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_material"
    :pointer
  (ogre-overlay-element :pointer))

(defmethod get-material ((this overlay-element))
  (ogre-overlay-element-get-material (pointer-to this)))


;; name: "getWorldTransforms"
;; type: "void"
;; args: (("Matrix4*" . "xform"))
;;
(defcfun "ogre_overlay_element_get_world_transforms"
    :void
  (ogre-overlay-element :pointer)
  (xform :pointer))

(defmethod get-world-transforms ((this overlay-element) xform)
  (ogre-overlay-element-get-world-transforms (pointer-to this) xform))


;; name: "visitRenderables"
;; type: "void"
;; args: (("Renderable::Visitor*" . "visitor") ("bool" . "debugRenderables"))
;;
(defcfun "ogre_overlay_element_visit_renderables"
    :void
  (ogre-overlay-element :pointer)
  (visitor :pointer)
  (debug-renderables :boolean))

(defmethod visit-renderables ((this overlay-element) visitor debug-renderables)
  (ogre-overlay-element-visit-renderables (pointer-to this) visitor debug-renderables))


;; name: "getTypeName"
;; type: "const String&"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_type_name"
    :string
  (ogre-overlay-element :pointer))

(defmethod get-type-name ((this overlay-element))
  (ogre-overlay-element-get-type-name (pointer-to this)))


;; name: "setCaption"
;; type: "void"
;; args: (("const DisplayString&" . "text"))
;;
(defcfun "ogre_overlay_element_set_caption"
    :void
  (ogre-overlay-element :pointer)
  (text :string))

(defmethod set-caption ((this overlay-element) text)
  (ogre-overlay-element-set-caption (pointer-to this) text))


;; name: "setColour"
;; type: "void"
;; args: (("const ColourValue&" . "col"))
;;
(defcfun "ogre_overlay_element_set_colour"
    :void
  (ogre-overlay-element :pointer)
  (col okra-array4))

(defmethod set-colour ((this overlay-element) col)
  (ogre-overlay-element-set-colour (pointer-to this) col))


;; name: "getColour"
;; type: "const ColourValue&"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_colour"
    :void
  (ogre-overlay-element :pointer)
  (array4 :pointer))

(defmethod get-colour ((this overlay-element))
  (with-foreign-object (array 'okra-real 4)
    (ogre-overlay-element-get-colour (pointer-to this) array)
    (vector (mem-aref array 'okra-real 0) (mem-aref array 'okra-real 1)
            (mem-aref array 'okra-real 2) (mem-aref array 'okra-real 3))))


;; name: "setMetricsMode"
;; type: "void"
;; args: (("GuiMetricsMode" . "gmm"))
;;
(defcfun "ogre_overlay_element_set_metrics_mode"
    :void
  (ogre-overlay-element :pointer)
  (gmm gui-metrics-mode))

(defmethod set-metrics-mode ((this overlay-element) gmm)
  (ogre-overlay-element-set-metrics-mode (pointer-to this) gmm))


;; name: "getMetricsMode"
;; type: "GuiMetricsMode"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_metrics_mode"
    gui-metrics-mode
  (ogre-overlay-element :pointer))

(defmethod get-metrics-mode ((this overlay-element))
  (ogre-overlay-element-get-metrics-mode (pointer-to this)))


;; name: "setHorizontalAlignment"
;; type: "void"
;; args: (("GuiHorizontalAlignment" . "gha"))
;;
(defcfun "ogre_overlay_element_set_horizontal_alignment"
    :void
  (ogre-overlay-element :pointer)
  (gha gui-horizontal-alignment))

(defmethod set-horizontal-alignment ((this overlay-element) gha)
  (ogre-overlay-element-set-horizontal-alignment (pointer-to this) gha))


;; name: "getHorizontalAlignment"
;; type: "GuiHorizontalAlignment"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_horizontal_alignment"
    gui-horizontal-alignment
  (ogre-overlay-element :pointer))

(defmethod get-horizontal-alignment ((this overlay-element))
  (ogre-overlay-element-get-horizontal-alignment (pointer-to this)))


;; name: "setVerticalAlignment"
;; type: "void"
;; args: (("GuiVerticalAlignment" . "gva"))
;;
(defcfun "ogre_overlay_element_set_vertical_alignment"
    :void
  (ogre-overlay-element :pointer)
  (gva gui-vertical-alignment))

(defmethod set-vertical-alignment ((this overlay-element) gva)
  (ogre-overlay-element-set-vertical-alignment (pointer-to this) gva))


;; name: "getVerticalAlignment"
;; type: "GuiVerticalAlignment"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_vertical_alignment"
    gui-vertical-alignment
  (ogre-overlay-element :pointer))

(defmethod get-vertical-alignment ((this overlay-element))
  (ogre-overlay-element-get-vertical-alignment (pointer-to this)))


;; name: "contains"
;; type: "bool"
;; args: (("Real" . "x") ("Real" . "y"))
;;
(defcfun "ogre_overlay_element_contains"
    :boolean
  (ogre-overlay-element :pointer)
  (x okra-real)
  (y okra-real))

(defmethod contains ((this overlay-element) x y)
  (ogre-overlay-element-contains (pointer-to this) x y))


;; name: "findElementAt"
;; type: "OverlayElement*"
;; args: (("Real" . "x") ("Real" . "y"))
;;
(defcfun "ogre_overlay_element_find_element_at"
    :pointer
  (ogre-overlay-element :pointer)
  (x okra-real)
  (y okra-real))

(defmethod find-element-at ((this overlay-element) x y)
  (ogre-overlay-element-find-element-at (pointer-to this) x y))


;; name: "isContainer"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_overlay_element_is_container"
    :boolean
  (ogre-overlay-element :pointer))

(defmethod is-container ((this overlay-element))
  (ogre-overlay-element-is-container (pointer-to this)))


;; name: "isKeyEnabled"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_overlay_element_is_key_enabled"
    :boolean
  (ogre-overlay-element :pointer))

(defmethod is-key-enabled ((this overlay-element))
  (ogre-overlay-element-is-key-enabled (pointer-to this)))


;; name: "isCloneable"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_overlay_element_is_cloneable"
    :boolean
  (ogre-overlay-element :pointer))

(defmethod is-cloneable ((this overlay-element))
  (ogre-overlay-element-is-cloneable (pointer-to this)))


;; name: "setCloneable"
;; type: "void"
;; args: (("bool" . "c"))
;;
(defcfun "ogre_overlay_element_set_cloneable"
    :void
  (ogre-overlay-element :pointer)
  (c :boolean))

(defmethod set-cloneable ((this overlay-element) c)
  (ogre-overlay-element-set-cloneable (pointer-to this) c))


;; name: "getParent"
;; type: "OverlayContainer*"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_parent"
    :pointer
  (ogre-overlay-element :pointer))

(defmethod get-parent ((this overlay-element))
  (ogre-overlay-element-get-parent (pointer-to this)))


;; name: "getZOrder"
;; type: "ushort"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_zorder"
    :ushort
  (ogre-overlay-element :pointer))

(defmethod get-zorder ((this overlay-element))
  (ogre-overlay-element-get-zorder (pointer-to this)))


;; name: "getSquaredViewDepth"
;; type: "Real"
;; args: (("const Camera*" . "cam"))
;;
(defcfun "ogre_overlay_element_get_squared_view_depth"
    okra-real
  (ogre-overlay-element :pointer)
  (cam :pointer))

(defmethod get-squared-view-depth ((this overlay-element) cam)
  (ogre-overlay-element-get-squared-view-depth (pointer-to this) cam))


;; name: "getLights"
;; type: "const LightList&"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_lights"
    :pointer
  (ogre-overlay-element :pointer))

(defmethod get-lights ((this overlay-element))
  (ogre-overlay-element-get-lights (pointer-to this)))


;; name: "copyFromTemplate"
;; type: "void"
;; args: (("OverlayElement*" . "templateOverlay"))
;;
(defcfun "ogre_overlay_element_copy_from_template"
    :void
  (ogre-overlay-element :pointer)
  (template-overlay :pointer))

(defmethod copy-from-template ((this overlay-element) template-overlay)
  (ogre-overlay-element-copy-from-template (pointer-to this) template-overlay))


;; name: "clone"
;; type: "OverlayElement*"
;; args: (("const String&" . "instanceName"))
;;
(defcfun "ogre_overlay_element_clone"
    :pointer
  (ogre-overlay-element :pointer)
  (instance-name :string))

(defmethod clone ((this overlay-element) instance-name)
  (ogre-overlay-element-clone (pointer-to this) instance-name))


;; name: "getSourceTemplate"
;; type: "const OverlayElement*"
;; args: "void"
;;
(defcfun "ogre_overlay_element_get_source_template"
    :pointer
  (ogre-overlay-element :pointer))

(defmethod get-source-template ((this overlay-element))
  (ogre-overlay-element-get-source-template (pointer-to this)))


;;; Overloaded Foreign Functions

;; name: "initialise"
;; type: "void"
;; args: "void"
;;
(defcfun "ogre_overlay_element_initialise_void"
    :void
  (ogre-overlay-element :pointer))


;; name: "isVisible"
;; type: "bool"
;; args: "void"
;;
(defcfun "ogre_overlay_element_is_visible_void"
    :boolean
  (ogre-overlay-element :pointer))


;; name: "setDimensions"
;; type: "void"
;; args: (("Real" . "width") ("Real" . "height"))
;;
(defcfun "ogre_overlay_element_set_dimensions_real_real"
    :void
  (ogre-overlay-element :pointer)
  (width okra-real)
  (height okra-real))


;; name: "setPosition"
;; type: "void"
;; args: (("Real" . "left") ("Real" . "top"))
;;
(defcfun "ogre_overlay_element_set_position_real_real"
    :void
  (ogre-overlay-element :pointer)
  (left okra-real)
  (top okra-real))


;; name: "setMaterialName"
;; type: "void"
;; args: (("const String&" . "matName"))
;;
(defcfun "ogre_overlay_element_set_material_name_string"
    :void
  (ogre-overlay-element :pointer)
  (mat-name :string))


;;; Methods for Overloaded Foreign Functions

(defmethod set-position ((this overlay-element) &optional (arg0 nil) (arg1 nil) (arg2 nil))
  (declare (ignore arg2))
  (cond
    ((and (typep arg0 'real) (typep arg1 'real))
     (ogre-overlay-element-set-position-real-real (pointer-to this) arg0 arg1))
    (t (error "Overloaded method not defined for this class."))))


(defmethod is-visible ((this overlay-element) &optional (arg0 nil) (arg1 nil))
  (cond
    ((and (typep arg0 'null) (typep arg1 'null))
     (ogre-overlay-element-is-visible-void (pointer-to this)))
    (t (error "Overloaded method not defined for this class."))))


(defmethod set-material-name ((this overlay-element) &optional (arg0 nil) (arg1 nil))
  (declare (ignore arg1))
  (cond
    ((and (typep arg0 'string))
     (ogre-overlay-element-set-material-name-string (pointer-to this) arg0))
    (t (error "Overloaded method not defined for this class."))))


(defmethod initialise ((this overlay-element) &optional (arg0 nil) (arg1 nil) (arg2 nil))
  (cond
    ((and (typep arg0 'null) (typep arg1 'null) (typep arg2 'null))
     (ogre-overlay-element-initialise-void (pointer-to this)))
    (t (error "Overloaded method not defined for this class."))))


(defmethod set-dimensions ((this overlay-element) &optional (arg0 nil) (arg1 nil) (arg2 nil) (arg3 nil))
  (declare (ignore arg2 arg3))
  (cond
    ((and (typep arg0 'real) (typep arg1 'real))
     (ogre-overlay-element-set-dimensions-real-real (pointer-to this) arg0 arg1))
    (t (error "Overloaded method not defined for this class."))))



